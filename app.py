# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d3lMT3sa7aPj5RTf2d-hAl-7ELTFHr48
"""

# -*- coding: utf-8 -*-
"""
Synthetica Financial: –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Streamlit
"""

import os
import json
import random
import re
import math
import time
import pandas as pd
import numpy as np
import io
import matplotlib.pyplot as plt
import seaborn as sns
from typing import List, Dict, Any, Optional, Tuple, Union, Set
from datetime import datetime
import streamlit as st
import anthropic
import openai
from tqdm import tqdm
import concurrent.futures
from functools import lru_cache
from collections import Counter, defaultdict
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import LatentDirichletAllocation
import warnings
warnings.filterwarnings('ignore')

# –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ Streamlit –≤ —Ñ–∞–π–ª–µ
st.set_page_config(
    page_title="Synthetica Financial: –°–∏–º—É–ª—è—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
    page_icon="üí∞", 
    layout="wide", 
    initial_sidebar_state="expanded"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ NLTK
@st.cache_resource
def load_nltk_resources():
    try:
        nltk.data.find('tokenizers/punkt')
    except LookupError:
        nltk.download('punkt', quiet=True)

    try:
        nltk.data.find('corpora/stopwords')
    except LookupError:
        nltk.download('stopwords', quiet=True)

# –í—ã–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
load_nltk_resources()

# –ö–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ numpy —Ç–∏–ø–æ–≤ –≤ JSON
class NumpyEncoder(json.JSONEncoder):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ numpy —Ç–∏–ø–æ–≤ –≤ JSON"""
    def default(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        return super(NumpyEncoder, self).default(obj)

class BankReviewsAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –æ –±–∞–Ω–∫–∞—Ö –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        self.reviews_data = None
        self.banks = []
        self.common_issues = {}
        self.sentiment_by_bank = {}
        self.frequent_terms = {}
        self.topics = {}
        self.russian_stopwords = set(stopwords.words('russian')) | {
            '–±–∞–Ω–∫', '–±–∞–Ω–∫–∞', '–±–∞–Ω–∫—É', '–±–∞–Ω–∫–æ–º', '–±–∞–Ω–∫–µ', '–±–∞–Ω–∫–æ–≤', '–±–∞–Ω–∫–∏', '–±–∞–Ω–∫–∞–º', '–±–∞–Ω–∫–∞–º–∏', '–±–∞–Ω–∫–∞—Ö',
            '—ç—Ç–æ', '—ç—Ç–æ—Ç', '—ç—Ç–∞', '—ç—Ç–∏', '—Ç–æ–≥–æ', '—ç—Ç–æ–≥–æ', '—Ç–æ—Ç', '—Ç–µ', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–æ–≥–æ', '–∫–æ—Ç–æ—Ä–∞—è',
            '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–∫–∞–∫', '—á—Ç–æ', '—á–µ–º', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ', '–∫–æ–≥–æ', '–∫–æ–º—É', '–∫–µ–º', '–∫–æ–º'
        }

    def load_reviews(self, file_data) -> None:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º

        Args:
            file_data: –î–∞–Ω–Ω—ã–µ Excel —Ñ–∞–π–ª–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö
        """
        try:
            self.reviews_data = pd.read_excel(file_data)
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.reviews_data)} –æ—Ç–∑—ã–≤–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞:
            # rating - –æ—Ü–µ–Ω–∫–∞, theme - —Ç–µ–º–∞, review - –æ—Ç–∑—ã–≤, categorie - –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            column_mapping = {}

            # –ú–∞–ø–ø–∏–Ω–≥ review –∫–æ–ª–æ–Ω–∫–∏
            if 'review' in self.reviews_data.columns:
                column_mapping['review'] = 'text'
            elif '–æ—Ç–∑—ã–≤' in self.reviews_data.columns:
                column_mapping['–æ—Ç–∑—ã–≤'] = 'text'
            elif '—Ç–µ–∫—Å—Ç' in self.reviews_data.columns:
                column_mapping['—Ç–µ–∫—Å—Ç'] = 'text'

            # –ú–∞–ø–ø–∏–Ω–≥ rating –∫–æ–ª–æ–Ω–∫–∏
            if 'rating' in self.reviews_data.columns:
                column_mapping['rating'] = 'rating'
            elif '–æ—Ü–µ–Ω–∫–∞' in self.reviews_data.columns:
                column_mapping['–æ—Ü–µ–Ω–∫–∞'] = 'rating'
            elif '—Ä–µ–π—Ç–∏–Ω–≥' in self.reviews_data.columns:
                column_mapping['—Ä–µ–π—Ç–∏–Ω–≥'] = 'rating'

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º theme –∏–ª–∏ categorie –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–º–µ–Ω—ã –¥–ª—è bank
            if 'theme' in self.reviews_data.columns:
                column_mapping['theme'] = 'bank'
            elif '—Ç–µ–º–∞' in self.reviews_data.columns:
                column_mapping['—Ç–µ–º–∞'] = 'bank'
            elif 'categorie' in self.reviews_data.columns:
                column_mapping['categorie'] = 'bank'
            elif '–∫–∞—Ç–µ–≥–æ—Ä–∏—è' in self.reviews_data.columns:
                column_mapping['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] = 'bank'

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if column_mapping:
                self.reviews_data = self.reviews_data.rename(columns=column_mapping)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = ['text', 'rating', 'bank']
            missing_columns = [col for col in required_columns if col not in self.reviews_data.columns]

            if missing_columns:
                st.warning(f"–í–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if 'text' not in self.reviews_data.columns and 'review' in self.reviews_data.columns:
                    self.reviews_data['text'] = self.reviews_data['review']
                if 'rating' not in self.reviews_data.columns:
                    self.reviews_data['rating'] = 3  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if 'bank' not in self.reviews_data.columns:
                    self.reviews_data['bank'] = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º/–∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if 'bank' in self.reviews_data.columns:
                self.banks = self.reviews_data['bank'].unique().tolist()
                st.info(f"–ù–∞–π–¥–µ–Ω–æ {len(self.banks)} —Ç–µ–º/–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(self.banks[:5] if len(self.banks) > 5 else self.banks)}...")

            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            self._analyze_reviews()

        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")

    def _analyze_reviews(self) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
        if self.reviews_data is None:
            return

        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –±–∞–Ω–∫–∞–º
        if all(col in self.reviews_data.columns for col in ['bank', 'rating']):
            self.sentiment_by_bank = self.reviews_data.groupby('bank')['rating'].agg(
                ['mean', 'count', 'std']).sort_values(by='mean', ascending=False).to_dict('index')

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ, –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ)
            for bank, stats in self.sentiment_by_bank.items():
                if stats['mean'] >= 4:
                    sentiment = "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"
                elif stats['mean'] >= 3:
                    sentiment = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"
                else:
                    sentiment = "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ"
                self.sentiment_by_bank[bank]['sentiment'] = sentiment

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
        if 'text' in self.reviews_data.columns:
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
                all_texts = ' '.join(self.reviews_data['text'].fillna('').astype(str).tolist())
                all_words = [word.lower() for word in word_tokenize(all_texts, language='russian')
                           if word.isalpha() and word.lower() not in self.russian_stopwords and len(word) > 2]

                word_freq = Counter(all_words)
                self.frequent_terms = {word: count for word, count in word_freq.most_common(100)}

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é LDA
                vectorizer = TfidfVectorizer(
                    max_df=0.7, min_df=2,
                    stop_words=list(self.russian_stopwords),
                    lowercase=True,
                    ngram_range=(1, 2)
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –Ω–∞—Å –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                if len(self.reviews_data) >= 20:
                    X = vectorizer.fit_transform(self.reviews_data['text'].fillna('').astype(str))

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º
                    n_topics = min(10, len(self.reviews_data) // 5)

                    lda = LatentDirichletAllocation(
                        n_components=n_topics,
                        max_iter=10,
                        learning_method='online',
                        random_state=42
                    )

                    lda.fit(X)

                    feature_names = vectorizer.get_feature_names_out()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-10 —Å–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
                    for topic_idx, topic in enumerate(lda.components_):
                        top_features_idx = topic.argsort()[:-11:-1]
                        top_features = [feature_names[i] for i in top_features_idx]
                        self.topics[f'–¢–µ–º–∞ {topic_idx+1}'] = top_features

                # –ê–Ω–∞–ª–∏–∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
                if 'rating' in self.reviews_data.columns:
                    negative_reviews = self.reviews_data[self.reviews_data['rating'] <= 3]

                    if len(negative_reviews) > 0:
                        neg_text = ' '.join(negative_reviews['text'].fillna('').astype(str))

                        # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                        problem_indicators = [
                            '–ø—Ä–æ–±–ª–µ–º', '–æ—à–∏–±–∫', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–Ω–µ –º–æ–≥—É', '–ø–ª–æ—Ö', '—É–∂–∞—Å', '–æ—Ç–∫–∞–∑',
                            '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '—Ç—Ä—É–¥–Ω–æ—Å—Ç', '—Å–ª–æ–∂–Ω–æ', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', '–¥–æ–ª–≥–æ', '–æ—á–µ—Ä–µ–¥',
                            '—Ö–∞–º—Å—Ç–≤', '–≥—Ä—É–±–æ', '–Ω–∞–≤—è–∑—ã–≤–∞', '—Å–∫—Ä—ã—Ç', '–∫–æ–º–∏—Å—Å–∏', '–æ–±–º–∞–Ω'
                        ]

                        # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                        problems = []
                        for indicator in problem_indicators:
                            pattern = re.compile(r'.{0,30}' + indicator + r'.{0,50}', re.IGNORECASE)
                            matches = pattern.findall(neg_text)
                            problems.extend(matches)

                        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ–±–ª–µ–º
                        self.common_issues = Counter(problems).most_common(20)

            except Exception as e:
                st.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")

    def get_bank_info(self, bank_name: str = None) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–∞–Ω–∫–µ –∏–ª–∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

        Args:
            bank_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–Ω–∫–µ –∏–ª–∏ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        if bank_name is not None and bank_name in self.sentiment_by_bank:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±–∞–Ω–∫–µ
            bank_reviews = self.reviews_data[self.reviews_data['bank'] == bank_name]

            # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–∑—ã–≤–æ–≤
            positive_examples = bank_reviews[bank_reviews['rating'] >= 4]['text'].sample(
                min(3, len(bank_reviews[bank_reviews['rating'] >= 4]))).tolist()

            negative_examples = bank_reviews[bank_reviews['rating'] <= 2]['text'].sample(
                min(3, len(bank_reviews[bank_reviews['rating'] <= 2]))).tolist()

            return {
                'name': bank_name,
                'sentiment': self.sentiment_by_bank[bank_name],
                'positive_examples': positive_examples,
                'negative_examples': negative_examples
            }
        else:
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–Ω–∫–∞—Ö
            top_banks = sorted(
                self.sentiment_by_bank.items(),
                key=lambda x: x[1]['count'],
                reverse=True
            )[:10]

            return {
                'total_reviews': len(self.reviews_data) if self.reviews_data is not None else 0,
                'top_banks': dict(top_banks),
                'common_issues': self.common_issues,
                'frequent_terms': dict(list(self.frequent_terms.items())[:30]),
                'topics': self.topics
            }

    def get_bank_list(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        return self.banks

    def extract_prompting_data(self) -> Dict:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        result = {
            'banking_terms': list(self.frequent_terms.keys())[:50],
            'common_issues': [issue for issue, _ in self.common_issues],
            'sentiment_by_bank': {
                bank: data['sentiment']
                for bank, data in self.sentiment_by_bank.items()
            },
            'topics': self.topics
        }

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
        term_categories = {
            '–∫—Ä–µ–¥–∏—Ç—ã': ['–∫—Ä–µ–¥–∏—Ç', '–∑–∞–π–º', '—Å—Å—É–¥', '–ø—Ä–æ—Ü–µ–Ω—Ç', '—Å—Ç–∞–≤–∫'],
            '–∫–∞—Ä—Ç—ã': ['–∫–∞—Ä—Ç', '–∫—ç—à–±—ç–∫', '–±–æ–Ω—É—Å', '–ª–∏–º–∏—Ç'],
            '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': ['–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏', '—Å–µ—Ä–≤–∏—Å', '–ø–æ–¥–¥–µ—Ä–∂–∫', '–æ–ø–µ—Ä–∞—Ç–æ—Ä', '–æ—Ñ–∏—Å', '–æ—Ç–¥–µ–ª–µ–Ω–∏'],
            '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ': ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏', '—Å–∞–π—Ç', '–æ–Ω–ª–∞–π–Ω', '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', '–º–æ–±–∏–ª—å–Ω'],
            '–≤—ã–ø–ª–∞—Ç—ã': ['–≤—ã–ø–ª–∞—Ç', '–ø–µ—Ä–µ–≤–æ–¥', '—Å–Ω—è—Ç', '–∫–æ–º–∏—Å—Å–∏', '–¥–µ–Ω—å–≥–∏', '–ø–ª–∞—Ç']
        }

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categorized_terms = defaultdict(list)
        for term in self.frequent_terms:
            for category, patterns in term_categories.items():
                if any(pattern in term.lower() for pattern in patterns):
                    categorized_terms[category].append(term)
                    break

        result['categorized_terms'] = dict(categorized_terms)
        return result

class FinancialKnowledgeBase:
    """–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, —Ç–µ—Ä–º–∏–Ω–∞—Ö –∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è—Ö"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        # –£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        self.financial_literacy_levels = {
            "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π": {
                "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–Ω–∞–∫–æ–º —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏",
                "vocabulary_complexity": 0.2,
                "accuracy": 0.3,
                "confidence": 0.5,
                "detail_level": 0.2
            },
            "–Ω–∞—á–∏–Ω–∞—é—â–∏–π": {
                "description": "–ò–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è (–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –ø—Ä–æ—Å—Ç—ã–µ –≤–∫–ª–∞–¥—ã)",
                "vocabulary_complexity": 0.4,
                "accuracy": 0.5,
                "confidence": 0.6,
                "detail_level": 0.4
            },
            "—Å—Ä–µ–¥–Ω–∏–π": {
                "description": "–ü–æ–Ω–∏–º–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∏–º–µ–µ—Ç –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤",
                "vocabulary_complexity": 0.6,
                "accuracy": 0.7,
                "confidence": 0.7,
                "detail_level": 0.6
            },
            "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": {
                "description": "–•–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∏–º–µ–µ—Ç –æ–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                "vocabulary_complexity": 0.8,
                "accuracy": 0.85,
                "confidence": 0.8,
                "detail_level": 0.8
            },
            "—ç–∫—Å–ø–µ—Ä—Ç": {
                "description": "–ì–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                "vocabulary_complexity": 0.95,
                "accuracy": 0.95,
                "confidence": 0.9,
                "detail_level": 0.9
            }
        }

        # –°–ª–æ–≤–∞—Ä—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º
        self.financial_vocabulary = {
            "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π": [
                "–¥–µ–Ω—å–≥–∏", "–∑–∞—Ä–ø–ª–∞—Ç–∞", "–±–∞–Ω–∫–æ–º–∞—Ç", "–∫–∞—Ä—Ç–æ—á–∫–∞", "—Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã", "–∫—Ä–µ–¥–∏—Ç", "–¥–æ–ª–≥",
                "–∫–æ–º–∏—Å—Å–∏—è", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "—Å–±–µ—Ä–∫–Ω–∏–∂–∫–∞", "–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "–æ–±–Ω–∞–ª–∏—á–∏—Ç—å", "—Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏",
                "–ø–æ–ª–æ–∂–∏—Ç—å –¥–µ–Ω—å–≥–∏", "–±–∞–Ω–∫", "–ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã", "–ø–µ—Ä–µ–ø–ª–∞—Ç–∞", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–ø–∏–Ω-–∫–æ–¥"
            ],
            "–Ω–∞—á–∏–Ω–∞—é—â–∏–π": [
                "–¥–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞", "–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", "–≤–∫–ª–∞–¥", "–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", "–æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç",
                "–±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç", "–º–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫", "–ø–µ—Ä–µ–≤–æ–¥", "—Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö", "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞",
                "–∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç", "–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", "–ª—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "—Å–º—Å-–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫", "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–∫–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–æ—Å—Ç–∞—Ç–æ–∫ –ø–æ —Å—á–µ—Ç—É"
            ],
            "—Å—Ä–µ–¥–Ω–∏–π": [
                "–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤", "–ª—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "–∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", "—Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", "–∫–µ—à–±—ç–∫", "–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç", "—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞", "–¥–µ–ø–æ–∑–∏—Ç",
                "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç", "–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç", "–∏–ø–æ—Ç–µ–∫–∞", "–¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ",
                "–∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂", "—Ü–µ–ª–µ–≤–æ–π –∫—Ä–µ–¥–∏—Ç", "–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç", "–Ω–µ—Å–Ω–∏–∂–∞–µ–º—ã–π –æ—Å—Ç–∞—Ç–æ–∫",
                "–æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç", "–ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏—è –≤–∫–ª–∞–¥–∞", "—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞", "–Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç"
            ],
            "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π": [
                "–¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "–æ–±–ª–∏–≥–∞—Ü–∏–∏", "–∞–∫—Ü–∏–∏", "—Ñ–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫",
                "–∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂", "–∏–ø–æ—Ç–µ—á–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã", "–±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á–µ—Ç", "–ò–ò–°", "–Ω–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç",
                "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏", "–ù–ü–§", "–ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è",
                "–≤–∞–ª—é—Ç–Ω—ã–π —Ä–∏—Å–∫", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "–±–∏—Ä–∂–µ–≤–æ–π –∫—É—Ä—Å", "—Å—Ä–æ—á–Ω—ã–π —Ä—ã–Ω–æ–∫", "–∏–Ω–¥–µ–∫—Å–Ω—ã–π —Ñ–æ–Ω–¥",
                "—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –∫—Ä–µ–¥–∏—Ç–∞", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥", "–ª–∏–∑–∏–Ω–≥", "—Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"
            ],
            "—ç–∫—Å–ø–µ—Ä—Ç": [
                "–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "–ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å", "—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤", "ETF", "—Ñ—å—é—á–µ—Ä—Å—ã", "–æ–±–ª–∏–≥–∞—Ü–∏–∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–π–º–∞",
                "–¥—é—Ä–∞—Ü–∏—è", "–∞–ª–ª–æ–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤", "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é", "—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "–º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è",
                "–¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã", "–†–ï–ü–û", "—Å–≤–æ–ø", "—Å—É–±–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏", "–ª–∏—Å—Ç–∏–Ω–≥", "–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –ü–ò–§—ã",
                "–±–µ–∑–æ—Ç–∑—ã–≤–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã", "—ç—Å–∫—Ä–æ—É —Å—á–µ—Ç", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–≤–æ–ø—ã", "–æ–ø—Ü–∏–æ–Ω—ã", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã",
                "—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤", "–ø–µ—Ä–≤–∏—á–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", "—Ç–æ—Ä–≥–æ–≤–ª—è –≤ —à–æ—Ä—Ç", "—Å—Ç–æ–ø-–ª–æ—Å—Å"
            ]
        }

        # –¢–∏–ø–∏—á–Ω—ã–µ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –ø–æ —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π
        self.financial_misconceptions = {
            "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π": [
                "–í—Å–µ –±–∞–Ω–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Ä–∞–∑–Ω–∏—Ü—ã –Ω–µ—Ç",
                "–ö—Ä–µ–¥–∏—Ç - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–ª–æ—Ö–æ, –∞ –¥–æ–ª–≥ - –ø—Ä–∏–∑–Ω–∞–∫ –±–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
                "–í—Å–µ –±–∞–Ω–∫–∏ –æ–±–º–∞–Ω—ã–≤–∞—é—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "–•—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å–≥–∏ –¥–æ–º–∞ –Ω–∞–¥–µ–∂–Ω–µ–µ, —á–µ–º –≤ –±–∞–Ω–∫–µ",
                "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ–≥–∞—Ç—ã—Ö",
                "–ù–∞–ª–∏—á–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã—Ö",
                "–ß–µ–º –±–æ–ª—å—à–µ –±–∞–Ω–∫, —Ç–µ–º –æ–Ω –Ω–∞–¥–µ–∂–Ω–µ–µ",
                "–ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞ –≥–ª–∞–≤–Ω–æ–µ - –Ω–∏–∑–∫–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞",
                "–ë–∞–Ω–∫–æ–º–∞—Ç—ã –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–æ–≤ –≤—Å–µ–≥–¥–∞ –±–µ—Ä—É—Ç –æ–≥—Ä–æ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é",
                "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã, —Å –Ω–∏—Ö –ª–µ–≥–∫–æ —É–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏",
                "–õ—é–±—É—é –±–∞–Ω–∫–æ–≤—Å–∫—É—é —É—Å–ª—É–≥—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π",
                "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞",
                "–í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–Ω–∫–µ –ª–µ–≥–∫–æ –º–æ–≥—É—Ç —É–∫—Ä–∞—Å—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏",
                "–í—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ, –≤ –Ω–∏—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è"
            ],
            "–Ω–∞—á–∏–Ω–∞—é—â–∏–π": [
                "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ - —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–µ–Ω—å–≥–∏",
                "–ß–µ–º –≤—ã—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ –≤–∫–ª–∞–¥—É, —Ç–µ–º –Ω–∞–¥–µ–∂–Ω–µ–µ –±–∞–Ω–∫",
                "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞",
                "–õ—é–±–æ–π –∫—Ä–µ–¥–∏—Ç –º–æ–∂–Ω–æ –ø–æ–≥–∞—Å–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ –±–µ–∑ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π",
                "–ï—Å–ª–∏ –Ω–µ —Å–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –∫–∞—Ä—Ç—ã, –∫–æ–º–∏—Å—Å–∏–π –Ω–µ –±—É–¥–µ—Ç",
                "–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫ –∫–∞—Ä—Ç—ã –≤—Å–µ–≥–¥–∞ –ø–ª–∞—Ç–Ω—ã–π",
                "–í—Å–µ–≥–¥–∞ –≤—ã–≥–æ–¥–Ω–µ–µ –±—Ä–∞—Ç—å –∫—Ä–µ–¥–∏—Ç –≤ —Ç–æ–º –±–∞–Ω–∫–µ, –≥–¥–µ –ø–æ–ª—É—á–∞–µ—à—å –∑–∞—Ä–ø–ª–∞—Ç—É",
                "–ï—Å–ª–∏ –ø–ª–∞—Ç–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ, –¥–æ–ª–≥ –Ω–µ —Ä–∞—Å—Ç–µ—Ç",
                "–ò–ø–æ—Ç–µ–∫–∞ - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –Ω–µ–≤—ã–≥–æ–¥–Ω–æ, –ª—É—á—à–µ –∫–æ–ø–∏—Ç—å –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É",
                "–í—Å–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –æ—á–µ–Ω—å —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ",
                "–û–≤–µ—Ä–¥—Ä–∞—Ñ—Ç - —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É—Å–ª—É–≥–∞",
                "–ö–æ–º–∏—Å—Å–∏—è –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞",
                "–î–µ–±–µ—Ç–æ–≤–∞—è –∏ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ"
            ],
            "—Å—Ä–µ–¥–Ω–∏–π": [
                "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥",
                "–ö–µ—à–±—ç–∫ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –≤—ã–≥–æ–¥—ã",
                "–ß–µ–º –±–æ–ª—å—à–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç, —Ç–µ–º –ª—É—á—à–µ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è",
                "–†–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤—ã–≥–æ–¥–Ω–æ",
                "–í—Å–µ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é",
                "–ó–æ–ª–æ—Ç–æ - —Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è",
                "–ß–µ–º –≤—ã—à–µ –∫—ç—à–±—ç–∫, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ –∫–∞—Ä—Ç–∞",
                "–í—Å–µ–≥–¥–∞ –ª—É—á—à–µ –¥–æ—Å—Ä–æ—á–Ω–æ –ø–æ–≥–∞—à–∞—Ç—å –∫—Ä–µ–¥–∏—Ç",
                "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç (–ò–ò–°) –≤—ã–≥–æ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –±–æ–≥–∞—Ç—ã–º",
                "–ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑",
                "ETF —Ñ–æ–Ω–¥—ã –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ –ü–ò–§–æ–≤",
                "–î–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω—É–∂–Ω—ã –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã –¥–µ–Ω–µ–≥",
                "–ü—Ä–∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤—ã–≥–æ–¥–Ω–µ–µ –≤—Å–µ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –≤–∞–ª—é—Ç–µ"
            ]
        }

        # –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –±–∞–Ω–∫–∞–º–∏
        self.banking_problems = {
            "–æ–±—â–∏–µ": [
                "–î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏",
                "–°–ª–æ–∂–Ω—ã–π –∏ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                "–í—ã—Å–æ–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥—ã",
                "–ß–∞—Å—Ç—ã–µ —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∞",
                "–ù–∞–≤—è–∑—á–∏–≤—ã–µ –∑–≤–æ–Ω–∫–∏ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —É—Å–ª—É–≥",
                "–ü–ª–æ—Ö–∞—è —Ä–∞–±–æ—Ç–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
            ],
            "–∫–∞—Ä—Ç—ã": [
                "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –∫—ç—à–±—ç–∫–∞",
                "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—é –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ",
                "–û—Ç–∫–∞–∑ –≤ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π",
                "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –Ω–∞–ª–∏—á–Ω—ã—Ö"
            ],
            "–∫—Ä–µ–¥–∏—Ç—ã": [
                "–û—Ç–∫–∞–∑ –≤ –≤—ã–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–∞ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω",
                "–°–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞",
                "–ù–∞–≤—è–∑—ã–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ä–æ—á–Ω—ã–º –ø–æ–≥–∞—à–µ–Ω–∏–µ–º",
                "–û—à–∏–±–æ—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
                "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ø—Ä–∞–≤–∫–∏ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞"
            ],
            "–≤–∫–ª–∞–¥—ã": [
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –≤–∫–ª–∞–¥–∞",
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
                "–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ä–æ—á–Ω–æ–º —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤",
                "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ",
                "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏–µ–π –≤–∫–ª–∞–¥–∞"
            ],
            "–æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∏–Ω–≥": [
                "–°–ª–æ–∂–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞",
                "–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π",
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω—É–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                "–°–±–æ–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
            ]
        }

        # –ú–æ–¥–µ–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.financial_behavior_patterns = {
            "–∏–∑–±–µ–≥–∞—é—â–∏–π —Ä–∏—Å–∫–∞": [
                "–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–∞–¥–µ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –º–µ–Ω–µ–µ –¥–æ—Ö–æ–¥–Ω—ã",
                "–õ—É—á—à–µ –∏–º–µ—Ç—å –º–µ–Ω—å—à–∏–π, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥",
                "–Ø –∏–∑–±–µ–≥–∞—é –∫—Ä–µ–¥–∏—Ç–æ–≤, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –Ω–µ –∫—Ä–∞–π–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã",
                "–ü–µ—Ä–µ–¥ –ª—é–±—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º —è –¥–æ–ª–≥–æ –≤—Å–µ –∏–∑—É—á–∞—é",
                "–°—Ç–∞—Ä–∞—é—Å—å –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
                "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—é –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤"
            ],
            "–∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π": [
                "–Ø —á–∞—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞—é —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                "–ú–µ–Ω—è –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                "–Ø –º–æ–≥—É –≤–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç –Ω–∞ –∫—Ä—É–ø–Ω—É—é –ø–æ–∫—É–ø–∫—É –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥—É–º–∏–π",
                "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–µ –¥–ª—è –º–µ–Ω—è",
                "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ç—Ä–∞—Ç–∏—Ç—å, –∞ –Ω–µ –∫–æ–ø–∏—Ç—å",
                "–ß–∞—Å—Ç–æ –ø–æ–¥–¥–∞—é—Å—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —É–ª–æ–≤–∫–∏",
                "–ñ–∏–≤—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º, –Ω–µ –¥—É–º–∞—è –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–º"
            ],
            "–ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π": [
                "–Ø –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—é —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–Ω—ã—Ö –±–∞–Ω–∫–æ–≤",
                "–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞",
                "–Ø —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã",
                "–ü–µ—Ä–µ–¥ –∫—Ä—É–ø–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏ —è –æ–±–¥—É–º—ã–≤–∞—é –≤—Å–µ –∑–∞ –∏ –ø—Ä–æ—Ç–∏–≤",
                "–í–µ–¥—É —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤",
                "–ü–æ–ª—å–∑—É—é—Å—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏–Ω–æ—Å—è—Ç –ø–æ–ª—å–∑—É",
                "–°—Ç–∞—Ä–∞—é—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç—Ä–∞—Ç–∞–º–∏ –∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è–º–∏"
            ],
            "–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç": [
                "–°—Ç–∞—Ä–∞—é—Å—å —Ç—â–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞ —á—Ç–æ —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏",
                "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Å–ª—É–∂–∞—Ç –¥–æ–ª–≥–æ",
                "–°—á–∏—Ç–∞—é, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–ª—å–∑—É –∏ —Ä–∞–¥–æ—Å—Ç—å",
                "–ù–µ –≥–æ–Ω—é—Å—å –∑–∞ –º–æ–¥–æ–π –∏ –±—Ä–µ–Ω–¥–∞–º–∏",
                "–ò–∑–±–µ–≥–∞—é –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫",
                "–¢—Ä–∞—á—É –Ω–∞ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω–Ω–æ –¥–ª—è –º–µ–Ω—è"
            ],
            "—Å—Ç–∞—Ç—É—Å–Ω—ã–π": [
                "–î–ª—è –º–µ–Ω—è –≤–∞–∂–µ–Ω –ø—Ä–µ—Å—Ç–∏–∂ –±–∞–Ω–∫–∞ –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–µ –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã",
                "–ì–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ –∑–∞ —Å—Ç–∞—Ç—É—Å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã",
                "–í–∞–∂–Ω–æ –∏–º–µ—Ç—å –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
                "–û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±—Ä–µ–Ω–¥ –∏ –∏–º–∏–¥–∂ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
                "–ü–æ–ª—å–∑—É—é—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
            ]
        }

        # –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –ª—é–¥–µ–π
        self.financial_goals = {
            "–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ": [
                "–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–ø—É—Å–∫",
                "–∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω/–≥–∞–¥–∂–µ—Ç",
                "—Å–¥–µ–ª–∞—Ç—å —Ä–µ–º–æ–Ω—Ç",
                "—Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–ø–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç",
                "–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ",
                "–∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É"
            ],
            "—Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ": [
                "–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                "–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –ø–æ –∏–ø–æ—Ç–µ–∫–µ",
                "–æ–ø–ª–∞—Ç–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
                "–æ—Ç–∫—Ä—ã—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –±–∏–∑–Ω–µ—Å",
                "—Å–¥–µ–ª–∞—Ç—å –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ",
                "–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —Å–≤–∞–¥—å–±—É"
            ],
            "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ": [
                "–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –ø–µ–Ω—Å–∏—é",
                "–∫—É–ø–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –±–µ–∑ –∏–ø–æ—Ç–µ–∫–∏",
                "–æ–±–µ—Å–ø–µ—á–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç—è–º",
                "–¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
                "—Å–æ–∑–¥–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥",
                "–Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–µ–µ –ª–µ—á–µ–Ω–∏–µ"
            ]
        }

        # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        self.banking_products = {
            "–¥–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã": {
                "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤",
                "—Ñ—É–Ω–∫—Ü–∏–∏": ["–ø–ª–∞—Ç–µ–∂–∏", "–ø–µ—Ä–µ–≤–æ–¥—ã", "—Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö", "–∫—ç—à–±—ç–∫", "–±–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞"],
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": ["–º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø–ª–∞—Ç—É –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "—Ä–∞–∑–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∫—ç—à–±—ç–∫–∞ –∏ –±–æ–Ω—É—Å–æ–≤", "–ª–∏–º–∏—Ç—ã –Ω–∞ —Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö"]
            },
            "–∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã": {
                "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–î–ª—è –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥ —É –±–∞–Ω–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–æ–∫",
                "—Ñ—É–Ω–∫—Ü–∏–∏": ["–ª—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç", "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂", "–∫—ç—à–±—ç–∫", "–±–æ–Ω—É—Å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"],
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": ["–≤—ã—Å–æ–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –ª—å–≥–æ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞", "–∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö", "–ø–ª–∞—Ç–∞ –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"]
            },
            "–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–µ–¥–∏—Ç—ã": {
                "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–î–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π",
                "—Ñ—É–Ω–∫—Ü–∏–∏": ["—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞", "—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", "—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–æ–∫"],
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": ["—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞", "–º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∑–∞–ª–æ–≥ –∏–ª–∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª—å", "–≤ —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —à—Ç—Ä–∞—Ñ—ã"]
            },
            "–∏–ø–æ—Ç–µ–∫–∞": {
                "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                "—Ñ—É–Ω–∫—Ü–∏–∏": ["–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ (–¥–æ 30 –ª–µ—Ç)", "–∑–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", "–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å"],
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": ["—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞"]
            },
            "–≤–∫–ª–∞–¥—ã": {
                "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–î–ª—è —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –ø—Ä–∏—É–º–Ω–æ–∂–µ–Ω–∏—è –¥–µ–Ω–µ–≥",
                "—Ñ—É–Ω–∫—Ü–∏–∏": ["–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤", "—Å—Ä–æ—á–Ω—ã–µ –∏ –¥–æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"],
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": ["–∑–∞—â–∏—Ç–∞ –≤–∫–ª–∞–¥–æ–≤ –¥–æ 1,4 –º–ª–Ω —Ä—É–±–ª–µ–π", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–Ω—è—Ç–∏–µ", "—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã –∏ —Å—Ä–æ–∫–∞"]
            },
            "–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞": {
                "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–î–ª—è –≥–∏–±–∫–æ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è",
                "—Ñ—É–Ω–∫—Ü–∏–∏": ["—Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫", "–Ω–µ—Ç —Å—Ä–æ–∫–∞"],
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": ["—Å—Ç–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ –Ω–∏–∂–µ, —á–µ–º –ø–æ –≤–∫–ª–∞–¥–∞–º", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã —á–∞—Å—Ç–æ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—É–º–º—ã –Ω–∞ —Å—á–µ—Ç–µ", "–±–∞–Ω–∫ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è"]
            },
            "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": {
                "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–î–ª—è –ø—Ä–∏—É–º–Ω–æ–∂–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞",
                "—Ñ—É–Ω–∫—Ü–∏–∏": ["–∞–∫—Ü–∏–∏", "–æ–±–ª–∏–≥–∞—Ü–∏–∏", "–ü–ò–§—ã", "–ò–ò–°", "–±—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á–µ—Ç"],
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": ["–Ω–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏", "–µ—Å—Ç—å —Ä–∏—Å–∫–∏", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –≤—ã—á–µ—Ç–æ–≤", "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä"]
            }
        }

    def get_literacy_level_info(self, level: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

        Args:
            level: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —É—Ä–æ–≤–Ω–µ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        """
        if level in self.financial_literacy_levels:
            return self.financial_literacy_levels[level]
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω
            return self.financial_literacy_levels["—Å—Ä–µ–¥–Ω–∏–π"]

    def get_vocabulary_for_level(self, level: str, num_terms: int = 10) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

        Args:
            level: –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
            num_terms: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        """
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–∫–ª—é—á–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        all_terms = []

        levels_order = ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "—ç–∫—Å–ø–µ—Ä—Ç"]

        for l in levels_order:
            all_terms.extend(self.financial_vocabulary.get(l, []))
            if l == level:
                break

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É —Ç–µ—Ä–º–∏–Ω–æ–≤
        return random.sample(all_terms, min(num_terms, len(all_terms)))

    def get_misconceptions_for_level(self, level: str, num_items: int = 3) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

        Args:
            level: –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
            num_items: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π
        """
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–∫–ª—é—á–∞–µ–º –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        all_misconceptions = []

        levels_order = ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "—ç–∫—Å–ø–µ—Ä—Ç"]
        level_index = levels_order.index(level) if level in levels_order else 2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "—Å—Ä–µ–¥–Ω–∏–π" —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        for i in range(level_index + 1):
            current_level = levels_order[i]
            if current_level in self.financial_misconceptions:
                all_misconceptions.extend(self.financial_misconceptions[current_level])

        # –ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –º–µ–Ω—å—à–µ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–π
        max_misconceptions = max(1, 5 - level_index)

        return random.sample(all_misconceptions, min(num_items, max_misconceptions, len(all_misconceptions)))

    def get_behavior_patterns(self, behavior_type: str) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è

        Args:
            behavior_type: –¢–∏–ø –ø–æ–≤–µ–¥–µ–Ω–∏—è

        Returns:
            –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        """
        if behavior_type in self.financial_behavior_patterns:
            return self.financial_behavior_patterns[behavior_type]
        else:
            # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø
            random_type = random.choice(list(self.financial_behavior_patterns.keys()))
            return self.financial_behavior_patterns[random_type]

    def get_random_financial_goals(self, num_goals: int = 2) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π

        Args:
            num_goals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π
        """
        all_goals = []
        for goals in self.financial_goals.values():
            all_goals.extend(goals)

        return random.sample(all_goals, min(num_goals, len(all_goals)))

    def get_product_info(self, product_type: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ

        Args:
            product_type: –¢–∏–ø –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        """
        if product_type in self.banking_products:
            return self.banking_products[product_type]
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            return {k: v["–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"] for k, v in self.banking_products.items()}

    def get_common_problems(self, category: str = None) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –±–∞–Ω–∫–∞–º–∏

        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–±–ª–µ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –°–ø–∏—Å–æ–∫ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        """
        if category and category in self.banking_problems:
            return self.banking_problems[category]
        elif category is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
            all_problems = []
            for problems in self.banking_problems.values():
                all_problems.extend(problems)
            return all_problems
        else:
            return self.banking_problems["–æ–±—â–∏–µ"]

# –ù–û–í–´–ï –ö–õ–ê–°–°–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–°–¢–ò –†–ï–°–ü–û–ù–î–ï–ù–¢–û–í

class CognitiveBiases:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
        self.financial_biases = {
            "—ç—Ñ—Ñ–µ–∫—Ç_—è–∫–æ—Ä—è": {
                "description": "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è —á—Ä–µ–∑–º–µ—Ä–Ω–æ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—è–∫–æ—Ä—å)",
                "examples": [
                    "–ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —É–≤–∏–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∫—Ä–µ–¥–∏—Ç–∞ 10%, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è —Å –Ω–µ–π",
                    "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ —Å–∫–∏–¥–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≤—ã—à–µ–Ω–∞",
                    "–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –≤–æ–∫—Ä—É–≥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
                ],
                "trigger_words": ["–ø–µ—Ä–≤—ã–π", "–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ", "—Å–Ω–∞—á–∞–ª–∞", "–Ω–∞—á–∞–ª—å–Ω—ã–π", "–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π"]
            },
            "–∏–∑–±–µ–≥–∞–Ω–∏–µ_–ø–æ—Ç–µ—Ä—å": {
                "description": "–ü–æ—Ç–µ—Ä–∏ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ, —á–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏",
                "examples": [
                    "–û—Ç–∫–∞–∑ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∞–∫—Ü–∏–∏ –≤ –º–∏–Ω—É—Å, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —ç—Ç–æ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ",
                    "–°—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ—à–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –≤—ã–≥–æ–¥—É –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
                    "–ò–∑–±–µ–≥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –æ—Ç —Å—Ç—Ä–∞—Ö–∞ —Å–¥–µ–ª–∞—Ç—å –æ—à–∏–±–∫—É"
                ],
                "trigger_words": ["–ø–æ—Ç–µ—Ä—è", "—Ä–∏—Å–∫", "—Å—Ç—Ä–∞—Ö", "–æ–ø–∞—Å–Ω–æ", "–º–∏–Ω—É—Å", "—É–±—ã—Ç–æ–∫"]
            },
            "—ç—Ñ—Ñ–µ–∫—Ç_–Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã—Ö_–∑–∞—Ç—Ä–∞—Ç": {
                "description": "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑-–∑–∞ —É–∂–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
                "examples": [
                    "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–µ—Ä–∂–∞—Ç—å —É–±—ã—Ç–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ '—É–∂–µ —Å—Ç–æ–ª—å–∫–æ –≤–ª–æ–∂–∏–ª'",
                    "–û—Ç–∫–∞–∑ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –Ω–µ–Ω—É–∂–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑-–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞—Ç—Ä–∞—Ç",
                    "–£–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –≤–µ—â–µ–π –∏–∑-–∑–∞ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç–∏"
                ],
                "trigger_words": ["—É–∂–µ –≤–ª–æ–∂–∏–ª", "–∂–∞–ª–∫–æ –±—Ä–æ—Å–∞—Ç—å", "—Å—Ç–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ", "–Ω–µ –ø—Ä–æ–ø–∞–¥–∞—Ç—å –∂–µ"]
            },
            "—á—Ä–µ–∑–º–µ—Ä–Ω–∞—è_—Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": {
                "description": "–ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π",
                "examples": [
                    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ '–ø–µ—Ä–µ–∏–≥—Ä–∞—Ç—å —Ä—ã–Ω–æ–∫' –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π",
                    "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑-–∑–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö"
                ],
                "trigger_words": ["—è –ª—É—á—à–µ –∑–Ω–∞—é", "—Å–∞–º —Ä–∞–∑–±–µ—Ä—É—Å—å", "—ç—Ç–æ –æ—á–µ–≤–∏–¥–Ω–æ", "—è —É–≤–µ—Ä–µ–Ω"]
            },
            "—Å—Ç–∞–¥–Ω–æ–µ_–ø–æ–≤–µ–¥–µ–Ω–∏–µ": {
                "description": "–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏—è–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞",
                "examples": [
                    "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –±–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                    "–í—ã–±–æ—Ä –±–∞–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞–∫–æ–º—ã–µ",
                    "–ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ä—ã–Ω–∫–∞ –∏–∑-–∑–∞ –æ–±—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
                ],
                "trigger_words": ["–≤—Å–µ —Ç–∞–∫ –¥–µ–ª–∞—é—Ç", "–ø–æ–ø—É–ª—è—Ä–Ω–æ", "—Ç—Ä–µ–Ω–¥", "–º–æ–∏ –∑–Ω–∞–∫–æ–º—ã–µ"]
            },
            "–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π_—É—á–µ—Ç": {
                "description": "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏–∑–º–µ–Ω—è—é—â–µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ç—Ä–∞—Ç–∞–º",
                "examples": [
                    "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç—Ä–∞—Ç–∏—Ç—å '–ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ' –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–æ—Å–∫–æ—à—å, –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ–ª–≥–æ–≤",
                    "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –Ω–∞ '–º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å' –∏ '–Ω–µ–ª—å–∑—è —Ç—Ä–æ–≥–∞—Ç—å'",
                    "–†–∞–∑–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Å—É–º–º–∞–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
                ],
                "trigger_words": ["—ç—Ç–æ –¥—Ä—É–≥–∏–µ –¥–µ–Ω—å–≥–∏", "—ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞", "—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏", "–æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π"]
            },
            "—ç—Ñ—Ñ–µ–∫—Ç_—Ç–µ–∫—É—â–µ–≥–æ_–º–æ–º–µ–Ω—Ç–∞": {
                "description": "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –≤—ã–≥–æ–¥–æ–π",
                "examples": [
                    "–¢—Ä–∞—Ç–∞ –Ω–∞ —Å–∏—é–º–∏–Ω—É—Ç–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –Ω–∞ –≤–∞–∂–Ω—ã–µ —Ü–µ–ª–∏",
                    "–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –≤–º–µ—Å—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö",
                    "–û—Ç–∫–∞–∑ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–ª—å–∑—É —Ç—Ä–∞—Ç –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
                ],
                "trigger_words": ["—Ö–æ—á—É —Å–µ–π—á–∞—Å", "–∑–∞—á–µ–º –∂–¥–∞—Ç—å", "–∂–∏–≤–µ–º –æ–¥–∏–Ω —Ä–∞–∑", "–Ω–∞–¥–æ —Å–µ–±—è –±–∞–ª–æ–≤–∞—Ç—å"]
            }
        }

        # –£—Ä–æ–≤–Ω–∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∫ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–º –∏—Å–∫–∞–∂–µ–Ω–∏—è–º
        self.bias_levels = {
            "—Å–ª–∞–±—ã–π": 0.2,    # –†–µ–¥–∫–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, —Å–ª–∞–±–æ–µ –≤–ª–∏—è–Ω–∏–µ
            "—Å—Ä–µ–¥–Ω–∏–π": 0.5,   # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, —É–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
            "—Å–∏–ª—å–Ω—ã–π": 0.8    # –ß–∞—Å—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, —Å–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        }

    def get_random_biases(self, num_biases: int = 2, literacy_level: str = "—Å—Ä–µ–¥–Ω–∏–π") -> Dict[str, float]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            num_biases: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            literacy_level: –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–º–∏ –∏—Å–∫–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∏—Ö —Å–∏–ª–æ–π
        """
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–∫–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        if literacy_level == "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π":
            num_biases = min(4, num_biases + 2)
        elif literacy_level == "–Ω–∞—á–∏–Ω–∞—é—â–∏–π":
            num_biases = min(3, num_biases + 1)
        elif literacy_level == "—ç–∫—Å–ø–µ—Ä—Ç":
            num_biases = max(1, num_biases - 1)

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
        selected_biases = random.sample(list(self.financial_biases.keys()), k=min(num_biases, len(self.financial_biases)))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–∫–∞–∂–µ–Ω–∏—è
        bias_strengths = {}

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π —É—Ä–æ–≤–Ω–µ–π –∏—Å–∫–∞–∂–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        if literacy_level in ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"]:
            level_weights = {"—Å–ª–∞–±—ã–π": 0.2, "—Å—Ä–µ–¥–Ω–∏–π": 0.3, "—Å–∏–ª—å–Ω—ã–π": 0.5}
        elif literacy_level == "—Å—Ä–µ–¥–Ω–∏–π":
            level_weights = {"—Å–ª–∞–±—ã–π": 0.3, "—Å—Ä–µ–¥–Ω–∏–π": 0.5, "—Å–∏–ª—å–Ω—ã–π": 0.2}
        elif literacy_level in ["–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "—ç–∫—Å–ø–µ—Ä—Ç"]:
            level_weights = {"—Å–ª–∞–±—ã–π": 0.5, "—Å—Ä–µ–¥–Ω–∏–π": 0.4, "—Å–∏–ª—å–Ω—ã–π": 0.1}
        else:
            level_weights = {"—Å–ª–∞–±—ã–π": 0.33, "—Å—Ä–µ–¥–Ω–∏–π": 0.34, "—Å–∏–ª—å–Ω—ã–π": 0.33}

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–∏–ª—É –∫–∞–∂–¥–æ–º—É –∏—Å–∫–∞–∂–µ–Ω–∏—é
        for bias in selected_biases:
            bias_level = random.choices(
                list(level_weights.keys()),
                weights=list(level_weights.values())
            )[0]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            strength = self.bias_levels[bias_level] * random.uniform(0.8, 1.2)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.1, 1.0]
            strength = max(0.1, min(1.0, strength))

            bias_strengths[bias] = strength

        return bias_strengths

    def apply_bias_to_prompt(self, prompt: str, bias_name: str, bias_strength: float) -> str:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–º—É –∏—Å–∫–∞–∂–µ–Ω–∏—é –≤ –ø—Ä–æ–º–ø—Ç

        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            bias_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–∫–∞–∂–µ–Ω–∏—è
            bias_strength: –°–∏–ª–∞ –∏—Å–∫–∞–∂–µ–Ω–∏—è (0.0-1.0)

        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        if bias_name not in self.financial_biases:
            return prompt

        bias_info = self.financial_biases[bias_name]
        bias_level = "–∑–∞–º–µ—Ç–Ω–æ" if bias_strength > 0.65 else "—É–º–µ—Ä–µ–Ω–Ω–æ" if bias_strength > 0.35 else "—Å–ª–µ–≥–∫–∞"

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –∏—Å–∫–∞–∂–µ–Ω–∏—è
        example = random.choice(bias_info["examples"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –∏—Å–∫–∞–∂–µ–Ω–∏—è
        bias_instruction = f"""
–ö–û–ì–ù–ò–¢–ò–í–ù–û–ï –ò–°–ö–ê–ñ–ï–ù–ò–ï "{bias_name}":
- {bias_info["description"]}
- –ü—Ä–æ—è–≤–ª—è–µ—Ç—Å—è {bias_level} (—Å–∏–ª–∞: {bias_strength:.1f})
- –ü—Ä–∏–º–µ—Ä: {example}
- –≠—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç–µ —Ñ—Ä–∞–∑–∞–º–∏ —Ç–∏–ø–∞: "{', '.join(random.sample(bias_info["trigger_words"], k=min(3, len(bias_info["trigger_words"]))))}"
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –ø—Ä–æ–º–ø—Ç
        if "–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø:" in prompt:
            # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ
            prompt = prompt.replace("–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø:", f"–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø:\n{bias_instruction}")
        else:
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –ø–µ—Ä–µ–¥ "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê"
            if "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê" in prompt:
                prompt = prompt.replace("–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê", f"–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø:\n{bias_instruction}\n\n–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê")
            else:
                prompt += f"\n\n–ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ò–°–ö–ê–ñ–ï–ù–ò–Ø:\n{bias_instruction}"

        return prompt


class EmotionalFactors:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        self.financial_emotions = {
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è_—Ç—Ä–µ–≤–æ–≥–∞": {
                "description": "–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –∏ —Å—Ç—Ä–∞—Ö –ø–æ –ø–æ–≤–æ–¥—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è/–±—É–¥—É—â–µ–≥–æ",
                "examples": [
                    "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –¥–µ–Ω–µ–≥",
                    "–°—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞–±–æ—Ç—É –∏ –¥–æ—Ö–æ–¥",
                    "–ò–∑–±–µ–≥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞",
                    "–û—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –¥–µ–Ω–µ–≥ –≤—Å–µ–≥–¥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–∞–∂–µ –ø—Ä–∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏"
                ],
                "trigger_words": ["–±–µ—Å–ø–æ–∫–æ—é—Å—å", "—Å—Ç—Ä–∞—à–Ω–æ", "–≤–¥—Ä—É–≥", "–∞ –µ—Å–ª–∏", "—Ç—Ä–µ–≤–æ–∂–Ω–æ", "–±–æ—é—Å—å"],
                "common_topics": ["–¥–æ–ª–≥–∏", "–∫—Ä–µ–¥–∏—Ç—ã", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è", "–ø–µ–Ω—Å–∏—è"]
            },
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π_—Å—Ç—ã–¥": {
                "description": "–ß—É–≤—Å—Ç–≤–æ —Å—Ç—ã–¥–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑-–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º/—Ä–µ—à–µ–Ω–∏–π",
                "examples": [
                    "–ò–∑–±–µ–≥–∞–Ω–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤ –¥–∞–∂–µ —Å –±–ª–∏–∑–∫–∏–º–∏",
                    "–°–æ–∫—Ä—ã—Ç–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π",
                    "–û—â—É—â–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–µ–∑–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑-–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º",
                    "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–µ –≤ —Å–≤–æ—é –ø–æ–ª—å–∑—É"
                ],
                "trigger_words": ["—Å—Ç—ã–¥–Ω–æ –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è", "–Ω–µ—É–¥–æ–±–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å", "–Ω–µ —Ö–æ—á—É, —á—Ç–æ–±—ã –∑–Ω–∞–ª–∏", "—Å–∫—Ä—ã–≤–∞—é"],
                "common_topics": ["–¥–æ–ª–≥–∏", "–∫—Ä–µ–¥–∏—Ç—ã", "–Ω–∏–∑–∫–∏–π –¥–æ—Ö–æ–¥", "–Ω–µ—É–¥–∞—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
            },
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è_–≥–æ—Ä–¥–æ—Å—Ç—å": {
                "description": "–ì–æ—Ä–¥–æ—Å—Ç—å –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —É–º–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                "examples": [
                    "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã",
                    "–ì–æ—Ä–¥–æ—Å—Ç—å –∑–∞ –≤—ã–≥–æ–¥–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
                    "–£–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                    "–ñ–µ–ª–∞–Ω–∏–µ –¥–µ–ª–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω—ã–º –æ–ø—ã—Ç–æ–º"
                ],
                "trigger_words": ["–≥–æ—Ä–∂—É—Å—å", "–¥–æ–≤–æ–ª–µ–Ω", "—É–¥–∞–ª–æ—Å—å", "—Å–º–æ–≥ –¥–æ—Å—Ç–∏—á—å", "–ø—Ä–µ—É—Å–ø–µ–ª"],
                "common_topics": ["–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏"]
            },
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π_—Ñ–∞—Ç–∞–ª–∏–∑–º": {
                "description": "–í–µ—Ä–∞ –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—è",
                "examples": [
                    "–£–±–µ–∂–¥–µ–Ω–∏–µ, —á—Ç–æ –±–æ–≥–∞—Ç—Å—Ç–≤–æ - –¥–µ–ª–æ —É–¥–∞—á–∏ –∏–ª–∏ —Å—É–¥—å–±—ã",
                    "–û—â—É—â–µ–Ω–∏–µ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞",
                    "–û—Ç–∫–∞–∑ –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Ç—É–∞—Ü–∏–∏"
                ],
                "trigger_words": ["–æ—Ç –º–µ–Ω—è –Ω–µ –∑–∞–≤–∏—Å–∏—Ç", "–∫–∞–∫ –ø–æ–≤–µ–∑–µ—Ç", "—Å—É–¥—å–±–∞ —Ç–∞–∫–∞—è", "–≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å"],
                "common_topics": ["–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∫–∞—Ä—å–µ—Ä–∞", "–¥–æ—Ö–æ–¥—ã"]
            },
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è_–Ω–∞–¥–µ–∂–¥–∞": {
                "description": "–û–ø—Ç–∏–º–∏–∑–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±—É–¥—É—â–µ–≥–æ",
                "examples": [
                    "–í–µ—Ä–∞ –≤ —É–ª—É—á—à–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è",
                    "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                    "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º",
                    "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏"
                ],
                "trigger_words": ["–≤–µ—Ä—é", "–Ω–∞–¥–µ—é—Å—å", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è", "–≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è", "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã"],
                "common_topics": ["–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–∫–∞—Ä—å–µ—Ä–∞", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"]
            },
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è_–≤–∏–Ω–∞": {
                "description": "–ß—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é",
                "examples": [
                    "–°–∞–º–æ–æ–±–≤–∏–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                    "–ß—É–≤—Å—Ç–≤–æ –≤–∏–Ω—ã –∑–∞ —Ç—Ä–∞—Ç—ã –Ω–∞ —Å–µ–±—è",
                    "–í–∏–Ω–∞ –∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥—Ä—É–≥–∏—Ö",
                    "–û–±–≤–∏–Ω–µ–Ω–∏–µ —Å–µ–±—è –≤ –∂–∞–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                ],
                "trigger_words": ["–≤–∏–Ω–æ–≤–∞—Ç", "–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª", "–æ—à–∏–±—Å—è", "–ø–æ–¥–≤–µ–ª", "–∂–∞–ª–µ—é"],
                "common_topics": ["–¥–æ–ª–≥–∏", "—Ç—Ä–∞—Ç—ã", "–Ω–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–ª–∏–∑–∫–∏—Ö"]
            },
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ_–±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ": {
                "description": "–ê–ø–∞—Ç–∏—è –∏ –æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                "examples": [
                    "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞—Ç/–¥–æ—Ö–æ–¥–æ–≤",
                    "–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥—Ä—É–≥–∏–º",
                    "–ñ–∏–∑–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –¥–Ω–µ–º –±–µ–∑ –º—ã—Å–ª–µ–π –æ –±—É–¥—É—â–µ–º"
                ],
                "trigger_words": ["–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–∫–∞–∫-–Ω–∏–±—É–¥—å", "–≤—Å—ë —Ä–∞–≤–Ω–æ", "–Ω–µ –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—é—Å—å", "–Ω–µ –≤–∞–∂–Ω–æ"],
                "common_topics": ["–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–±—é–¥–∂–µ—Ç", "–ø–µ–Ω—Å–∏—è"]
            }
        }

        # –£—Ä–æ–≤–Ω–∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–∞–∫—Ç–æ—Ä–∞–º
        self.emotion_levels = {
            "—Å–ª–∞–±—ã–π": 0.2,    # –†–µ–¥–∫–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, —Å–ª–∞–±–æ–µ –≤–ª–∏—è–Ω–∏–µ
            "—Å—Ä–µ–¥–Ω–∏–π": 0.5,   # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, —É–º–µ—Ä–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
            "—Å–∏–ª—å–Ω—ã–π": 0.8    # –ß–∞—Å—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, —Å–∏–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        }

    def get_random_emotions(self, num_emotions: int = 2) -> Dict[str, float]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            num_emotions: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö —Å–∏–ª–æ–π
        """
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        selected_emotions = random.sample(list(self.financial_emotions.keys()), k=min(num_emotions, len(self.financial_emotions)))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
        emotion_strengths = {}

        for emotion in selected_emotions:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å —Ä–∞–≤–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            emotion_level = random.choice(list(self.emotion_levels.keys()))

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            strength = self.emotion_levels[emotion_level] * random.uniform(0.8, 1.2)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0.1, 1.0]
            strength = max(0.1, min(1.0, strength))

            emotion_strengths[emotion] = strength

        return emotion_strengths

    def apply_emotion_to_prompt(self, prompt: str, emotion_name: str, emotion_strength: float, topic: str = None) -> str:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–∫—Ç–æ—Ä—É –≤ –ø—Ä–æ–º–ø—Ç

        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            emotion_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
            emotion_strength: –°–∏–ª–∞ —Ñ–∞–∫—Ç–æ—Ä–∞ (0.0-1.0)
            topic: –¢–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞

        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        if emotion_name not in self.financial_emotions:
            return prompt

        emotion_info = self.financial_emotions[emotion_name]
        emotion_level = "—Å–∏–ª—å–Ω–æ" if emotion_strength > 0.65 else "—É–º–µ—Ä–µ–Ω–Ω–æ" if emotion_strength > 0.35 else "—Å–ª–µ–≥–∫–∞"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ç–µ–º–µ
        relevant_to_topic = True
        if topic and emotion_info["common_topics"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –ª–∏ —ç–º–æ—Ü–∏—è –∫ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞
            relevant_to_topic = any(t in topic.lower() for t in emotion_info["common_topics"])

            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º
            if not relevant_to_topic and random.random() < 0.3:
                relevant_to_topic = True

        # –ï—Å–ª–∏ —ç–º–æ—Ü–∏—è –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ —Ç–µ–º–µ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–º–∞, —É–º–µ–Ω—å—à–∞–µ–º —Å–∏–ª—É
        if not relevant_to_topic and topic:
            emotion_strength *= 0.5
            emotion_level = "—Å–ª–µ–≥–∫–∞"

        # –ï—Å–ª–∏ —Å–∏–ª–∞ —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if emotion_strength < 0.2:
            return prompt

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏
        example = random.choice(emotion_info["examples"])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
        emotion_instruction = f"""
–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –§–ê–ö–¢–û–† "{emotion_name}":
- {emotion_info["description"]}
- –ü—Ä–æ—è–≤–ª—è–µ—Ç—Å—è {emotion_level} (—Å–∏–ª–∞: {emotion_strength:.1f})
- –ü—Ä–∏–º–µ—Ä: {example}
- –≠—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç–µ —Ñ—Ä–∞–∑–∞–º–∏ —Ç–∏–ø–∞: "{', '.join(random.sample(emotion_info["trigger_words"], k=min(3, len(emotion_info["trigger_words"]))))}"
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –ø—Ä–æ–º–ø—Ç
        if "–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´:" in prompt:
            # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ
            prompt = prompt.replace("–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´:", f"–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´:\n{emotion_instruction}")
        else:
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –ø–µ—Ä–µ–¥ "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê"
            if "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê" in prompt:
                prompt = prompt.replace("–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê", f"–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´:\n{emotion_instruction}\n\n–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê")
            else:
                prompt += f"\n\n–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´:\n{emotion_instruction}"

        return prompt


class LinguisticVariation:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–π –≤ —Ä–µ—á–∏"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–π"""
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏
        self.regional_speech_patterns = {
            "–ú–æ—Å–∫–≤–∞": {
                "words": ["–º–∫–∞–¥", "–∫–æ–ª—å—Ü–µ–≤–∞—è", "–æ–±–ª–∞—Å—Ç—å", "–∑–∞–º–∫–∞–¥—å–µ", "—Å—Ç–æ–ª–∏—á–Ω—ã–π", "—Å–∞–¥–æ–≤–æ–µ", "–≤—ã—Ö–∏–Ω–æ"],
                "expressions": ["–Ω–∞ —Ä–∞–π–æ–Ω–µ", "–º–æ—Å–∫–æ–≤—Å–∫–∏–µ —Ü–µ–Ω—ã", "–∫–∞–∫ –≤ —Å—Ç–æ–ª–∏—Ü–µ"]
            },
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {
                "words": ["–ø–∞—Ä–∞–¥–Ω–∞—è", "–ø–æ—Ä–µ–±—Ä–∏–∫", "–∫—É—Ä–∞", "—à–∞–≤–µ—Ä–º–∞", "–∫—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞"],
                "expressions": ["–Ω–∞ –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥–∫–µ", "—É –Ω–∞—Å –≤ –ü–∏—Ç–µ—Ä–µ", "–Ω–∞ –í–∞—Å—å–∫–µ"]
            },
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": {
                "words": ["—Ç—É–ª—å—Å–∫–∏–π", "–≤–æ—Ä–æ–Ω–µ–∂—Å–∫–∏–π", "–æ–±–ª–∞—Å—Ç–Ω–æ–π —Ü–µ–Ω—Ç—Ä"],
                "expressions": ["–≤ —Ü–µ–Ω—Ç—Ä–µ –†–æ—Å—Å–∏–∏", "–Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –ú–æ—Å–∫–≤—ã"]
            },
            "–Æ–∂–Ω—ã–π": {
                "words": ["—Ö–∞—Ç–∞", "—Å—Ç–∞–Ω–∏—Ü–∞", "–∫—É–±–∞–Ω—Å–∫–∏–π", "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π"],
                "expressions": ["—É –Ω–∞—Å –Ω–∞ —é–≥–µ", "–ø–æ-–∫—É–±–∞–Ω—Å–∫–∏", "–∫–∞–∫ –Ω–∞ –î–æ–Ω—É"]
            },
            "–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π": {
                "words": ["–¥–∂–∏–≥–∏—Ç", "—Ç–µ–π–ø", "–∞—É–ª", "–ª–µ–∑–≥–∏–Ω–∫–∞"],
                "expressions": ["—É –Ω–∞—Å –≤ –≥–æ—Ä–∞—Ö", "–Ω–∞ –ö–∞–≤–∫–∞–∑–µ —Ç–∞–∫ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ"]
            },
            "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π": {
                "words": ["—Ç–∞—Ç–∞—Ä—Å—Ç–∞–Ω—Å–∫–∏–π", "–∫–∞–∑–∞–Ω—Å–∫–∏–π", "–ø—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π"],
                "expressions": ["—É –Ω–∞—Å –Ω–∞ –í–æ–ª–≥–µ", "–ø–æ-–≤–æ–ª–∂—Å–∫–∏", "–≤ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω–µ"]
            },
            "–£—Ä–∞–ª—å—Å–∫–∏–π": {
                "words": ["–∑–∞–≤–æ–¥—Å–∫–æ–π", "—Å—É—Ä–æ–≤—ã–π", "—É—Ä–∞–ª—å—Å–∫–∏–π", "–≥–æ—Ä–Ω–æ–∑–∞–≤–æ–¥—Å–∫–æ–π"],
                "expressions": ["—É –Ω–∞—Å –Ω–∞ –£—Ä–∞–ª–µ", "–∫–∞–∫ –Ω–∞ –£—Ä–∞–ª–µ –≥–æ–≤–æ—Ä—è—Ç", "–ø–æ-—É—Ä–∞–ª—å—Å–∫–∏"]
            },
            "–°–∏–±–∏—Ä—Å–∫–∏–π": {
                "words": ["—Ç–∞–π–≥–∞", "–º–æ—Ä–æ–∑", "—Å–∏–±–∏—Ä—Å–∫–∏–π", "—à–∏—à–∫–∞"],
                "expressions": ["—É –Ω–∞—Å –≤ –°–∏–±–∏—Ä–∏", "–ø–æ-—Å–∏–±–∏—Ä—Å–∫–∏", "–Ω–µ –º–æ—Ä–æ–∑, –∞ –¥—É–±–∞–∫"]
            },
            "–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π": {
                "words": ["–æ–∫–µ–∞–Ω", "–ø—Ä–∏–º–æ—Ä—Å–∫–∏–π", "—Å–æ–ø–∫–∞", "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–∏–π"],
                "expressions": ["—É –Ω–∞—Å –Ω–∞ –î–∞–ª—å–Ω–µ–º", "–≤–æ –í–ª–∞–¥–∏–∫–µ", "–¥–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π"]
            }
        }

        # –°–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
        self.filler_words_by_age = {
            "18-25": ["—Ç–∏–ø–∞", "–∫–æ—Ä–æ—á–µ", "–ø—Ä–∏–∫–∏–Ω—å", "—Ä–µ–∞–ª—å–Ω–æ", "–≤–æ–æ–±—â–µ", "–∫–∞–ø–µ—Ü", "–±–ª–∏–Ω", "–ø–æ—Ö–æ–¥—É", "–∏–º—Ö–æ"],
            "26-35": ["—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ", "–∫–∞–∫ –±—ã", "–≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ", "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏", "–±—É–∫–≤–∞–ª—å–Ω–æ", "–æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ", "—á–∏—Å—Ç–æ"],
            "36-50": ["—Ç–∞–∫ —Å–∫–∞–∑–∞—Ç—å", "–≤ –æ–±—â–µ–º-—Ç–æ", "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä—è", "–ø–æ —Å—É—Ç–∏", "–∑–Ω–∞—á–∏—Ç", "–≤–∏–¥–∏—Ç–µ –ª–∏", "—Å–∫–∞–∂–µ–º —Ç–∞–∫"],
            "51-65": ["–∑–Ω–∞–µ—Ç–µ –ª–∏", "–ø–æ–Ω–∏–º–∞–µ—Ç–µ", "–Ω–∞–¥–æ —Å–∫–∞–∑–∞—Ç—å", "–æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä—è", "–µ—Å–ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç–µ"],
            "66-80": ["—Å—Ç–∞–ª–æ –±—ã—Ç—å", "–≤–æ—Ç", "–∑–Ω–∞—á–∏—Ç—Å—è", "–≤–∏–¥–∏—Ç–µ –∫–∞–∫", "–Ω–µ –ø–æ–±–æ—é—Å—å —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞", "–∏—Å—Ç–∏–Ω–Ω–æ"]
        }

        # –ü–æ–∫–æ–ª–µ–Ω—á–µ—Å–∫–∏–π —Å–ª–µ–Ω–≥
        self.generational_slang = {
            "18-25": {
                "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π": ["–∫—Ä–∏–ø—Ç–∞", "–¥–æ–Ω–∞—Ç–∏—Ç—å", "—Å–∫–∞–º", "–∑–∞—Å—Ç–µ–π–∫–∞—Ç—å", "—Ö–æ–ª–¥–∏—Ç—å", "–∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å", "–±–∞–π–Ω—É—Ç—å", "–≥–æ –Ω–∞ –∞–∏—Ä–¥—Ä–æ–ø", "–∏–∑–∏", "—Ö–∞–π–ø–∞–Ω—É—Ç—å"],
                "–æ–±—â–∏–π": ["–∫—Ä–∞—à", "—á–∏–ª–∏—Ç—å", "–∫—Ä–∏–Ω–∂", "—Ä–æ—Ñ–ª", "–∑–∞—à–∫–≤–∞—Ä", "—á–µ–∫–∞—Ç—å", "–∞–≥—Ä–∏—Ç—å—Å—è", "—Ç–æ–∫—Å–∏–∫", "—Ö–µ–π—Ç–∏—Ç—å", "—Ñ–ª–µ–∫—Å–∏—Ç—å", "—Ä–∏–ª—Ç–æ–∫"]
            },
            "26-35": {
                "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π": ["–ø—Ä–æ—Ñ–∏—Ç", "–∫—ç—à–±–µ–∫", "–∏–Ω–≤–µ—Å—Ç–∏—Ç—å", "—Å—Ç–∞—Ä—Ç–∞–ø", "–≤–µ–Ω—á—É—Ä", "–∏–Ω—Ñ–ª—É–µ–Ω—Å–µ—Ä", "–º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "—Ö–∞–∫–∞—Ç–æ–Ω"],
                "–æ–±—â–∏–π": ["–ª–∞–π—Ñ—Ö–∞–∫", "—Ö–µ–π—Ç–µ—Ä", "—Ç–æ–ø—á–∏–∫", "—Ñ–æ—Ä—Å–∏—Ç—å", "–∑–∞—Ñ–µ–π–ª–∏—Ç—å", "–ª–æ–ª", "–∂–∏–∑–∞", "—Ö–∞–ø–Ω—É—Ç—å", "—Å—Ç–∞—Ä—Ç–∞–ø–µ—Ä"]
            },
            "36-50": {
                "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π": ["–æ—Ç–∫–∞—Ç", "–æ–±–Ω–∞–ª", "–±–µ–∑–Ω–∞–ª", "–∞—Ä–µ–Ω–¥–∞", "–∏–Ω–≤–µ—Å—Ç-–ø–æ—Ä—Ç—Ñ–µ–ª—å", "–ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥", "–Ω–µ–¥–≤–∏–∂–∫–∞"],
                "–æ–±—â–∏–π": ["–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "–∫–æ–º–ø", "—Å–µ—Ç–µ–≤–æ–π", "–∑—ã—Ä–∏–Ω–≥", "–∫–ª—ë–≤–æ", "—Ñ–∏—à–∫–∞", "–ø—Ä–∏–∫–æ–ª—å–Ω–æ", "–º–µ—Å—Å–µ–¥–∂"]
            },
            "51-65": {
                "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π": ["–≤–∫–ª–∞–¥", "—Å–±–µ—Ä–∫–Ω–∏–∂–∫–∞", "–ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ", "–≥–æ—Å–∑–∞–π–º", "–∫—Ä–µ–¥–∏—Ç–∫–∞", "–ø–æ–¥–æ—Ä–æ–∂–∞–Ω–∏–µ", "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è"],
                "–æ–±—â–∏–π": ["–º–æ–ª–æ–¥–µ–∂—å", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç—ã", "–∫–æ–º–ø—å—é—Ç–µ—Ä—â–∏–∫", "–Ω–∞—Ä–∫–æ–º–∞–Ω—ã", "–º–æ–±–∏–ª—å–Ω–∏–∫", "–∫–ª–∞–≤–∏—à–∏"]
            },
            "66-80": {
                "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π": ["—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è", "–∫–Ω–∏–∂–∫–∞", "–ø–µ–Ω—Å–∏—è", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "—Å—Å—É–¥–∞", "—Å–æ—Ç–∫–∞", "–ø—è—Ç–∞–∫", "–ø–æ–ª—É—á–∫–∞"],
                "–æ–±—â–∏–π": ["—Ç–µ–ª–µ–≤–∏–∑–µ—Ä", "–Ω–æ–Ω—á–µ", "–Ω–∞–º–µ–¥–Ω–∏", "–¥–∞–≤–µ—á–∞", "–º–∏–ª–æ–∫", "–∞–Ω—Ç–∏—Ä–µ—Å–Ω–æ", "–ø–æ–∫—É–¥–∞", "–¥–∞–≤–Ω–µ–Ω—å–∫–æ"]
            }
        }

        # –¢–∏–ø–∏—á–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –æ—à–∏–±–∫–∏
        self.common_errors = {
            "age": {  # –û—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
                "18-25": {  # –º–æ–ª–æ–¥–µ–∂—å: –±—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
                    "punctuation_omission": 0.7,  # —á–∞—Å—Ç–æ–µ –æ–ø—É—Å–∫–∞–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                    "abbreviations": 0.6,         # —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ–≤
                    "letter_repetition": 0.4,     # –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –±—É–∫–≤ –¥–ª—è —ç–º—Ñ–∞–∑—ã
                    "phoneticization": 0.5        # —Ñ–æ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ (—à–æ, —á–æ)
                },
                "26-35": {
                    "typos": 0.4,                # –æ–±—ã—á–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏
                    "punctuation_omission": 0.5,  # –∏–Ω–æ–≥–¥–∞ –æ–ø—É—Å–∫–∞–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                    "autocompletion_errors": 0.6  # –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
                },
                "36-50": {
                    "typos": 0.3,                # –º–µ–Ω—å—à–µ –æ–ø–µ—á–∞—Ç–æ–∫
                    "run_on_sentences": 0.4       # –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                },
                "51-65": {
                    "spacing_errors": 0.5,        # –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                    "caps_lock": 0.3,             # —Å–ª—É—á–∞–π–Ω—ã–π –ö–ê–ü–°
                    "punctuation_excess": 0.4     # –∏–∑–±—ã—Ç–æ–∫ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è!!!!
                },
                "66-80": {
                    "spacing_errors": 0.7,        # —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                    "caps_lock": 0.6,             # —á–∞—Å—Ç—ã–π –ö–ê–ü–°
                    "punctuation_excess": 0.7,    # –∏–∑–±—ã—Ç–æ–∫ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è!!!!!!!
                    "repetition": 0.5             # –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ—Ä–∞–∑
                }
            },
            "device": {  # –û—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
                "mobile": {  # –º–æ–±–∏–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    "typos": 0.6,                # –±–æ–ª—å—à–µ –æ–ø–µ—á–∞—Ç–æ–∫
                    "autocorrect_fails": 0.7,     # –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
                    "abbreviations": 0.5,         # —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ–≤
                    "brevity": 0.8                # –∫—Ä–∞—Ç–∫–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
                },
                "desktop": {  # –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                    "typos": 0.3,                # –º–µ–Ω—å—à–µ –æ–ø–µ—á–∞—Ç–æ–∫
                    "autocorrect_fails": 0.2,     # –º–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
                    "verbosity": 0.6              # –±–æ–ª–µ–µ –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                }
            },
            "education": {  # –û—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
                "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": {
                    "grammar_errors": 0.8,         # –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    "spelling_errors": 0.8,        # –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    "syntax_errors": 0.7,          # —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    "simple_vocabulary": 0.9       # –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å
                },
                "–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": {
                    "grammar_errors": 0.6,         # –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    "spelling_errors": 0.5,        # –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    "syntax_errors": 0.5           # —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                },
                "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ": {
                    "grammar_errors": 0.5,         # –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    "spelling_errors": 0.4,        # –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    "jargon": 0.6                 # –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂–∞—Ä–≥–æ–Ω
                },
                "–í—ã—Å—à–µ–µ": {  # –æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –≤—ã—Å—à–µ–≥–æ
                    "grammar_errors": 0.3,         # –º–µ–Ω—å—à–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                    "spelling_errors": 0.3,        # –º–µ–Ω—å—à–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                    "complex_sentences": 0.6       # —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                },
                "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å": {
                    "grammar_errors": 0.2,         # –º–∞–ª–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                    "spelling_errors": 0.2,        # –º–∞–ª–æ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                    "complex_vocabulary": 0.8,     # —Å–ª–æ–∂–Ω—ã–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å
                    "formality": 0.7               # —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
                }
            }
        }

        # –ü—Ä–∏–º–µ—Ä—ã –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        self.grammar_error_patterns = {
            "case_errors": [  # –æ—à–∏–±–∫–∏ –≤ –ø–∞–¥–µ–∂–∞—Ö
                (r'\b(–æ|–æ–±|–ø—Ä–∏|–≤|–Ω–∞|–∑–∞|–ø–æ–¥|–Ω–∞–¥|–ø–µ—Ä–µ–¥|—Å) ([–∞-—è–ê-–Ø]+)([^–∞-—è–ê-–Ø]|$)', r'\1 \2–µ\3'),  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂
                (r'\b(–∫|–ø–æ|–±–ª–∞–≥–æ–¥–∞—Ä—è) ([–∞-—è–ê-–Ø]+)([^–∞-—è–ê-–Ø]|$)', r'\1 \2—É\3')  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
            ],
            "verb_errors": [  # –æ—à–∏–±–∫–∏ –≤ –≥–ª–∞–≥–æ–ª–∞—Ö
                (r'\b(—è) ([–∞-—è–ê-–Ø]+)(–µ—à—å|–µ—Ç–µ|–∏—à—å|–∏—Ç–µ)([^–∞-—è–ê-–Ø]|$)', r'\1 \2—É\4'),  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ
                (r'\b(–æ–Ω–∏) ([–∞-—è–ê-–Ø]+)(—É|—é|–º)([^–∞-—è–ê-–Ø]|$)', r'\1 \2—É—Ç\4')  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ
            ],
            "gender_errors": [  # –æ—à–∏–±–∫–∏ –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ –ø–æ —Ä–æ–¥—É
                (r'\b(–æ–Ω) ([–∞-—è–ê-–Ø]+)(–ª–∞|–ª–∞—Å—å)([^–∞-—è–ê-–Ø]|$)', r'\1 \2–ª\4'),
                (r'\b(–æ–Ω–∞) ([–∞-—è–ê-–Ø]+)(–ª|–ª—Å—è)([^–∞-—è–ê-–Ø]|$)', r'\1 \2–ª–∞\4')
            ]
        }

        # –°–ª–æ–≤–∞—Ä—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (–¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
        self.spelling_error_patterns = {
            # –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            "—Ç—å—Å—è-—Ç—Å—è": [(r'—Ç—å—Å—è', '—Ç—Å—è'), (r'—Ç—Å—è', '—Ç—å—Å—è')],
            "–∂–∏-—à–∏": [(r'–∂—ã', '–∂–∏'), (r'—à—ã', '—à–∏')],
            "—á–∞-—â–∞": [(r'—á—è', '—á–∞'), (r'—â—è', '—â–∞')],
            "—á—É-—â—É": [(r'—á—é', '—á—É'), (r'—â—é', '—â—É')],
            "–±–µ–∑—É–¥–∞—Ä–Ω—ã–µ –≥–ª–∞—Å–Ω—ã–µ": [
                (r'–∏–∑–≤[–∏–µ]–Ω–∏', '–∏–∑–≤–∏–Ω–∏'), (r'–∫[–∞–æ]–º–ø–∞–Ω–∏—è', '–∫–æ–º–ø–∞–Ω–∏—è'), (r'–∏–Ω—Ç[–∏–µ]—Ä–µ—Å–Ω–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'),
                (r'–∏–Ω—Ç[–∏–µ]—Ä–µ—Å—É–µ—Ç', '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç'), (r'–≤—ã—Ç[–∏–µ]—Ä–ø–µ—Ç—å', '–≤—ã—Ç–µ—Ä–ø–µ—Ç—å')
            ],
            "–ø–∞—Ä–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ": [
                (r'—Å–∫–æ–ª—å[–∑—Å]–∫–∏–π', '—Å–∫–æ–ª—å–∑–∫–∏–π'), (r'–Ω–∏[–∑—Å]–∫–∏–π', '–Ω–∏–∑–∫–∏–π'),
                (r'–≤–ª–∞[—Å–∑]—Ç—å', '–≤–ª–∞—Å—Ç—å'), (r'–ª–æ[—à–∂]–∫–∞', '–ª–æ–∂–∫–∞')
            ],
            "–Ω–µ–ø—Ä–æ–∏–∑–Ω–æ—Å–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ": [
                (r'—á—É[–≤—Å]—Å—Ç–≤', '—á—É–≤—Å—Ç–≤'), (r'—Å–µ—Ä[–¥]—Ü–µ', '—Å–µ—Ä–¥—Ü–µ'),
                (r'—Å–æ[–ª]–Ω—Ü–µ', '—Å–æ–ª–Ω—Ü–µ'), (r'–ø—Ä–∞–∑[–¥]–Ω–∏–∫', '–ø—Ä–∞–∑–¥–Ω–∏–∫')
            ],
            "–¥–≤–æ–π–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ": [
                (r'—Ä–∞[—Å]{1,2}–∫–∞–∑', '—Ä–∞—Å—Å–∫–∞–∑'), (r'–∫–∞[—Å]{1,2}–∞', '–∫–∞—Å—Å–∞'),
                (r'–∫–æ[–ª]{1,2}–µ–∫—Ç–∏–≤', '–∫–æ–ª–ª–µ–∫—Ç–∏–≤'), (r'–∫–æ[–º]{1,2}–µ–Ω—Ç–∞—Ä–∏–π', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
            ]
        }

    def get_age_group(self, age: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
        if age <= 25:
            return "18-25"
        elif age <= 35:
            return "26-35"
        elif age <= 50:
            return "36-50"
        elif age <= 65:
            return "51-65"
        else:
            return "66-80"

    def generate_linguistic_profile(self, persona: Dict) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        """
        age = persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30)
        region = persona.get('–†–µ–≥–∏–æ–Ω', '–ú–æ—Å–∫–≤–∞')
        education = persona.get('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä)')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É
        age_group = self.get_age_group(age)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = {
            "age_group": age_group,
            "region": region,
            "education": education,

            # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏
            "regional_words": self.regional_speech_patterns.get(region, {}).get("words", []),
            "regional_expressions": self.regional_speech_patterns.get(region, {}).get("expressions", []),

            # –°–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            "filler_words": self.filler_words_by_age.get(age_group, self.filler_words_by_age["36-50"]),

            # –ü–æ–∫–æ–ª–µ–Ω—á–µ—Å–∫–∏–π —Å–ª–µ–Ω–≥
            "financial_slang": self.generational_slang.get(age_group, {}).get("—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π", []),
            "general_slang": self.generational_slang.get(age_group, {}).get("–æ–±—â–∏–π", []),

            # –ü—Ä–æ—Ñ–∏–ª—å –æ—à–∏–±–æ–∫
            "error_profile": {}
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ—à–∏–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏
        # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
        age_errors = self.common_errors["age"].get(age_group, self.common_errors["age"]["36-50"])

        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        # –£–ø—Ä–æ—â–∞–µ–º —Ç–∏–ø—ã –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–æ –±–∞–∑–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if "–í—ã—Å—à–µ–µ" in education or "–≤—ã—Å—à–µ–µ" in education:
            edu_type = "–í—ã—Å—à–µ–µ"
        elif "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å" in education:
            edu_type = "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å"
        elif "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ" in education:
            edu_type = "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ"
        elif "–°—Ä–µ–¥–Ω–µ–µ" in education:
            edu_type = "–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
        else:
            edu_type = "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"

        edu_errors = self.common_errors["education"].get(edu_type, self.common_errors["education"]["–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"])

        # –û—à–∏–±–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∑–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ)
        device_type = random.choice(["mobile", "desktop"])
        device_errors = self.common_errors["device"].get(device_type, self.common_errors["device"]["desktop"])

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –æ—à–∏–±–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö
        error_profile = {}
        error_profile.update(age_errors)
        error_profile.update(device_errors)
        # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª–µ–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ª–∏—è—é—Ç
        error_profile.update(edu_errors)

        profile["error_profile"] = error_profile
        profile["device_type"] = device_type

        # –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ (0-1) - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
        education_factor = {
            "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": 0.8,
            "–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": 0.6,
            "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ": 0.5,
            "–í—ã—Å—à–µ–µ": 0.3,
            "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å": 0.2
        }.get(edu_type, 0.5)

        # –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä - U-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è (–±–æ–ª—å—à–µ —É –º–æ–ª–æ–¥—ã—Ö –∏ –ø–æ–∂–∏–ª—ã—Ö)
        if age_group in ["18-25", "66-80"]:
            age_factor = 0.6
        elif age_group in ["26-35", "51-65"]:
            age_factor = 0.4
        else:
            age_factor = 0.3

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        total_error_level = (education_factor * 0.7 + age_factor * 0.3) * random.uniform(0.8, 1.2)
        profile["total_error_level"] = max(0.1, min(0.9, total_error_level))

        return profile

    def apply_linguistic_profile_to_prompt(self, prompt: str, linguistic_profile: Dict) -> str:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é –≤ –ø—Ä–æ–º–ø—Ç

        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            linguistic_profile: –°–ª–æ–≤–∞—Ä—å —Å –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º

        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        region = linguistic_profile.get("region", "–ú–æ—Å–∫–≤–∞")
        age_group = linguistic_profile.get("age_group", "36-50")
        regional_words = linguistic_profile.get("regional_words", [])
        regional_expressions = linguistic_profile.get("regional_expressions", [])
        filler_words = linguistic_profile.get("filler_words", [])
        financial_slang = linguistic_profile.get("financial_slang", [])
        general_slang = linguistic_profile.get("general_slang", [])
        error_profile = linguistic_profile.get("error_profile", {})
        total_error_level = linguistic_profile.get("total_error_level", 0.3)
        device_type = linguistic_profile.get("device_type", "desktop")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞–ª–∏–∑–º–æ–≤
        regionalism_instruction = ""
        if regional_words or regional_expressions:
            regionalism_instruction = f"""
–†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò –†–ï–ß–ò (–†–µ–≥–∏–æ–Ω: {region}):
- –ú–æ–∂–µ—à—å –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(random.sample(regional_words, k=min(3, len(regional_words))))}
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: {', '.join(random.sample(regional_expressions, k=min(2, len(regional_expressions))))}
"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–ª–æ–≤–∞–º-–ø–∞—Ä–∞–∑–∏—Ç–∞–º
        fillers_instruction = ""
        if filler_words:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            filler_frequency = "—á–∞—Å—Ç–æ" if total_error_level > 0.6 else "–∏–Ω–æ–≥–¥–∞" if total_error_level > 0.3 else "—Ä–µ–¥–∫–æ"
            fillers_instruction = f"""
–°–õ–û–í–ê-–ü–ê–†–ê–ó–ò–¢–´ (–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {age_group}):
- {filler_frequency} –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã: {', '.join(random.sample(filler_words, k=min(4, len(filler_words))))}
"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–ª–µ–Ω–≥—É
        slang_instruction = ""
        if financial_slang or general_slang:
            slang_frequency = "—á–∞—Å—Ç–æ" if age_group in ["18-25", "26-35"] else "–∏–Ω–æ–≥–¥–∞" if age_group == "36-50" else "—Ä–µ–¥–∫–æ"
            slang_samples = []
            if financial_slang:
                slang_samples.append(f"—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–ª–µ–Ω–≥: {', '.join(random.sample(financial_slang, k=min(3, len(financial_slang))))}")
            if general_slang:
                slang_samples.append(f"–æ–±—â–∏–π —Å–ª–µ–Ω–≥: {', '.join(random.sample(general_slang, k=min(3, len(general_slang))))}")

            slang_instruction = f"""
–ü–û–ö–û–õ–ï–ù–ß–ï–°–ö–ò–ô –°–õ–ï–ù–ì (–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞: {age_group}):
- {slang_frequency} –∏—Å–ø–æ–ª—å–∑—É–π {" –∏ ".join(slang_samples)}
"""

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—à–∏–±–∫–∞–º –∏ –æ–ø–µ—á–∞—Ç–∫–∞–º
        errors_instruction = ""
        if error_profile:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            if total_error_level > 0.7:
                error_description = "–º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏ –æ–ø–µ—á–∞—Ç–æ–∫"
            elif total_error_level > 0.4:
                error_description = "—É–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –∏ –æ–ø–µ—á–∞—Ç–æ–∫"
            else:
                error_description = "—Ä–µ–¥–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ–ø–µ—á–∞—Ç–∫–∏"

            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            error_types = []
            for error_type, probability in error_profile.items():
                if probability > 0.5:
                    if error_type == "punctuation_omission":
                        error_types.append("–ø—Ä–æ–ø—É—Å–∫ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è")
                    elif error_type == "abbreviations":
                        error_types.append("—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ–≤")
                    elif error_type == "letter_repetition":
                        error_types.append("–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –±—É–∫–≤ –¥–ª—è —ç–º—Ñ–∞–∑—ã")
                    elif error_type == "typos":
                        error_types.append("–æ–ø–µ—á–∞—Ç–∫–∏")
                    elif error_type == "caps_lock":
                        error_types.append("–∫–∞–ø—Å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–æ–≤–∞—Ö")
                    elif error_type == "punctuation_excess":
                        error_types.append("–∏–∑–±—ã—Ç–æ–∫ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è")
                    elif error_type == "grammar_errors":
                        error_types.append("–≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
                    elif error_type == "spelling_errors":
                        error_types.append("–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫, –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –∏—Ö
            error_specifics = f"–û—Å–æ–±–µ–Ω–Ω–æ: {', '.join(error_types)}" if error_types else ""

            # –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            length_advice = "–ü–∏—à–∏ –∫–æ—Ä–æ—á–µ (–∫–∞–∫ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞)" if device_type == "mobile" else "–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–∫–∞–∫ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞)"

            errors_instruction = f"""
–û–°–û–ë–ï–ù–ù–û–°–¢–ò –ü–ò–°–¨–ú–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π {error_description}. {error_specifics}
- {length_advice}
- –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: {total_error_level:.1f} (–≥–¥–µ 0 - –±–µ–∑ –æ—à–∏–±–æ–∫, 1 - –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫)
"""

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        linguistic_instructions = ""
        if regionalism_instruction or fillers_instruction or slang_instruction or errors_instruction:
            linguistic_instructions = f"""
–õ–ò–ù–ì–í–ò–°–¢–ò–ß–ï–°–ö–ò–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
{regionalism_instruction}
{fillers_instruction}
{slang_instruction}
{errors_instruction}
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –ø—Ä–æ–º–ø—Ç
        if "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê" in prompt:
            prompt = prompt.replace("–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê", f"{linguistic_instructions}\n–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê")
        else:
            prompt += f"\n{linguistic_instructions}"

        return prompt


class LifeContextFactors:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏–π, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –ñ–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã
        self.life_events = {
            "—Å–≤–∞–¥—å–±–∞": {
                "description": "–ù–µ–¥–∞–≤–Ω—è—è —Å–≤–∞–¥—å–±–∞ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–µ–π",
                "financial_impact": "–ö—Ä—É–ø–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –≤–æ–∑–º–æ–∂–Ω–æ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤",
                "relevant_topics": ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∫—Ä–µ–¥–∏—Ç—ã", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"],
                "age_relevance": {"min": 18, "max": 65, "peak": [25, 35]},
                "family_status_relevance": ["–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º", "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫"]
            },
            "—Ä–æ–∂–¥–µ–Ω–∏–µ_—Ä–µ–±–µ–Ω–∫–∞": {
                "description": "–ù–µ–¥–∞–≤–Ω–µ–µ —Ä–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–æ–∂–¥–µ–Ω–∏—è",
                "financial_impact": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤, –¥–µ–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–ø—É—Å–∫, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞, –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "relevant_topics": ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–¥–µ—Ç—Å–∫–∏–µ –≤–∫–ª–∞–¥—ã", "–∏–ø–æ—Ç–µ–∫–∞", "–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–π –∫–∞–ø–∏—Ç–∞–ª"],
                "age_relevance": {"min": 20, "max": 45, "peak": [25, 35]},
                "family_status_relevance": ["–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫"]
            },
            "–ø–æ—Ç–µ—Ä—è_—Ä–∞–±–æ—Ç—ã": {
                "description": "–ù–µ–¥–∞–≤–Ω—è—è –ø–æ—Ç–µ—Ä—è —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —Ä–∏—Å–∫ –µ–µ –ø–æ—Ç–µ—Ä–∏",
                "financial_impact": "–°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π, –ø–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ–µ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤",
                "relevant_topics": ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∫—Ä–µ–¥–∏—Ç—ã", "—Ä–µ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã"],
                "age_relevance": {"min": 18, "max": 65, "peak": [30, 50]},
                "family_status_relevance": None  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö
            },
            "–ø–µ—Ä–µ–µ–∑–¥": {
                "description": "–ù–µ–¥–∞–≤–Ω–∏–π –ø–µ—Ä–µ–µ–∑–¥ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–µ–∑–¥–∞ –≤ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω—É",
                "financial_impact": "–ö—Ä—É–ø–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏, —Å–º–µ–Ω–∞ –±–∞–Ω–∫–æ–≤, –≤–æ–ø—Ä–æ—Å—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –¥–µ–Ω–µ–≥",
                "relevant_topics": ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∏–ø–æ—Ç–µ–∫–∞", "–ø–µ—Ä–µ–≤–æ–¥—ã", "–≤–∞–ª—é—Ç–∞"],
                "age_relevance": {"min": 18, "max": 45, "peak": [22, 35]},
                "family_status_relevance": None  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö
            },
            "–ø–æ–ª—É—á–µ–Ω–∏–µ_–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–∞": {
                "description": "–ù–µ–¥–∞–≤–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è",
                "financial_impact": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞, –≤–æ–ø—Ä–æ—Å—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                "relevant_topics": ["–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–Ω–∞–ª–æ–≥–∏", "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", "–≤–∫–ª–∞–¥—ã"],
                "age_relevance": {"min": 30, "max": 80, "peak": [40, 60]},
                "family_status_relevance": None  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö
            },
            "—Ä–∞–∑–≤–æ–¥": {
                "description": "–ù–µ–¥–∞–≤–Ω–∏–π —Ä–∞–∑–≤–æ–¥ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–æ–¥–∞",
                "financial_impact": "–†–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤, –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç, –∞–ª–∏–º–µ–Ω—Ç—ã",
                "relevant_topics": ["—Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞", "–∞–ª–∏–º–µ–Ω—Ç—ã", "–∫—Ä–µ–¥–∏—Ç—ã", "–∏–ø–æ—Ç–µ–∫–∞"],
                "age_relevance": {"min": 25, "max": 60, "peak": [30, 45]},
                "family_status_relevance": ["–†–∞–∑–≤–µ–¥–µ–Ω/–†–∞–∑–≤–µ–¥–µ–Ω–∞"]
            },
            "–ø–æ–∫—É–ø–∫–∞_–∂–∏–ª—å—è": {
                "description": "–ù–µ–¥–∞–≤–Ω—è—è –ø–æ–∫—É–ø–∫–∞ –∂–∏–ª—å—è –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
                "financial_impact": "–ö—Ä—É–ø–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, –∏–ø–æ—Ç–µ–∫–∞, –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∂–∏–ª—å—è, –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏",
                "relevant_topics": ["–∏–ø–æ—Ç–µ–∫–∞", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–Ω–∞–ª–æ–≥–∏", "–∫—Ä–µ–¥–∏—Ç—ã", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"],
                "age_relevance": {"min": 25, "max": 60, "peak": [30, 45]},
                "family_status_relevance": None  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö
            },
            "—Å—Ç–∞—Ä—Ç_–±–∏–∑–Ω–µ—Å–∞": {
                "description": "–ù–µ–¥–∞–≤–Ω–∏–π —Å—Ç–∞—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–µ–º—É",
                "financial_impact": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –±–∏–∑–Ω–µ—Å, –±–∏–∑–Ω–µ—Å-–∫—Ä–µ–¥–∏—Ç—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤",
                "relevant_topics": ["–±–∏–∑–Ω–µ—Å-–∫—Ä–µ–¥–∏—Ç—ã", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–Ω–∞–ª–æ–≥–∏", "—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç"],
                "age_relevance": {"min": 25, "max": 55, "peak": [30, 45]},
                "family_status_relevance": None  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö
            },
            "–±–æ–ª–µ–∑–Ω—å": {
                "description": "–°–µ—Ä—å–µ–∑–Ω–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ —É —Å–µ–±—è –∏–ª–∏ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏",
                "financial_impact": "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–µ—á–µ–Ω–∏–µ, –ø–æ—Ç–µ—Ä—è —Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è",
                "relevant_topics": ["–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∫—Ä–µ–¥–∏—Ç—ã", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã"],
                "age_relevance": {"min": 30, "max": 80, "peak": [50, 70]},
                "family_status_relevance": None  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö
            },
            "–≤—ã—Ö–æ–¥_–Ω–∞_–ø–µ–Ω—Å–∏—é": {
                "description": "–ù–µ–¥–∞–≤–Ω–∏–π –≤—ã—Ö–æ–¥ –Ω–∞ –ø–µ–Ω—Å–∏—é –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–µ–º—É",
                "financial_impact": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ—Ö–æ–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π, –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º",
                "relevant_topics": ["–ø–µ–Ω—Å–∏—è", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã"],
                "age_relevance": {"min": 50, "max": 80, "peak": [55, 65]},
                "family_status_relevance": None  # —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö
            }
        }

        # –°–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å—ã
        self.seasonal_factors = {
            "–Ω–æ–≤—ã–π_–≥–æ–¥": {
                "description": "–ü–µ—Ä–∏–æ–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–º–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏",
                "months": [11, 12],  # –Ω–æ—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å
                "financial_impact": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç—Ä–∞—Ç –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏, –ø—Ä–µ–º–∏–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥",
                "relevant_topics": ["–∫—Ä–µ–¥–∏—Ç—ã", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∞–∫—Ü–∏–∏", "–±–æ–Ω—É—Å—ã", "—Å–∫–∏–¥–∫–∏"]
            },
            "–ª–µ—Ç–æ_–æ—Ç–ø—É—Å–∫": {
                "description": "–õ–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–æ–≤",
                "months": [5, 6, 7, 8],  # –º–∞–π-–∞–≤–≥—É—Å—Ç
                "financial_impact": "–¢—Ä–∞—Ç—ã –Ω–∞ –æ—Ç–ø—É—Å–∫, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –¥–µ—Ç—Å–∫–∏–π –æ—Ç–¥—ã—Ö, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ –≤ –∫–æ–Ω—Ü–µ —Å–µ–∑–æ–Ω–∞",
                "relevant_topics": ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∫–∞—Ä—Ç—ã", "–≤–∞–ª—é—Ç–∞", "–º–æ–±–∏–ª—å–Ω—ã–π –±–∞–Ω–∫", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"]
            },
            "—á–µ—Ä–Ω–∞—è_–ø—è—Ç–Ω–∏—Ü–∞": {
                "description": "–ü–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂ '–ß–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞'",
                "months": [11],  # –Ω–æ—è–±—Ä—å
                "financial_impact": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫, –æ—Ö–æ—Ç–∞ –∑–∞ —Å–∫–∏–¥–∫–∞–º–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –¥–µ—à–µ–≤–ª–µ",
                "relevant_topics": ["–∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–∫—ç—à–±—ç–∫", "–∞–∫—Ü–∏–∏", "–±–æ–Ω—É—Å—ã"]
            },
            "–Ω–∞—á–∞–ª–æ_—É—á–µ–±–Ω–æ–≥–æ_–≥–æ–¥–∞": {
                "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É—á–µ–±–Ω–æ–º—É –≥–æ–¥—É",
                "months": [7, 8],  # –∏—é–ª—å-–∞–≤–≥—É—Å—Ç
                "financial_impact": "–¢—Ä–∞—Ç—ã –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–µ—Ç–µ–π –∫ —à–∫–æ–ª–µ/–≤—É–∑—É, –æ–ø–ª–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è, –ø–æ–∫—É–ø–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–µ–π",
                "relevant_topics": ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∫—Ä–µ–¥–∏—Ç—ã", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã"]
            },
            "–æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π_—Å–µ–∑–æ–Ω": {
                "description": "–ù–∞—á–∞–ª–æ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–µ–∑–æ–Ω–∞",
                "months": [9, 10],  # —Å–µ–Ω—Ç—è–±—Ä—å-–æ–∫—Ç—è–±—Ä—å
                "financial_impact": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π, –≤–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å",
                "relevant_topics": ["–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", "—Å—É–±—Å–∏–¥–∏–∏", "–∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏"]
            },
            "–¥–∞—á–Ω—ã–π_—Å–µ–∑–æ–Ω": {
                "description": "–î–∞—á–Ω—ã–π/—Å–∞–¥–æ–≤—ã–π —Å–µ–∑–æ–Ω",
                "months": [4, 5, 6, 7, 8, 9],  # –∞–ø—Ä–µ–ª—å-—Å–µ–Ω—Ç—è–±—Ä—å
                "financial_impact": "–¢—Ä–∞—Ç—ã –Ω–∞ –¥–∞—á—É/—Å–∞–¥, —Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –∑–∞–≥–æ—Ç–æ–≤–∫–∏",
                "relevant_topics": ["–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ/—Ä–µ–º–æ–Ω—Ç", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞"]
            },
            "–Ω–∞–ª–æ–≥–æ–≤—ã–π_–ø–µ—Ä–∏–æ–¥": {
                "description": "–ü–µ—Ä–∏–æ–¥ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤",
                "months": [10, 11],  # –æ–∫—Ç—è–±—Ä—å-–Ω–æ—è–±—Ä—å
                "financial_impact": "–£–ø–ª–∞—Ç–∞ –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤, –ø–æ–¥–∞—á–∞ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π, –Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã",
                "relevant_topics": ["–Ω–∞–ª–æ–≥–∏", "–Ω–∞–ª–æ–≥–æ–≤—ã–µ –≤—ã—á–µ—Ç—ã", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
            }
        }

        # –¢–µ–∫—É—â–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.current_economic_situation = {
            "–∏–Ω—Ñ–ª—è—Ü–∏—è": {
                "level": "–≤—ã—Å–æ–∫–∞—è",  # –≤—ã—Å–æ–∫–∞—è/—É–º–µ—Ä–µ–Ω–Ω–∞—è/–Ω–∏–∑–∫–∞—è
                "description": "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
                "financial_impact": "–ü–æ–∏—Å–∫ —Å–ø–æ—Å–æ–±–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∏–Ω—Ñ–ª—è—Ü–∏–∏"
            },
            "–∫–ª—é—á–µ–≤–∞—è_—Å—Ç–∞–≤–∫–∞": {
                "level": "–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è",  # –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è/—Å–Ω–∏–∂–µ–Ω–Ω–∞—è/—Å—Ç–∞–±–∏–ª—å–Ω–∞—è
                "description": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É",
                "financial_impact": "–í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏ –ø–æ –≤–∫–ª–∞–¥–∞–º –∏ –∫—Ä–µ–¥–∏—Ç–∞–º, –≤—ã–≥–æ–¥–Ω–æ—Å—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π, –¥–æ—Ä–æ–≥–∏–µ –∫—Ä–µ–¥–∏—Ç—ã"
            },
            "–∫—É—Ä—Å_–≤–∞–ª—é—Ç": {
                "level": "–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π",  # —Ä–∞—Å—Ç—É—â–∏–π/–ø–∞–¥–∞—é—â–∏–π/—Å—Ç–∞–±–∏–ª—å–Ω—ã–π/–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π
                "description": "–ö—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ–¥–≤–µ—Ä–∂–µ–Ω —á–∞—Å—Ç—ã–º –∫–æ–ª–µ–±–∞–Ω–∏—è–º",
                "financial_impact": "–†–∏—Å–∫–∏ –ø—Ä–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, –≤–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö"
            },
            "–∫—Ä–µ–¥–∏—Ç–Ω–∞—è_–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å": {
                "level": "—É–º–µ—Ä–µ–Ω–Ω–∞—è",  # –≤—ã—Å–æ–∫–∞—è/—É–º–µ—Ä–µ–Ω–Ω–∞—è/–Ω–∏–∑–∫–∞—è
                "description": "–ë–∞–Ω–∫–∏ —É–º–µ—Ä–µ–Ω–Ω–æ —Å—Ç—Ä–æ–≥–∏ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫—Ä–µ–¥–∏—Ç–æ–≤, —Ç—Ä–µ–±—É—é—Ç —Ö–æ—Ä–æ—à—É—é –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é",
                "financial_impact": "–ë–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–µ–º—â–∏–∫–æ–≤, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Ö–æ—Ä–æ—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"
            }
        }

        # –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∫ –¥–µ–Ω—å–≥–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫–æ–ª–µ–Ω–∏—è—Ö
        self.generational_money_attitudes = {
            "18-25": {  # –ü–æ–∫–æ–ª–µ–Ω–∏–µ Z
                "key_values": ["–¶–∏—Ñ—Ä–æ–≤–∞—è –Ω–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–º", "–°—Ç–∞—Ä—Ç–∞–ø—ã", "–§—Ä–∏–ª–∞–Ω—Å"],
                "money_attitudes": [
                    "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                    "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –Ω–æ–≤—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º",
                    "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–Ω–Ω–∏—Ö –ª–µ—Ç",
                    "–°–∫–µ–ø—Ç–∏—Ü–∏–∑–º –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥—ã –∏ –æ–ø—ã—Ç–∞ –Ω–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏",
                    "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ/—ç—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
                    "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Ä–∞–Ω–Ω–∏–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –¥–∞–∂–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏"
                ]
            },
            "26-35": {  # –ú–∏–ª–ª–µ–Ω–∏–∞–ª—ã
                "key_values": ["–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –∂–∏–∑–Ω–∏", "–û–ø—ã—Ç vs –í–µ—â–∏", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–ê—Ä–µ–Ω–¥–∞ vs –ü–æ–∫—É–ø–∫–∞"],
                "money_attitudes": [
                    "–í—ã—Å–æ–∫–∞—è –∑–∞–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã",
                    "–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ (–∂–∏–ª—å–µ, –∞–≤—Ç–æ–º–æ–±–∏–ª—å) –Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–π —Å—Ä–æ–∫",
                    "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç —Å –±–æ–Ω—É—Å–∞–º–∏/–∫–µ—à–±—ç–∫–æ–º",
                    "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è",
                    "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞",
                    "–ò–Ω—Ç–µ—Ä–µ—Å –∫ —Ü–∏—Ñ—Ä–æ–≤—ã–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –∏ —Ñ–∏–Ω—Ç–µ—Ö-—Å–µ—Ä–≤–∏—Å–∞–º",
                    "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–µ–Ω–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∫–∞—Ä—å–µ—Ä–µ"
                ]
            },
            "36-50": {  # –ü–æ–∫–æ–ª–µ–Ω–∏–µ X
                "key_values": ["–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–ö–∞—Ä—å–µ—Ä–∞", "–°–µ–º—å—è", "–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"],
                "money_attitudes": [
                    "–°–µ—Ä—å–µ–∑–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
                    "–ë–æ–ª–µ–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º (–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –±–∞–Ω–∫–∏)",
                    "–°–æ—á–µ—Ç–∞–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                    "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–µ–π –∏ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è—Ö",
                    "–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —É–º–µ—Ä–µ–Ω–Ω–æ–º—É —Ä–∏—Å–∫—É –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö",
                    "–ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤, –Ω–æ –∏ –±–æ–ª—å—à–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
                    "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
                ]
            },
            "51-65": {  # –ë—É–º–µ—Ä—ã
                "key_values": ["–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞", "–ú–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ", "–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞"],
                "money_attitudes": [
                    "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º –∏ –¥–æ–ª–≥–∞–º",
                    "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ (–±–∞–Ω–∫–∏, –±—Ä–æ–∫–µ—Ä—ã)",
                    "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                    "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–µ–Ω—Å–∏—é –∫–∞–∫ –≤–∞–∂–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                    "–¶–µ–Ω–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏)",
                    "–ú–µ–Ω—å—à–∏–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º",
                    "–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ '–Ω–∞ —á–µ—Ä–Ω—ã–π –¥–µ–Ω—å'"
                ]
            },
            "66-80": {  # –°—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
                "key_values": ["–≠–∫–æ–Ω–æ–º–Ω–æ—Å—Ç—å", "–¢—Ä–∞–¥–∏—Ü–∏–∏", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                "money_attitudes": [
                    "–í—ã—Å–æ–∫–æ–µ –Ω–µ–¥–æ–≤–µ—Ä–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º –∏–∑-–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞",
                    "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è '–ø–æ–¥ –º–∞—Ç—Ä–∞—Å–æ–º' –∏–ª–∏ –≤ –≤–∏–¥–µ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π",
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –∂–∏–∑–Ω—å –ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º",
                    "–°–∫–µ–ø—Ç–∏—Ü–∏–∑–º –∫ –Ω–æ–≤—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞–¥ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é",
                    "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞—Ç—å –¥–µ—Ç—è–º –∏ –≤–Ω—É–∫–∞–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ",
                    "–†–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ –∫–∞–∫ —É—Å—Ç–æ—è–≤—à–∞—è—Å—è –ø—Ä–∏–≤—ã—á–∫–∞"
                ]
            }
        }

        # –°–µ–º–µ–π–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏
        self.family_financial_traditions = {
            "—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å": {
                "description": "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–æ–ª–µ–π –≤ —Å–µ–º—å–µ",
                "patterns": [
                    "–ú—É–∂—á–∏–Ω–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–±—ã—Ç—á–∏–∫, –∂–µ–Ω—â–∏–Ω–∞ —Ä–∞—Å–ø–æ—Ä—è–∂–∞–µ—Ç—Å—è —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º",
                    "–û–±—â–∏–π –±—é–¥–∂–µ—Ç, —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
                    "–û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥ '–Ω–∞ —á–µ—Ä–Ω—ã–π –¥–µ–Ω—å' –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
                    "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∏–∑–±–µ–≥–∞—Ç—å –∫—Ä–µ–¥–∏—Ç–æ–≤, –∂–∏—Ç—å –ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º",
                    "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –ø–æ–∫—É–ø–∫–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤—ã –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è"
                ]
            },
            "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å": {
                "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–æ–ª–µ–π –≤ —Å–µ–º—å–µ",
                "patterns": [
                    "–†–∞–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞",
                    "–†–∞–∑–¥–µ–ª—å–Ω—ã–µ –∏ –æ–±—â–∏–µ —Å—á–µ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–ª–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –æ–±—â–∏–µ —Ç—Ä–∞—Ç—ã)",
                    "–ü–ª–∞–Ω–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                    "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                    "–ë–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∫—Ä—É–ø–Ω—ã–º –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è–º (–º–æ–≥—É—Ç –ø—Ä–µ–¥–ø–æ—á–µ—Å—Ç—å –∞—Ä–µ–Ω–¥—É –ø–æ–∫—É–ø–∫–µ)"
                ]
            },
            "–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è_–º–æ–¥–µ–ª—å": {
                "description": "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º –≤ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–µ",
                "patterns": [
                    "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã, —Å—á–µ—Ç–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                    "–ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                    "–§–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º –∏–º—É—â–µ—Å—Ç–≤–µ",
                    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏ –Ω–∞—Ä—è–¥—É —Å –æ–±—â–∏–º–∏"
                ]
            },
            "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_—Å–µ–º—å—è": {
                "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–µ–º—å–µ (—Å —É—á–∞—Å—Ç–∏–µ–º —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è)",
                "patterns": [
                    "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è (—Ä–æ–¥–∏—Ç–µ–ª–µ–π)",
                    "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è (–≤ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è—Ö)",
                    "–û–±—â–∏–µ —Å–µ–º–µ–π–Ω—ã–µ –∞–∫—Ç–∏–≤—ã –∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è",
                    "–°–æ–≤–µ—Ç—ã –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–ø—ã—Ç –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ—Ç —Å—Ç–∞—Ä—à–∏—Ö –∫ –º–ª–∞–¥—à–∏–º",
                    "–í–∑–∞–∏–º–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–ª–∞–≥–æ—Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ–π —Å–µ–º—å–∏ –Ω–∞–¥ –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏"
                ]
            }
        }

        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ –†–æ—Å—Å–∏–∏
        self.specific_financial_practices = {
            "–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ_–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": [
                "–•—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ '–∑–∞–Ω–∞—á–µ–∫'",
                "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª–∞",
                "–ö—É–ª—å—Ç—É—Ä–∞ –æ–¥–∞–ª–∂–∏–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥ —É —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –¥—Ä—É–∑–µ–π –≤–º–µ—Å—Ç–æ –º–∏–∫—Ä–æ–∑–∞–π–º–æ–≤",
                "–ü—Ä–∞–∫—Ç–∏–∫–∞ '–∑–∞–Ω—è—Ç—å –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã' —Å—Ä–µ–¥–∏ –±–ª–∏–∑–∫–∏—Ö",
                "–¢—Ä–∞–¥–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è '–∫—É–±—ã—à–∫–∏ –Ω–∞ —á–µ—Ä–Ω—ã–π –¥–µ–Ω—å'",
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç—Ä–∞—Ç –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–π –Ω–∞–¥ –ª–∏—á–Ω—ã–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏",
                "–í—ã–±–æ—Ä –±–∞–Ω–∫–∞ –ø–æ —Å–æ–≤–µ—Ç—É –∑–Ω–∞–∫–æ–º—ã—Ö –∏–ª–∏ '–≥–¥–µ –ø–æ–ª—É—á–∞—é—Ç –∑–∞—Ä–ø–ª–∞—Ç—É'",
                "–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ª—å–≥–æ—Ç –∏ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö –≤—ã—á–µ—Ç–æ–≤",
                "–í—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º/–≤–∞–ª—é—Ç–Ω—ã–º –∫—Ä–∏–∑–∏—Å–∞–º –∏–∑-–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞"
            ],
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ_–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": {
                "–ú–æ—Å–∫–≤–∞": [
                    "–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                    "–í—ã—Å–æ–∫–∞—è –∑–∞–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞",
                    "–ü—Ä–∏–≤—ã—á–∫–∞ –∫ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–∞–º",
                    "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏"
                ],
                "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": [
                    "–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏",
                    "–ë–æ–ª–µ–µ —ç–∫–æ–Ω–æ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ú–æ—Å–∫–≤–æ–π –ø—Ä–∏ —Å—Ö–æ–∂–µ–º —É—Ä–æ–≤–Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏",
                    "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥ —Å –∫—ç—à–±—ç–∫–æ–º –∑–∞ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
                ],
                "–†–µ–≥–∏–æ–Ω—ã": [
                    "–ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º",
                    "–ú–µ–Ω—å—à–µ–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
                    "–ë–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–∞–º–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è (–ø–æ–¥—Å–æ–±–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ, –∑–∞–≥–æ—Ç–æ–≤–∫–∏)",
                    "–í—ã—à–µ –¥–æ–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ '—Å–µ—Ä—ã—Ö' –¥–æ—Ö–æ–¥–æ–≤",
                    "–ë–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ—é—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –∏ –ª—å–≥–æ—Ç—ã"
                ]
            },
            "–≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ_–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏": {
                "–ú–æ–ª–æ–¥–µ–∂—å": [
                    "–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–µ—à–±—ç–∫-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
                    "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã",
                    "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –Ω–∞–¥ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏",
                    "–ê–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ"
                ],
                "–°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ": [
                    "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–º–æ—â—å—é —Ä–æ–¥–∏—Ç–µ–ª—è–º –∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ –¥–µ—Ç–µ–π",
                    "–ê–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–ø–æ—Ç–µ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                    "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π '–Ω–∞ –ø–µ–Ω—Å–∏—é' –∏–∑-–∑–∞ –Ω–µ–¥–æ–≤–µ—Ä–∏—è –∫ –ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ",
                    "–î–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
                ],
                "–°—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ": [
                    "–•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–æ–º–∞ –∏ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —è—á–µ–π–∫–∞—Ö",
                    "–ù–µ–¥–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –∏–∑-–∑–∞ –æ–ø—ã—Ç–∞ –¥–µ—Ñ–æ–ª—Ç–æ–≤",
                    "–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—Å–ª—É–≥",
                    "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å –¥–µ—Ç—è–º –∏ –≤–Ω—É–∫–∞–º –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                ]
            }
        }

        # –ú–æ–¥–µ–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
        self.social_desirability_patterns = {
            "–∑–∞–≤—ã—à–µ–Ω–∏–µ_–¥–æ—Ö–æ–¥–æ–≤": {
                "description": "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è –∑–∞–≤—ã—à–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ",
                "examples": [
                    "–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –≤–≤–µ—Ä—Ö",
                    "–í–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–µ–º–∏–π/–±–æ–Ω—É—Å–æ–≤ –≤ '–æ–±—ã—á–Ω—ã–π –¥–æ—Ö–æ–¥'",
                    "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ '–ø—Ä–æ—à–ª—ã—Ö –≤—ã—Å–æ–∫–∏—Ö –¥–æ—Ö–æ–¥–æ–≤' –∫–∞–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö",
                    "–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∏–ª–∏ –∏—Ö –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"
                ]
            },
            "—Å–æ–∫—Ä—ã—Ç–∏–µ_–¥–æ–ª–≥–æ–≤": {
                "description": "–¢–µ–Ω–¥–µ–Ω—Ü–∏—è —Å–∫—Ä—ã–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–µ—É–º–µ–Ω—å—à–∞—Ç—å –¥–æ–ª–≥–∏",
                "examples": [
                    "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö",
                    "–ù–∞–∑—ã–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ '–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ä–æ–π' –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏",
                    "–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ '–≤—ã–≥–æ–¥–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏' –¥–∞–∂–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–≤–∫–∞—Ö",
                    "–ü—Ä–µ—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—É–º–º—ã –¥–æ–ª–≥–∞ –∏–ª–∏ —Å—Ä–æ–∫–∞ –∫—Ä–µ–¥–∏—Ç–∞"
                ]
            },
            "–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π_–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏": {
                "description": "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏",
                "examples": [
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è",
                    "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ª–∏—à—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π",
                    "–ó–∞—è–≤–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–æ–≥–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –µ–≥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
                    "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è"
                ]
            },
            "—Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è_–∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö_—Ç—Ä–∞—Ç": {
                "description": "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö —Ç—Ä–∞—Ç –∫–∞–∫ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
                "examples": [
                    "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–∏—Ö –ø–æ–∫—É–ø–æ–∫ –∫–∞–∫ '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –∫–∞—á–µ—Å—Ç–≤–æ'",
                    "–û–ø—Ä–∞–≤–¥–∞–Ω–∏–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç '—É–Ω–∏–∫–∞–ª—å–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é' –∏–ª–∏ '–æ–≥—Ä–æ–º–Ω–æ–π —Å–∫–∏–¥–∫–æ–π'",
                    "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –∫–∞–∫ '–∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ' –∏–ª–∏ '–∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã'",
                    "–ü—Ä–µ—É–º–µ–Ω—å—à–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∏ –æ–±—ä–µ–º–∞ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö —Ç—Ä–∞—Ç"
                ]
            },
            "—Å–∫—Ä—ã—Ç–∏–µ_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π_–ø–æ–º–æ—â–∏": {
                "description": "–°–æ–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—É—á–∞–µ–º–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–º–æ—â–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                "examples": [
                    "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤",
                    "–£–º–∞–ª—á–∏–≤–∞–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–º–æ–≥–ª–∏ —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º –≤–∑–Ω–æ—Å–æ–º –ø–æ –∏–ø–æ—Ç–µ–∫–µ",
                    "–ü—Ä–∏–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Å–µ–±–µ –µ–¥–∏–Ω–æ–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –ø—Ä–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏",
                    "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –∫–∞–∫ '–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–π–º–∞'"
                ]
            },
            "–ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π_–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏": {
                "description": "–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏",
                "examples": [
                    "–ó–∞—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–ª–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª–µ–π/–ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                    "–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–≤–æ–µ–π —Ä–æ–ª–∏ –≤ —Å–µ–º–µ–π–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö",
                    "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–ª–≥–æ–≤",
                    "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ '–¥–µ–Ω—å–≥–∏ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ' –ø—Ä–∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–∏ –∫ –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–∞–º"
                ]
            }
        }

    def get_age_group(self, age: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"""
        if age <= 25:
            return "18-25"
        elif age <= 35:
            return "26-35"
        elif age <= 50:
            return "36-50"
        elif age <= 65:
            return "51-65"
        else:
            return "66-80"

    def get_region_type(self, region: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
        if region in ["–ú–æ—Å–∫–≤–∞"]:
            return "–ú–æ—Å–∫–≤–∞"
        elif region in ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]:
            return "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        else:
            return "–†–µ–≥–∏–æ–Ω—ã"

    def get_relevant_life_events(self, persona: Dict) -> List[Dict]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
        """
        age = persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30)
        family_status = persona.get('–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        event_probabilities = {}

        for event_name, event_info in self.life_events.items():
            probability = 0.0

            # –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            age_range = event_info.get("age_relevance", {"min": 18, "max": 80, "peak": [30, 40]})

            # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
            if age < age_range["min"] or age > age_range["max"]:
                # –ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                probability = 0.05
            else:
                # –í–Ω—É—Ç—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                peak_min, peak_max = age_range["peak"]

                if peak_min <= age <= peak_max:
                    # –í –ø–∏–∫–æ–≤–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ - –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    probability = 0.6
                elif age < peak_min:
                    # –î–æ –ø–∏–∫–æ–≤–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ - —Ä–∞—Å—Ç—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    probability = 0.3 + (0.3 * (age - age_range["min"]) / (peak_min - age_range["min"]))
                else:  # age > peak_max
                    # –ü–æ—Å–ª–µ –ø–∏–∫–æ–≤–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ - —É–±—ã–≤–∞—é—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    probability = 0.3 + (0.3 * (age_range["max"] - age) / (age_range["max"] - peak_max))

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
            if event_info.get("family_status_relevance"):
                if family_status in event_info["family_status_relevance"]:
                    probability *= 2.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
                else:
                    probability *= 0.5  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ

            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if event_name == "—Å–≤–∞–¥—å–±–∞" and "–ñ–µ–Ω–∞—Ç" in family_status:
                probability = 0  # –ò—Å–∫–ª—é—á–∞–µ–º –¥–ª—è —É–∂–µ –∂–µ–Ω–∞—Ç—ã—Ö/–∑–∞–º—É–∂–Ω–∏—Ö

            if event_name == "—Ä–æ–∂–¥–µ–Ω–∏–µ_—Ä–µ–±–µ–Ω–∫–∞":
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
                children = persona.get('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π', 0)
                if children >= 3:
                    probability *= 0.2  # –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã—Ö
                elif children >= 1:
                    probability *= 0.7  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º –¥–ª—è —É–∂–µ –∏–º–µ—é—â–∏—Ö –¥–µ—Ç–µ–π

            if event_name == "—Ä–∞–∑–≤–æ–¥" and "–†–∞–∑–≤–µ–¥–µ–Ω" not in family_status and "–ñ–µ–Ω–∞—Ç" not in family_status:
                probability = 0  # –ò—Å–∫–ª—é—á–∞–µ–º –¥–ª—è –Ω–µ–∂–µ–Ω–∞—Ç—ã—Ö/–Ω–µ–∑–∞–º—É–∂–Ω–∏—Ö

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            event_probabilities[event_name] = min(1.0, max(0.0, probability))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∏, –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        active_events = []

        for event_name, probability in event_probabilities.items():
            # –° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Å—á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
            if random.random() < probability:
                active_events.append({
                    "name": event_name,
                    "description": self.life_events[event_name]["description"],
                    "financial_impact": self.life_events[event_name]["financial_impact"],
                    "relevance": probability  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
                })

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        # –ù–µ –±–æ–ª–µ–µ 2-3 –∑–Ω–∞—á–∏–º—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if len(active_events) > 3:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
            active_events.sort(key=lambda x: x["relevance"], reverse=True)
            active_events = active_events[:3]

        return active_events

    def get_current_seasonal_factors(self) -> List[Dict]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ç–µ–∫—É—â–∏–º–∏ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (1-12)
        current_month = datetime.now().month

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        active_factors = []

        for factor_name, factor_info in self.seasonal_factors.items():
            if current_month in factor_info.get("months", []):
                # –ú–µ—Å—è—Ü —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ–º—É —Ñ–∞–∫—Ç–æ—Ä—É
                active_factors.append({
                    "name": factor_name,
                    "description": factor_info["description"],
                    "financial_impact": factor_info["financial_impact"],
                    "relevant_topics": factor_info.get("relevant_topics", [])
                })

        return active_factors

    def get_generational_money_attitudes(self, persona: Dict) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è –ø–æ–∫–æ–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∫ –¥–µ–Ω—å–≥–∞–º

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –∫ –¥–µ–Ω—å–≥–∞–º –¥–ª—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
        """
        age = persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30)
        age_group = self.get_age_group(age)

        return self.generational_money_attitudes.get(age_group, self.generational_money_attitudes["36-50"])

    def get_family_financial_tradition(self, persona: Dict) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–º–µ–π–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–µ–º–µ–π–Ω–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–µ–π
        """
        age = persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30)
        family_status = persona.get('–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        probabilities = {
            "—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å": 0.25,
            "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å": 0.4,
            "–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è_–º–æ–¥–µ–ª—å": 0.25,
            "—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_—Å–µ–º—å—è": 0.1
        }

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
        age_group = self.get_age_group(age)

        if age_group in ["18-25", "26-35"]:
            # –ú–æ–ª–æ–¥–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –±–æ–ª–µ–µ —Å–∫–ª–æ–Ω–Ω–æ –∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º –º–æ–¥–µ–ª—è–º
            probabilities["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] -= 0.15
            probabilities["—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] += 0.1
            probabilities["–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è_–º–æ–¥–µ–ª—å"] += 0.1
            probabilities["—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_—Å–µ–º—å—è"] -= 0.05
        elif age_group in ["51-65", "66-80"]:
            # –°—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –±–æ–ª–µ–µ —Å–∫–ª–æ–Ω–Ω–æ –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –º–æ–¥–µ–ª—è–º
            probabilities["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] += 0.2
            probabilities["—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] -= 0.1
            probabilities["–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è_–º–æ–¥–µ–ª—å"] -= 0.15
            probabilities["—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_—Å–µ–º—å—è"] += 0.05

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        if "–ñ–µ–Ω–∞—Ç" in family_status or "–ó–∞–º—É–∂–µ–º" in family_status:
            # –ñ–µ–Ω–∞—Ç—ã–µ –ª—é–¥–∏ —á–∞—â–µ —Å–ª–µ–¥—É—é—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –∏–ª–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            probabilities["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] += 0.1
            probabilities["—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] += 0.1
            probabilities["–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è_–º–æ–¥–µ–ª—å"] -= 0.1
            probabilities["—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_—Å–µ–º—å—è"] -= 0.1
        elif "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫" in family_status:
            # –õ—é–¥–∏ –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ —á–∞—Å—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –º–æ–¥–µ–ª—å
            probabilities["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] -= 0.15
            probabilities["—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] += 0.05
            probabilities["–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è_–º–æ–¥–µ–ª—å"] += 0.15
            probabilities["—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_—Å–µ–º—å—è"] -= 0.05
        elif "–†–∞–∑–≤–µ–¥–µ–Ω" in family_status or "–í–¥–æ–≤" in family_status:
            # –†–∞–∑–≤–µ–¥–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ–≤–¥–æ–≤–µ–≤—à–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å —á–∞—Å—Ç—å—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–µ–º—å–∏
            probabilities["—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è_—Å–µ–º—å—è"] += 0.2
            probabilities["—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] -= 0.1
            probabilities["—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è_–º–æ–¥–µ–ª—å"] -= 0.05
            probabilities["–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è_–º–æ–¥–µ–ª—å"] -= 0.05

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        total = sum(probabilities.values())
        normalized_probabilities = {k: v/total for k, v in probabilities.items()}

        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        models = list(normalized_probabilities.keys())
        weights = list(normalized_probabilities.values())
        selected_model = random.choices(models, weights=weights, k=1)[0]

        return {
            "model": selected_model,
            "description": self.family_financial_traditions[selected_model]["description"],
            "patterns": self.family_financial_traditions[selected_model]["patterns"]
        }

    def get_specific_financial_practices(self, persona: Dict) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏
        """
        age = persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30)
        region = persona.get('–†–µ–≥–∏–æ–Ω', '–ú–æ—Å–∫–≤–∞')

        age_group = self.get_age_group(age)
        region_type = self.get_region_type(region)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã (–≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ)
        national_practices = random.sample(
            self.specific_financial_practices["–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ_–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"],
            k=min(3, len(self.specific_financial_practices["–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ_–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"]))
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        if age_group in ["18-25", "26-35"]:
            age_category = "–ú–æ–ª–æ–¥–µ–∂—å"
        elif age_group in ["36-50", "51-65"]:
            age_category = "–°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"
        else:
            age_category = "–°—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ"

        age_practices = self.specific_financial_practices["–≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ_–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"].get(age_category, [])
        age_practices = random.sample(age_practices, k=min(2, len(age_practices)))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        regional_practices = self.specific_financial_practices["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ_–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"].get(region_type, [])
        regional_practices = random.sample(regional_practices, k=min(2, len(regional_practices)))

        return {
            "national": national_practices,
            "regional": regional_practices,
            "age_specific": age_practices
        }

    def get_social_desirability_biases(self, persona: Dict) -> List[Dict]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–µ–π –∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ç–µ—Ä–Ω–∞–º–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        age = persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30)
        income = persona.get('–î–æ—Ö–æ–¥', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        literacy_level = persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π')

        # –ë–∞–∑–æ–≤–∞—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º (0-1)
        base_probability = 0.5

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ (U-–æ–±—Ä–∞–∑–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)
        age_factor = 0.0
        if age < 25:
            # –ú–æ–ª–æ–¥—ã–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –∑–∞–≤—ã—à–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
            age_factor = 0.2
        elif age > 60:
            # –ü–æ–∂–∏–ª—ã–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –ø—Ä–∏—É–∫—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–æ—à–ª–æ–µ –∏–ª–∏ —Å–∫—Ä—ã–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏
            age_factor = 0.15

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Ö–æ–¥–∞
        income_factor = 0.0
        low_income = ["–ú–µ–Ω–µ–µ 15 000 ‚ÇΩ", "15 000 - 30 000 ‚ÇΩ", "30 000 - 60 000 ‚ÇΩ"]
        high_income = ["150 000 - 250 000 ‚ÇΩ", "250 000 - 500 000 ‚ÇΩ", "–ë–æ–ª–µ–µ 500 000 ‚ÇΩ"]

        if income in low_income:
            # –õ—é–¥–∏ —Å –Ω–∏–∑–∫–∏–º –¥–æ—Ö–æ–¥–æ–º –º–æ–≥—É—Ç –µ–≥–æ –∑–∞–≤—ã—à–∞—Ç—å
            income_factor = 0.2
        elif income in high_income:
            # –õ—é–¥–∏ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º –º–æ–≥—É—Ç —Å–∫—Ä—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            income_factor = 0.1

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        literacy_factor = 0.0
        if literacy_level in ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"]:
            # –õ—é–¥–∏ —Å –Ω–∏–∑–∫–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é –º–æ–≥—É—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∂–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            literacy_factor = 0.15
        elif literacy_level == "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π":
            # –õ—é–¥–∏ —Å –≤—ã—Å–æ–∫–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é –º–æ–≥—É—Ç –ø—Ä–µ—É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è
            literacy_factor = 0.1

        # –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        social_desirability_probability = base_probability + age_factor + income_factor + literacy_factor
        social_desirability_probability = min(0.95, max(0.1, social_desirability_probability))

        # –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        selected_patterns = []

        for pattern_name, pattern_info in self.social_desirability_patterns.items():
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –æ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è
            if random.random() < social_desirability_probability * 0.7:  # –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                examples = random.sample(
                    pattern_info["examples"],
                    k=min(2, len(pattern_info["examples"]))
                )

                selected_patterns.append({
                    "name": pattern_name,
                    "description": pattern_info["description"],
                    "examples": examples,
                    "strength": random.uniform(0.3, 0.8)  # –°–∏–ª–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è
                })

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        if len(selected_patterns) > 3:
            selected_patterns = random.sample(selected_patterns, k=3)

        return selected_patterns

    def apply_life_context_to_prompt(self, prompt: str, persona: Dict, question: Dict = None) -> str:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤ –ø—Ä–æ–º–ø—Ç

        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
            question: –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        life_events = self.get_relevant_life_events(persona)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        seasonal_factors = self.get_current_seasonal_factors()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –¥–µ–Ω—å–≥–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è
        generational_attitudes = self.get_generational_money_attitudes(persona)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–º–µ–π–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–¥–∏—Ü–∏—é
        family_tradition = self.get_family_financial_tradition(persona)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
        specific_practices = self.get_specific_financial_practices(persona)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        social_desirability = self.get_social_desirability_biases(persona)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ —Å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        life_context_block = "\n–ñ–ò–ó–ù–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ò –§–ò–ù–ê–ù–°–û–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
        if life_events:
            life_context_block += "\n\n–ñ–ò–ó–ù–ï–ù–ù–´–ï –°–û–ë–´–¢–ò–Ø, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:"
            for event in life_events:
                life_context_block += f"\n- {event['description']}: {event['financial_impact']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö
        if seasonal_factors:
            life_context_block += "\n\n–°–ï–ó–û–ù–ù–´–ï –§–ê–ö–¢–û–†–´, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:"
            for factor in seasonal_factors:
                life_context_block += f"\n- {factor['description']}: {factor['financial_impact']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        if self.current_economic_situation:
            life_context_block += "\n\n–≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:"
            for key, info in self.current_economic_situation.items():
                life_context_block += f"\n- {key.replace('_', ' ').capitalize()}: {info['level']} - {info['financial_impact']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫–æ–ª–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∫ –¥–µ–Ω—å–≥–∞–º
        if generational_attitudes:
            age_group = self.get_age_group(persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30))
            life_context_block += f"\n\n–ü–û–ö–û–õ–ï–ù–ß–ï–°–ö–ò–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò (–≥—Ä—É–ø–ø–∞ {age_group} –ª–µ—Ç):"
            attitudes = random.sample(generational_attitudes.get("money_attitudes", []), k=min(3, len(generational_attitudes.get("money_attitudes", []))))
            for attitude in attitudes:
                life_context_block += f"\n- {attitude}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º–µ–π–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö
        if family_tradition:
            life_context_block += f"\n\n–°–ï–ú–ï–ô–ù–ê–Ø –§–ò–ù–ê–ù–°–û–í–ê–Ø –ú–û–î–ï–õ–¨: {family_tradition['description']}"
            patterns = random.sample(family_tradition['patterns'], k=min(2, len(family_tradition['patterns'])))
            for pattern in patterns:
                life_context_block += f"\n- {pattern}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö
        if specific_practices:
            life_context_block += "\n\n–°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï –ü–†–ê–ö–¢–ò–ö–ò:"
            for practice in specific_practices.get("national", [])[:2]:
                life_context_block += f"\n- {practice}"
            for practice in specific_practices.get("regional", [])[:1]:
                life_context_block += f"\n- {practice}"
            for practice in specific_practices.get("age_specific", [])[:1]:
                life_context_block += f"\n- {practice}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if social_desirability:
            life_context_block += "\n\n–¢–ï–ù–î–ï–ù–¶–ò–ò –ö –°–û–¶–ò–ê–õ–¨–ù–û –ñ–ï–õ–ê–¢–ï–õ–¨–ù–´–ú –û–¢–í–ï–¢–ê–ú:"
            for pattern in social_desirability:
                life_context_block += f"\n- {pattern['description']} (—Å–∏–ª–∞: {pattern['strength']:.1f})"
                if pattern['examples']:
                    life_context_block += f"\n  –ü—Ä–∏–º–µ—Ä: {pattern['examples'][0]}"

        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥ –æ–±—â–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
        if "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê" in prompt:
            prompt = prompt.replace("–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê", f"{life_context_block}\n\n–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê")
        else:
            prompt += life_context_block

        return prompt


class Inconsistency:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –¢–∏–ø—ã –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        self.inconsistency_types = {
            "–∏–∑–º–µ–Ω–µ–Ω–∏–µ_—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏": {
                "description": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–ø–µ–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞",
                "examples": [
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ...' ‚Üí –ü–æ—Å–ª–µ: '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ...'",
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–ù–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ...' ‚Üí –ü–æ—Å–ª–µ: '–Ø –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ...'"
                ]
            },
            "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ_—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è": {
                "description": "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã",
                "examples": [
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–Ø –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–µ—Ä—É –∫—Ä–µ–¥–∏—Ç—ã' ‚Üí –ü–æ—Å–ª–µ: '–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –∫—Ä–µ–¥–∏—Ç'",
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–Ø –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—é —Ü–µ–Ω—ã' ‚Üí –ü–æ—Å–ª–µ: '–û–±—ã—á–Ω–æ –ø–æ–∫—É–ø–∞—é –Ω–µ –∑–∞–¥—É–º—ã–≤–∞—è—Å—å'"
                ]
            },
            "–∏–∑–º–µ–Ω–µ–Ω–∏–µ_–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π": {
                "description": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞",
                "examples": [
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏' ‚Üí –ü–æ—Å–ª–µ: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∫–ª–∞–¥–∞ –¥–ª—è –º–µ–Ω—è –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ'",
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–∞–ª–∏—á–Ω—ã–µ' ‚Üí –ü–æ—Å–ª–µ: '–û–±—ã—á–Ω–æ —Ä–∞—Å–ø–ª–∞—á–∏–≤–∞—é—Å—å –∫–∞—Ä—Ç–æ–π'"
                ]
            },
            "—Ä–∞–∑–Ω–∞—è_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è_–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å": {
                "description": "–ü—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ö",
                "examples": [
                    "–¢–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤, –Ω–æ –ø—É—Ç–∞–Ω–∏—Ü–∞ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö",
                    "–£–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç–∞—Ö, –Ω–æ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
                ]
            },
            "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è_–≤_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º_–ø–æ–≤–µ–¥–µ–Ω–∏–∏": {
                "description": "–ó–∞—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –æ–ø–∏—Å–∞–Ω–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é",
                "examples": [
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–Ø —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é —Ä–∞—Å—Ö–æ–¥—ã' ‚Üí –ü–æ—Å–ª–µ: '–ß–∞—Å—Ç–æ –Ω–µ –ø–æ–º–Ω—é, –Ω–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª –¥–µ–Ω—å–≥–∏'",
                    "–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: '–í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é 10% –¥–æ—Ö–æ–¥–∞' ‚Üí –ü–æ—Å–ª–µ: '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–∫–æ–ø–∏—Ç—å'"
                ]
            }
        }

        # –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.inconsistency_factors = {
            "—É—Å—Ç–∞–ª–æ—Å—Ç—å": {
                "description": "–°–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º –æ–ø—Ä–æ—Å–µ",
                "effects": [
                    "–ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ –∫–æ–Ω—Ü–µ –æ–ø—Ä–æ—Å–∞",
                    "–†–æ—Å—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –ø—Ä–∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏",
                    "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è –∫ –¥–µ—Ç–∞–ª—è–º –≤–æ–ø—Ä–æ—Å–∞"
                ]
            },
            "—Å–ª–æ–∂–Ω–æ—Å—Ç—å_—Ç–µ–º—ã": {
                "description": "–ë–æ–ª–µ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ–º–∞—Ö",
                "effects": [
                    "–ë–æ–ª—å—à–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –≤ —Ç–µ–º–∞—Ö –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ –ø—Ä–∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞",
                    "–í—ã–¥–∞—á–∞ —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ—Ç–æ—á–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π"
                ]
            },
            "—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞_–≤–æ–ø—Ä–æ—Å–∞": {
                "description": "–†–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å —Ä–∞–∑–Ω–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–æ–π",
                "effects": [
                    "–†–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                    "–í–ª–∏—è–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º–Ω–µ–Ω–∏–µ",
                    "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"
                ]
            }
        }

    def generate_inconsistency_profile(self, persona: Dict) -> Dict:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω—ã
        age = persona.get('–í–æ–∑—Ä–∞—Å—Ç', 30)
        literacy_level = persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π')

        # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (0-1)
        base_inconsistency = 0.4  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ (U-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è)
        if age < 25 or age > 65:
            # –ú–æ–ª–æ–¥—ã–µ –∏ –ø–æ–∂–∏–ª—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã
            age_factor = 0.1
        else:
            # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç - –±–æ–ª–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã
            age_factor = -0.1

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        if literacy_level in ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"]:
            # –ù–∏–∑–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å - –≤—ã—à–µ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            literacy_factor = 0.2
        elif literacy_level == "—Å—Ä–µ–¥–Ω–∏–π":
            literacy_factor = 0.0
        else:
            # –í—ã—Å–æ–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å - –Ω–∏–∂–µ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            literacy_factor = -0.2

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é
        inconsistency_level = base_inconsistency + age_factor + literacy_factor
        inconsistency_level = min(0.9, max(0.1, inconsistency_level)) * random.uniform(0.8, 1.2)

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        selected_types = {}

        for type_name, type_info in self.inconsistency_types.items():
            # –ß–µ–º –≤—ã—à–µ –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ —Ç–∏–ø–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–æ
            if random.random() < inconsistency_level * 0.7:
                # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —Å–ª—É—á–∞–π–Ω—É—é —Å–∏–ª—É
                strength = random.uniform(inconsistency_level * 0.5, inconsistency_level * 1.5)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                strength = min(0.9, max(0.1, strength))

                selected_types[type_name] = {
                    "description": type_info["description"],
                    "examples": type_info["examples"],
                    "strength": strength
                }

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        if not selected_types:
            random_type = random.choice(list(self.inconsistency_types.keys()))
            selected_types[random_type] = {
                "description": self.inconsistency_types[random_type]["description"],
                "examples": self.inconsistency_types[random_type]["examples"],
                "strength": inconsistency_level
            }

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏ (–¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ö—É–¥—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤)
        fatigue_profile = {
            "fatigue_rate": random.uniform(0.05, 0.15),  # –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏
            "current_fatigue": 0.0,  # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏
            "max_fatigue": random.uniform(0.6, 0.9)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏
        }

        return {
            "overall_level": inconsistency_level,
            "types": selected_types,
            "fatigue_profile": fatigue_profile
        }

    def update_fatigue(self, inconsistency_profile: Dict, question_index: int = 0) -> Dict:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤

        Args:
            inconsistency_profile: –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            question_index: –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        fatigue_profile = inconsistency_profile.get("fatigue_profile", {})

        if not fatigue_profile:
            return inconsistency_profile

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        fatigue_rate = fatigue_profile.get("fatigue_rate", 0.1)
        current_fatigue = fatigue_profile.get("current_fatigue", 0.0)
        max_fatigue = fatigue_profile.get("max_fatigue", 0.8)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Å—Ç–∞–ª–æ—Å—Ç—å —Å –∫–∞–∂–¥—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        new_fatigue = min(max_fatigue, current_fatigue + fatigue_rate * (question_index + 1))

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        inconsistency_profile["fatigue_profile"]["current_fatigue"] = new_fatigue

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —É—Å—Ç–∞–ª–æ—Å—Ç–∏
        base_level = inconsistency_profile.get("overall_level", 0.4)
        fatigue_factor = new_fatigue * 0.5  # –í–ª–∏—è–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –Ω–∞ –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å

        inconsistency_profile["overall_level"] = min(0.9, base_level + fatigue_factor)

        return inconsistency_profile

    def apply_inconsistency_to_prompt(self, prompt: str, inconsistency_profile: Dict, question_index: int = 0) -> str:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–º–ø—Ç

        Args:
            prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            inconsistency_profile: –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            question_index: –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏)

        Returns:
            –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —É—á–µ—Ç–æ–º —É—Å—Ç–∞–ª–æ—Å—Ç–∏
        updated_profile = self.update_fatigue(inconsistency_profile, question_index)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        overall_level = updated_profile.get("overall_level", 0.4)
        types = updated_profile.get("types", {})
        fatigue = updated_profile.get("fatigue_profile", {}).get("current_fatigue", 0.0)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        inconsistency_instruction = "\n\n–ù–ï–ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –í –û–¢–í–ï–¢–ê–•:"
        inconsistency_instruction += f"\n- –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏: {overall_level:.2f} (–≥–¥–µ 0 - –ø–æ–ª–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, 1 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç—å)"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if types:
            inconsistency_instruction += "\n- –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
            for type_name, type_info in types.items():
                inconsistency_instruction += f"\n  ‚Ä¢ {type_info['description']} (—Å–∏–ª–∞: {type_info['strength']:.2f})"
                if random.random() < 0.5 and type_info['examples']:  # –ù–µ –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä
                    example = random.choice(type_info['examples'])
                    inconsistency_instruction += f"\n    –ü—Ä–∏–º–µ—Ä: {example}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç–∞–ª–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞
        if fatigue > 0.3:
            fatigue_level = "–≤—ã—Å–æ–∫–∞—è" if fatigue > 0.6 else "—É–º–µ—Ä–µ–Ω–Ω–∞—è"
            inconsistency_instruction += f"\n- –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏: {fatigue_level} ({fatigue:.2f})"
            inconsistency_instruction += "\n  ‚Ä¢ –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –≤ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –º–µ–Ω—å—à–µ–º –≤–Ω–∏–º–∞–Ω–∏–∏ –∫ –¥–µ—Ç–∞–ª—è–º –≤–æ–ø—Ä–æ—Å–∞"
            if fatigue > 0.5:
                inconsistency_instruction += ", –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏ –∏ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–ª–∏–Ω–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç–∞–ª–æ—Å—Ç–∏
            if fatigue > 0.7:
                inconsistency_instruction += "\n  ‚Ä¢ –î–∞–≤–∞–π –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π —É—Å—Ç–∞–ª–æ—Å—Ç–∏"
            elif fatigue > 0.4:
                inconsistency_instruction += "\n  ‚Ä¢ –û—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ –∏–∑-–∑–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –ø—Ä–æ–º–ø—Ç
        if "–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê" in prompt:
            prompt = prompt.replace("–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê", f"{inconsistency_instruction}\n\n–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê")
        else:
            prompt += inconsistency_instruction

        return prompt


class EnhancedFinancialRespondent:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""

    def __init__(self, marketplace):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

        Args:
            marketplace: –≠–∫–∑–µ–º–ø–ª—è—Ä RespondentsMarketplace
        """
        self.marketplace = marketplace
        self.cognitive_biases = CognitiveBiases()
        self.emotional_factors = EmotionalFactors()
        self.linguistic_variation = LinguisticVariation()
        self.life_context = LifeContextFactors()
        self.inconsistency = Inconsistency()

        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä—Å–æ–Ω—ã
        self.response_history = {}

    def enhance_persona(self, persona: Dict) -> Dict:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏

        Args:
            persona: –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä—Å–æ–Ω–æ–π

        Returns:
            –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä—Å–æ–Ω—ã
        """
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        enhanced_persona = persona.copy()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
        literacy_level = persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π')
        cognitive_biases = self.cognitive_biases.get_random_biases(num_biases=3, literacy_level=literacy_level)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        emotional_factors = self.emotional_factors.get_random_emotions(num_emotions=3)

        # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        linguistic_profile = self.linguistic_variation.generate_linguistic_profile(persona)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        inconsistency_profile = self.inconsistency.generate_inconsistency_profile(persona)

        # –†–∞—Å—à–∏—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        if '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å' not in enhanced_persona:
            enhanced_persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å'] = {}

        enhanced_persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è'] = cognitive_biases
        enhanced_persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã'] = emotional_factors
        enhanced_persona['–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å'] = linguistic_profile
        enhanced_persona['–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] = inconsistency_profile

        return enhanced_persona

    def generate_enhanced_prompt(self, enhanced_persona: Dict, question: Dict, question_index: int = 0) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

        Args:
            enhanced_persona: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä—Å–æ–Ω—ã
            question: –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º
            question_index: –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–ª–æ—Å—Ç–∏)

        Returns:
            –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        base_prompt = self.marketplace._generate_enhanced_prompt(enhanced_persona, question)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
        cognitive_biases = enhanced_persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è', {})
        emotional_factors = enhanced_persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã', {})
        linguistic_profile = enhanced_persona.get('–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å', {})
        inconsistency_profile = enhanced_persona.get('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', {})

        enhanced_prompt = base_prompt

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è
        for bias_name, bias_strength in cognitive_biases.items():
            enhanced_prompt = self.cognitive_biases.apply_bias_to_prompt(
                enhanced_prompt, bias_name, bias_strength
            )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        for emotion_name, emotion_strength in emotional_factors.items():
            enhanced_prompt = self.emotional_factors.apply_emotion_to_prompt(
                enhanced_prompt, emotion_name, emotion_strength, question.get('topic')
            )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        if linguistic_profile:
            enhanced_prompt = self.linguistic_variation.apply_linguistic_profile_to_prompt(
                enhanced_prompt, linguistic_profile
            )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        enhanced_prompt = self.life_context.apply_life_context_to_prompt(
            enhanced_prompt, enhanced_persona, question
        )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if inconsistency_profile:
            enhanced_prompt = self.inconsistency.apply_inconsistency_to_prompt(
                enhanced_prompt, inconsistency_profile, question_index
            )

        return enhanced_prompt

    def generate_realistic_answer(self, persona_id: str, persona: Dict, question: Dict,
                                 question_index: int = 0, **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

        Args:
            persona_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
            question: –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º
            question_index: –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ generate_answer

        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —É–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Ä—Å–æ–Ω—ã
        if not persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è'):
            enhanced_persona = self.enhance_persona(persona)
        else:
            enhanced_persona = persona

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –ø–µ—Ä—Å–æ–Ω—ã
        if persona_id not in self.response_history:
            self.response_history[persona_id] = []

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        enhanced_prompt = self.generate_enhanced_prompt(
            enhanced_persona,
            question,
            question_index
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        answer = self.marketplace.generate_answer(
            enhanced_persona,
            question,
            **kwargs,
            _enhanced_prompt=enhanced_prompt  # –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –ø–µ—Ä—Å–æ–Ω—ã
        self.response_history[persona_id].append({
            "question": question,
            "answer": answer,
            "timestamp": datetime.now().isoformat()
        })

        return answer

    def get_persona_history(self, persona_id: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω—ã

        Args:
            persona_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        """
        return self.response_history.get(persona_id, [])

    def reset_history(self, persona_id: str = None) -> None:
        """
        –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä—Å–æ–Ω—ã –∏–ª–∏ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω

        Args:
            persona_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã (–µ—Å–ª–∏ None, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è)
        """
        if persona_id is None:
            self.response_history = {}
        elif persona_id in self.response_history:
            self.response_history[persona_id] = []


class RespondentsMarketplace:
    """–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"""

    def __init__(self, api_key_claude: Optional[str] = None, api_key_openai: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤

        Args:
            api_key_claude: API –∫–ª—é—á –¥–ª—è Anthropic Claude
            api_key_openai: API –∫–ª—é—á –¥–ª—è OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª—é—á API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if not api_key_claude and not api_key_openai:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á (Claude –∏–ª–∏ OpenAI)")

        self.api_key_claude = api_key_claude
        self.api_key_openai = api_key_openai

        if api_key_claude:
            self.client_claude = anthropic.Anthropic(api_key=self.api_key_claude)
        else:
            self.client_claude = None

        if api_key_openai:
            self.client_openai = openai.OpenAI(api_key=self.api_key_openai)
        else:
            self.client_openai = None

        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–∏—Ö –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.regions = [
            "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π",
            "–Æ–∂–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π", "–£—Ä–∞–ª—å—Å–∫–∏–π",
            "–°–∏–±–∏—Ä—Å–∫–∏–π", "–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π"
        ]

        self.cities = {
            "–ú–æ—Å–∫–≤–∞": ["–ú–æ—Å–∫–≤–∞"],
            "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": ["–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"],
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": ["–í–æ—Ä–æ–Ω–µ–∂", "–¢—É–ª–∞", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å", "–†—è–∑–∞–Ω—å", "–¢–≤–µ—Ä—å", "–í–ª–∞–¥–∏–º–∏—Ä", "–ë—Ä—è–Ω—Å–∫"],
            "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π": ["–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–ü—Å–∫–æ–≤", "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫", "–ú—É—Ä–º–∞–Ω—Å–∫", "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫"],
            "–Æ–∂–Ω—ã–π": ["–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–í–æ–ª–≥–æ–≥—Ä–∞–¥", "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å"],
            "–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π": ["–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å", "–ú–∞—Ö–∞—á–∫–∞–ª–∞", "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑", "–ì—Ä–æ–∑–Ω—ã–π", "–ù–∞–ª—å—á–∏–∫"],
            "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π": ["–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ö–∞–∑–∞–Ω—å", "–°–∞–º–∞—Ä–∞", "–£—Ñ–∞", "–ü–µ—Ä–º—å", "–°–∞—Ä–∞—Ç–æ–≤"],
            "–£—Ä–∞–ª—å—Å–∫–∏–π": ["–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–¢—é–º–µ–Ω—å", "–°—É—Ä–≥—É—Ç"],
            "–°–∏–±–∏—Ä—Å–∫–∏–π": ["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–û–º—Å–∫", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫", "–¢–æ–º—Å–∫", "–ö–µ–º–µ—Ä–æ–≤–æ"],
            "–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π": ["–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–•–∞–±–∞—Ä–æ–≤—Å–∫", "–Ø–∫—É—Ç—Å–∫", "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫", "–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫"]
        }

        self.professions = [
            "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ê–Ω–∞–ª–∏—Ç–∏–∫/Data Scientist", "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–≤–µ–Ω–∞",
            "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤—ã—Å—à–µ–≥–æ –∑–≤–µ–Ω–∞", "–í—Ä–∞—á/–º–µ–¥—Ä–∞–±–æ—Ç–Ω–∏–∫", "–£—á–∏—Ç–µ–ª—å/–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            "–ò–Ω–∂–µ–Ω–µ—Ä", "–î–∏–∑–∞–π–Ω–µ—Ä/—Ö—É–¥–æ–∂–Ω–∏–∫", "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥/PR",
            "–Æ—Ä–∏—Å—Ç/–∞–¥–≤–æ–∫–∞—Ç", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä/—Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç", "–†–∞–±–æ—á–∏–π", "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª—É–∂–∞—â–∏–π",
            "–°—Ç—É–¥–µ–Ω—Ç", "–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä", "–í—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π", "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä",
            "–í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π", "–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π/–æ—Ö—Ä–∞–Ω–Ω–∏–∫", "–ù–∞—É—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ü—Ä–æ–¥–∞–≤–µ—Ü/–∫–∞—Å—Å–∏—Ä"
        ]

        self.education_levels = [
            "–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ",
            "–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä)", "–í—ã—Å—à–µ–µ (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)", "–í—ã—Å—à–µ–µ (–º–∞–≥–∏—Å—Ç—Ä)",
            "–î–≤–∞ –∏ –±–æ–ª–µ–µ –≤—ã—Å—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å", "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
        ]

        self.family_statuses = [
            "–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º", "–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫",
            "–†–∞–∑–≤–µ–¥–µ–Ω/–†–∞–∑–≤–µ–¥–µ–Ω–∞", "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞", "–í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö (–Ω–µ –ø—Ä–æ–∂–∏–≤–∞—é—Ç –≤–º–µ—Å—Ç–µ)"
        ]

        self.income_brackets = [
            "–ú–µ–Ω–µ–µ 15 000 ‚ÇΩ", "15 000 - 30 000 ‚ÇΩ", "30 000 - 60 000 ‚ÇΩ",
            "60 000 - 100 000 ‚ÇΩ", "100 000 - 150 000 ‚ÇΩ", "150 000 - 250 000 ‚ÇΩ",
            "250 000 - 500 000 ‚ÇΩ", "–ë–æ–ª–µ–µ 500 000 ‚ÇΩ", "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å"
        ]

        self.hobby_options = [
            "–°–ø–æ—Ä—Ç/—Ñ–∏—Ç–Ω–µ—Å", "–ß—Ç–µ–Ω–∏–µ", "–ö–∏–Ω–æ/—Å–µ—Ä–∏–∞–ª—ã", "–ú—É–∑—ã–∫–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
            "–ö—É–ª–∏–Ω–∞—Ä–∏—è", "–†—ã–±–∞–ª–∫–∞/–æ—Ö–æ—Ç–∞", "–†—É–∫–æ–¥–µ–ª–∏–µ", "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã", "–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ",
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–¢–∞–Ω—Ü—ã", "–†–∏—Å–æ–≤–∞–Ω–∏–µ", "–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ",
            "–î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
            "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Ç–µ–∞—Ç—Ä–æ–≤/–º—É–∑–µ–µ–≤", "–ë–ª–æ–≥–∏–Ω–≥/–≤–ª–æ–≥–∏–Ω–≥", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ"
        ]

        # –£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        self.financial_literacy_levels = [
            "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "—ç–∫—Å–ø–µ—Ä—Ç"
        ]

        # –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É
        self.risk_attitudes = [
            "–∏–∑–±–µ–≥–∞—é—â–∏–π —Ä–∏—Å–∫–∞", "—É–º–µ—Ä–µ–Ω–Ω—ã–π", "—Å–∫–ª–æ–Ω–Ω—ã–π –∫ —Ä–∏—Å–∫—É"
        ]

        # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –±–∞–Ω–∫–∞–º
        self.bank_trust_levels = [
            "–Ω–∏–∑–∫–æ–µ", "—Å—Ä–µ–¥–Ω–µ–µ", "–≤—ã—Å–æ–∫–æ–µ"
        ]

        # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º
        self.loan_attitudes = [
            "–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ"
        ]

        # –ú–æ–¥–µ–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        self.financial_behaviors = [
            "–∏–∑–±–µ–≥–∞—é—â–∏–π —Ä–∏—Å–∫–∞", "–∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π", "–ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π",
            "–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç", "—Å—Ç–∞—Ç—É—Å–Ω—ã–π"
        ]

        # –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        self.bank_products = [
            "–¥–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã", "–∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã", "–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫—Ä–µ–¥–∏—Ç—ã",
            "–∏–ø–æ—Ç–µ–∫–∞", "–≤–∫–ª–∞–¥—ã", "–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
        ]

        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö
        self.knowledge_base = FinancialKnowledgeBase()

        # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ –æ –±–∞–Ω–∫–∞—Ö
        self.reviews_analyzer = BankReviewsAnalyzer()

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        self.prompting_params = {
            "temperature_min": 0.3,
            "temperature_max": 0.85,
            "max_tokens": 1500,
            "prompt_data": {},
            "use_reviews_data": False
        }

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ LLM –º–æ–¥–µ–ª–∏
        self.claude_models = ["claude-3-5-sonnet-20241022", "claude-3-5-haiku-20241022", "claude-3-opus-20240229"]
        self.openai_models = ["gpt-4o", "gpt-4-turbo", "gpt-3.5-turbo"]

        # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞—Å–ø–µ–∫—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤
        self.financial_topic_mapping = {
            "–∫—Ä–µ–¥–∏—Ç—ã": ["–∫—Ä–µ–¥–∏—Ç", "–∑–∞–π–º", "–∏–ø–æ—Ç–µ–∫", "–ø–æ—Ç—Ä–µ–±–∏—Ç", "—Ä–∞—Å—Å—Ä–æ—á–∫"],
            "–∫–∞—Ä—Ç—ã": ["–∫–∞—Ä—Ç", "–¥–µ–±–µ—Ç", "–∫—ç—à–±—ç–∫", "–∫–µ—à–±—ç–∫", "–±–æ–Ω—É—Å", "–ª–∏–º–∏—Ç"],
            "–≤–∫–ª–∞–¥—ã": ["–≤–∫–ª–∞–¥", "–¥–µ–ø–æ–∑–∏—Ç", "–Ω–∞–∫–æ–ø–∏", "–ø—Ä–æ—Ü–µ–Ω—Ç", "—Å–±–µ—Ä–µ–∂–µ–Ω–∏"],
            "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": ["–∏–Ω–≤–µ—Å—Ç", "–∞–∫—Ü–∏", "–æ–±–ª–∏–≥–∞—Ü–∏", "–±—Ä–æ–∫–µ—Ä", "—Ñ–æ–Ω–¥", "–ø–∏—Ñ", "–±–∏—Ä–∂"],
            "–æ–±—â–∏–µ": ["–±–∞–Ω–∫", "—Ñ–∏–Ω–∞–Ω—Å", "–¥–µ–Ω—å–≥", "–ø–ª–∞—Ç–µ–∂", "–ø–µ—Ä–µ–≤–æ–¥", "–∫–æ–º–∏—Å—Å–∏"],
            "–æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏", "—Å–∞–π—Ç", "–æ–Ω–ª–∞–π–Ω", "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–º–æ–±–∏–ª—å–Ω"]
        }

        # –ö—ç—à –¥–ª—è API-–æ—Ç–≤–µ—Ç–æ–≤
        self.response_cache = {}

        # –°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        self.tokens_used = {
            "claude": 0,
            "openai": 0
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
        self.enhanced_respondent = EnhancedFinancialRespondent(self)

    def generate_persona(self, weighted: bool = True) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã —Å —É—Ä–æ–≤–Ω–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

        Args:
            weighted: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏

        Returns:
            Dictionary —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
        """
        # –ü–æ–ª —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        gender = random.choices(
            ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"],
            weights=[0.48, 0.52] if weighted else None
        )[0]

        # –í–æ–∑—Ä–∞—Å—Ç —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º
        age_groups = [(18, 24), (25, 34), (35, 44), (45, 54), (55, 65), (66, 80)]
        age_weights = [0.12, 0.22, 0.21, 0.18, 0.15, 0.12] if weighted else None

        age_group = random.choices(age_groups, weights=age_weights)[0]
        age = random.randint(age_group[0], age_group[1])

        # –†–µ–≥–∏–æ–Ω —Å —É—á–µ—Ç–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        region_weights = [0.15, 0.10, 0.13, 0.05, 0.05, 0.05, 0.13, 0.12, 0.12, 0.10] if weighted else None
        region = random.choices(self.regions, weights=region_weights)[0]

        # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–∏–æ–Ω–∞
        city = random.choice(self.cities.get(region, ["–ù–µ —É–∫–∞–∑–∞–Ω"]))

        # –î–æ—Ö–æ–¥, –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏–π —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º, —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        if age < 25:
            income_idx = min(max(0, int(np.random.normal(1, 1))), len(self.income_brackets)-1)
        elif age < 35:
            income_idx = min(max(0, int(np.random.normal(3, 1.5))), len(self.income_brackets)-1)
        elif age < 45:
            income_idx = min(max(0, int(np.random.normal(4, 1.5))), len(self.income_brackets)-1)
        elif age < 55:
            income_idx = min(max(0, int(np.random.normal(3, 2))), len(self.income_brackets)-1)
        else:
            income_idx = min(max(0, int(np.random.normal(2, 1.5))), len(self.income_brackets)-1)

        income = self.income_brackets[income_idx]

        # –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏–π —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
        if age < 22:
            edu_options = self.education_levels[:3]
            edu_weights = [0.4, 0.4, 0.2]
        elif age < 30:
            edu_options = self.education_levels[:6]
            edu_weights = [0.1, 0.2, 0.1, 0.3, 0.2, 0.1]
        else:
            edu_options = self.education_levels
            edu_weights = [0.10, 0.25, 0.05, 0.25, 0.20, 0.10, 0.03, 0.01, 0.01]

        education = random.choices(edu_options, weights=edu_weights[:len(edu_options)])[0]

        # –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–µ–µ —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
        if age < 25:
            family_weights = [0.7, 0.05, 0.2, 0.01, 0.01, 0.03]
        elif age < 35:
            family_weights = [0.3, 0.35, 0.25, 0.05, 0.01, 0.04]
        elif age < 55:
            family_weights = [0.15, 0.5, 0.15, 0.1, 0.05, 0.05]
        else:
            family_weights = [0.1, 0.4, 0.05, 0.2, 0.2, 0.05]

        family_status = random.choices(self.family_statuses, weights=family_weights)[0]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π - –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –∏ —Å–µ–º–µ–π–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
        max_children = max(0, min(5, int((age - 18) / 5)))

        if "–•–æ–ª–æ—Å—Ç" in family_status or age < 22:
            children_weights = [0.9] + [0.1/max(1, max_children)] * max_children
        elif "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫" in family_status:
            children_weights = [0.6] + [0.4/max(1, max_children)] * max_children
        elif "–†–∞–∑–≤–µ–¥–µ–Ω" in family_status:
            children_weights = [0.3] + [0.7/max(1, max_children)] * max_children
        else:
            children_weights = [0.2] + [0.8/max(1, max_children)] * max_children

        num_children = random.choices(
            range(0, max_children + 1),
            weights=children_weights[:max_children+1]
        )[0]

        # –í—ã–±–æ—Ä 1-3 —Ö–æ–±–±–∏
        num_hobbies = random.choices([1, 2, 3], weights=[0.2, 0.5, 0.3])[0]
        hobbies = random.sample(self.hobby_options, num_hobbies)

        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å - –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –¥–æ—Ö–æ–¥–æ–º
        # –ë–∞–∑–æ–≤—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        education_factor = {
            "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": 0.1,
            "–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": 0.3,
            "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ": 0.4,
            "–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ": 0.5,
            "–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä)": 0.6,
            "–í—ã—Å—à–µ–µ (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)": 0.7,
            "–í—ã—Å—à–µ–µ (–º–∞–≥–∏—Å—Ç—Ä)": 0.8,
            "–î–≤–∞ –∏ –±–æ–ª–µ–µ –≤—ã—Å—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è": 0.9,
            "–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å": 0.95
        }.get(education, 0.5)

        # –§–∞–∫—Ç–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ (–æ–ø—ã—Ç)
        age_factor = min(1.0, max(0.1, (age - 18) / 40))

        # –§–∞–∫—Ç–æ—Ä –¥–æ—Ö–æ–¥–∞
        income_factor = {
            "–ú–µ–Ω–µ–µ 15 000 ‚ÇΩ": 0.2,
            "15 000 - 30 000 ‚ÇΩ": 0.3,
            "30 000 - 60 000 ‚ÇΩ": 0.5,
            "60 000 - 100 000 ‚ÇΩ": 0.7,
            "100 000 - 150 000 ‚ÇΩ": 0.8,
            "150 000 - 250 000 ‚ÇΩ": 0.9,
            "250 000 - 500 000 ‚ÇΩ": 0.95,
            "–ë–æ–ª–µ–µ 500 000 ‚ÇΩ": 1.0,
            "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å": 0.5
        }.get(income, 0.5)

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é
        literacy_score = (education_factor * 0.4 + age_factor * 0.3 + income_factor * 0.3) * random.uniform(0.7, 1.3)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        if literacy_score < 0.25:
            financial_literacy = "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π"
        elif literacy_score < 0.45:
            financial_literacy = "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"
        elif literacy_score < 0.7:
            financial_literacy = "—Å—Ä–µ–¥–Ω–∏–π"
        elif literacy_score < 0.9:
            financial_literacy = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        else:
            financial_literacy = "—ç–∫—Å–ø–µ—Ä—Ç"

        # –û–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        literacy_idx = self.financial_literacy_levels.index(financial_literacy)

        financial_products = {}

        # –î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ - –µ—Å—Ç—å –ø–æ—á—Ç–∏ —É –≤—Å–µ—Ö
        financial_products["–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞"] = random.random() < (0.5 + literacy_idx * 0.1)

        # –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ - —Ä–∞—Å—Ç–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        financial_products["–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"] = random.random() < (0.1 + literacy_idx * 0.15)

        # –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç - —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é
        financial_products["–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç"] = random.random() < (0.15 + literacy_idx * 0.1)

        # –ò–ø–æ—Ç–µ–∫–∞ - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –¥–æ—Ö–æ–¥–∞
        has_mortgage_chance = 0.01
        if 25 <= age <= 50:
            has_mortgage_chance += 0.15
        if income_idx >= 3:  # –î–æ—Ö–æ–¥ –æ—Ç 60 000
            has_mortgage_chance += 0.15
        financial_products["–ò–ø–æ—Ç–µ–∫–∞"] = random.random() < has_mortgage_chance

        # –í–∫–ª–∞–¥ - —Ä–∞—Å—Ç–µ—Ç —Å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é
        financial_products["–í–∫–ª–∞–¥"] = random.random() < (0.05 + literacy_idx * 0.2)

        # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        financial_products["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"] = random.random() < (0.01 + (literacy_idx ** 2) * 0.05)

        # –°—Ç—Ä–∞—Ö–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–æ—Å—Ç —Å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å—é
        financial_products["–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"] = random.random() < (0.05 + literacy_idx * 0.15)

        # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º - –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —É—Ä–æ–≤–Ω–µ–º –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

        # –î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º
        if financial_literacy in ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π"]:
            trust_weights = [0.5, 0.3, 0.2]
        elif financial_literacy == "—Å—Ä–µ–¥–Ω–∏–π":
            trust_weights = [0.3, 0.5, 0.2]
        else:
            trust_weights = [0.2, 0.3, 0.5]

        bank_trust = random.choices(self.bank_trust_levels, weights=trust_weights)[0]

        # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º
        if financial_literacy in ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π"]:
            loan_weights = [0.6, 0.3, 0.1]
        elif financial_literacy == "–Ω–∞—á–∏–Ω–∞—é—â–∏–π":
            loan_weights = [0.4, 0.4, 0.2]
        elif financial_literacy == "—Å—Ä–µ–¥–Ω–∏–π":
            loan_weights = [0.3, 0.4, 0.3]
        else:
            loan_weights = [0.2, 0.4, 0.4]

        loan_attitude = random.choices(self.loan_attitudes, weights=loan_weights)[0]

        # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É - –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º –∏ –¥–æ—Ö–æ–¥–æ–º
        if age > 60:
            risk_weights = [0.7, 0.2, 0.1]
        elif age > 40:
            risk_weights = [0.4, 0.4, 0.2]
        else:
            risk_weights = [0.3, 0.4, 0.3]

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Ö–æ–¥–∞
        if income_idx >= 5:  # –í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥
            risk_weights = [max(0.1, risk_weights[0] - 0.2), risk_weights[1], min(0.6, risk_weights[2] + 0.2)]

        risk_attitude = random.choices(self.risk_attitudes, weights=risk_weights)[0]

        # –ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if risk_attitude == "–∏–∑–±–µ–≥–∞—é—â–∏–π —Ä–∏—Å–∫–∞":
            behavior_weights = [0.5, 0.1, 0.2, 0.2, 0.0]
        elif risk_attitude == "—É–º–µ—Ä–µ–Ω–Ω—ã–π":
            behavior_weights = [0.2, 0.2, 0.3, 0.2, 0.1]
        else:  # —Å–∫–ª–æ–Ω–Ω—ã–π –∫ —Ä–∏—Å–∫—É
            behavior_weights = [0.1, 0.3, 0.2, 0.1, 0.3]

        financial_behavior = random.choices(self.financial_behaviors, weights=behavior_weights)[0]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        financial_vocabulary = self.knowledge_base.get_vocabulary_for_level(financial_literacy, 15)
        financial_misconceptions = self.knowledge_base.get_misconceptions_for_level(financial_literacy)
        behavior_patterns = self.knowledge_base.get_behavior_patterns(financial_behavior)
        financial_goals = self.knowledge_base.get_random_financial_goals(2)

        # –°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã
        persona = {
            "–ü–æ–ª": gender,
            "–í–æ–∑—Ä–∞—Å—Ç": age,
            "–†–µ–≥–∏–æ–Ω": region,
            "–ì–æ—Ä–æ–¥": city,
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": random.choice(self.professions),
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": education,
            "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ": family_status,
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π": num_children,
            "–î–æ—Ö–æ–¥": income,
            "–£–≤–ª–µ—á–µ–Ω–∏—è": hobbies,
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å": {
                "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏": financial_literacy,
                "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": financial_products,
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º": {
                    "–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º": bank_trust,
                    "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º": loan_attitude,
                    "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É": risk_attitude,
                    "–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è": financial_behavior
                },
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è": {
                    "–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å": financial_vocabulary,
                    "–ó–∞–±–ª—É–∂–¥–µ–Ω–∏—è": financial_misconceptions
                },
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏": financial_goals,
                "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã": behavior_patterns
            }
        }

        # –£–ª—É—á—à–∞–µ–º –ø–µ—Ä—Å–æ–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏
        enhanced_persona = self.enhanced_respondent.enhance_persona(persona)

        return enhanced_persona

    def load_questions(self, file_data) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞

        Args:
            file_data: –î–∞–Ω–Ω—ã–µ Excel —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        """
        try:
            df = pd.read_excel(file_data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
            if 'question' not in df.columns:
                raise ValueError("–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü 'question'")

            questions = []

            for idx, row in df.iterrows():
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–∞
                question_text = row['question'].lower()
                financial_topic = "–æ–±—â–∏–µ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

                for topic, keywords in self.financial_topic_mapping.items():
                    if any(keyword in question_text for keyword in keywords):
                        financial_topic = topic
                        break

                question = {
                    "id": row.get('id', idx + 1),
                    "text": row['question'],
                    "type": row.get('type', 'open'),
                    "topic": row.get('topic', financial_topic),
                    "options": str(row.get('options', '')).split(',') if pd.notna(row.get('options')) else [],
                    "context": row.get('context', '')
                }
                questions.append(question)

            return questions
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")

    def load_bank_reviews(self, file_data) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ –±–∞–Ω–∫–∞—Ö

        Args:
            file_data: –î–∞–Ω–Ω—ã–µ Excel —Ñ–∞–π–ª–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏

        Returns:
            True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            self.reviews_analyzer.load_reviews(file_data)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            self.prompting_params["prompt_data"] = self.reviews_analyzer.extract_prompting_data()
            self.prompting_params["use_reviews_data"] = True

            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.reviews_analyzer.reviews_data)} –æ—Ç–∑—ã–≤–æ–≤ –æ –±–∞–Ω–∫–∞—Ö")
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤ –æ –±–∞–Ω–∫–∞—Ö: {str(e)}")
            return False

    def _format_persona_for_prompt(self, persona: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç–µ

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–µ
        """
        # –ë–∞–∑–æ–≤–∞—è –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        basic_info = [
            f"–ü–æ–ª: {persona['–ü–æ–ª']}",
            f"–í–æ–∑—Ä–∞—Å—Ç: {persona['–í–æ–∑—Ä–∞—Å—Ç']}",
            f"–ì–æ—Ä–æ–¥: {persona['–ì–æ—Ä–æ–¥']} ({persona['–†–µ–≥–∏–æ–Ω']})",
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {persona['–ü—Ä–æ—Ñ–µ—Å—Å–∏—è']}",
            f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {persona['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']}",
            f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {persona['–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ']}",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: {persona['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π']}",
            f"–î–æ—Ö–æ–¥: {persona['–î–æ—Ö–æ–¥']}"
        ]

        if '–£–≤–ª–µ—á–µ–Ω–∏—è' in persona and persona['–£–≤–ª–µ—á–µ–Ω–∏—è']:
            basic_info.append(f"–£–≤–ª–µ—á–µ–Ω–∏—è: {', '.join(persona['–£–≤–ª–µ—á–µ–Ω–∏—è'])}")

        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        financial_profile = []
        if '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å' in persona:
            fp = persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']

            financial_profile.append(f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏: {fp.get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π')}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            products_used = []
            for product, used in fp.get('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', {}).items():
                if used:
                    products_used.append(product)

            if products_used:
                financial_profile.append(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {', '.join(products_used)}")
            else:
                financial_profile.append("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã")

            # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º
            if '–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º' in fp:
                for key, value in fp['–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º'].items():
                    financial_profile.append(f"{key}: {value}")

            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏
            if '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏' in fp and fp['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏']:
                financial_profile.append(f"–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏: {', '.join(fp['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏'])}")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        formatted_persona = "–ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n" + "\n".join(basic_info)
        formatted_persona += "\n\n–§–ò–ù–ê–ù–°–û–í–´–ô –ü–†–û–§–ò–õ–¨:\n" + "\n".join(financial_profile)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å' in persona and '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã' in persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']:
            patterns = persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã']
            if patterns:
                formatted_persona += "\n\n–ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –ü–ê–¢–¢–ï–†–ù–´:\n" + "\n".join([f"- {p}" for p in patterns])

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if ('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å' in persona and '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è' in persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å'] and
            '–ó–∞–±–ª—É–∂–¥–µ–Ω–∏—è' in persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è']):

            misconceptions = persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è']['–ó–∞–±–ª—É–∂–¥–µ–Ω–∏—è']
            if misconceptions:
                formatted_persona += "\n\n–í–û–ó–ú–û–ñ–ù–´–ï –§–ò–ù–ê–ù–°–û–í–´–ï –ó–ê–ë–õ–£–ñ–î–ï–ù–ò–Ø:\n" + "\n".join([f"- {m}" for m in misconceptions])

        return formatted_persona

    def _generate_enhanced_prompt(self, persona: Dict, question: Dict) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
            question: –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º

        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä—Å–æ–Ω–µ
        persona_str = self._format_persona_for_prompt(persona)

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        literacy_level = persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π')

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        literacy_info = self.knowledge_base.get_literacy_level_info(literacy_level)

        # –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –¥–ª—è —É—Ä–æ–≤–Ω—è
        vocab_examples = persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è', {}).get('–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å', [])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞
        question_topic = question.get('topic', '–æ–±—â–∏–µ')
        if question_topic not in self.financial_topic_mapping:
            question_topic = "–æ–±—â–∏–µ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ –±–∞–Ω–∫–∞—Ö, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        context_from_reviews = ""
        if self.prompting_params["use_reviews_data"]:
            prompt_data = self.prompting_params["prompt_data"]

            relevant_terms = []
            if question_topic in prompt_data.get("categorized_terms", {}):
                relevant_terms = prompt_data["categorized_terms"][question_topic][:5]
            else:
                relevant_terms = prompt_data.get("banking_terms", [])[:5]

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
            relevant_issues = prompt_data.get("common_issues", [])[:3]

            if relevant_terms or relevant_issues:
                context_from_reviews = "\n–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –û–¢–ó–´–í–û–í –ö–õ–ò–ï–ù–¢–û–í –ë–ê–ù–ö–û–í:\n"

                if relevant_terms:
                    context_from_reviews += f"–ß–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {', '.join(relevant_terms)}\n"

                if relevant_issues:
                    context_from_reviews += f"–¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {'; '.join(relevant_issues)}\n"

        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        accuracy_level = literacy_info.get("accuracy", 0.7)
        confidence_level = literacy_info.get("confidence", 0.7)
        detail_level = literacy_info.get("detail_level", 0.5)

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        literacy_instructions = ""

        if literacy_level == "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π":
            literacy_instructions = """
            - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π, –±—ã—Ç–æ–≤–æ–π —è–∑—ã–∫ –±–µ–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
            - –ú–æ–∂–µ—à—å –ø—É—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã
            - –ú–æ–∂–µ—à—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            - –ü—Ä–∏–∑–Ω–∞–≤–∞–π –Ω–µ–∑–Ω–∞–Ω–∏–µ –º–Ω–æ–≥–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ–º
            - –ì–æ–≤–æ—Ä–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–º–Ω–µ –∫–∞–∂–µ—Ç—Å—è", "–Ω–∞—Å–∫–æ–ª—å–∫–æ —è –∑–Ω–∞—é"
            - –ú–æ–∂–µ—à—å –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Å–ª—É—Ö–∏ –∏ –º–Ω–µ–Ω–∏—è –∑–Ω–∞–∫–æ–º—ã—Ö –≤–º–µ—Å—Ç–æ —Ñ–∞–∫—Ç–æ–≤
            - –ù–µ –≤–¥–∞–≤–∞–π—Å—è –≤ –¥–µ—Ç–∞–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            """
        elif literacy_level == "–Ω–∞—á–∏–Ω–∞—é—â–∏–π":
            literacy_instructions = """
            - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ –º–æ–∂–µ—à—å –∏–Ω–æ–≥–¥–∞ –∏—Ö –ø—É—Ç–∞—Ç—å
            - –ú–æ–∂–µ—à—å –∏–º–µ—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            - –ü–æ–∫–∞–∑—ã–≤–∞–π –±–∞–∑–æ–≤–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–µ–±–µ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç –∏ –≤–∫–ª–∞–¥–æ–≤
            - –ú–æ–∂–µ—à—å –≤—ã—Ä–∞–∂–∞—Ç—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
            - –ü—Ä–æ—è–≤–ª—è–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –∫ –Ω–æ–≤—ã–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
            - –û–ø–∏—Ä–∞–π—Å—è –±–æ–ª—å—à–µ –Ω–∞ –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç, —á–µ–º –Ω–∞ –∑–Ω–∞–Ω–∏—è
            - –ò–Ω—Ç–µ—Ä–µ—Å—É–π—Å—è –¥–µ—Ç–∞–ª—è–º–∏, –Ω–æ –Ω–µ –≤—Å–µ –ø–æ–Ω–∏–º–∞–π
            """
        elif literacy_level == "—Å—Ä–µ–¥–Ω–∏–π":
            literacy_instructions = """
            - –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            - –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
            - –ò–º–µ–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö, –≤–∫–ª–∞–¥–∞—Ö, –¥–µ–±–µ—Ç–æ–≤—ã—Ö –∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
            - –ü—Ä–æ—è–≤–ª—è–π —Ä–∞–∑—É–º–Ω—É—é –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
            - –ú–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ª–æ–∂–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º
            - –ì–æ–≤–æ—Ä–∏ —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Ä–∞–º–∫–∞—Ö —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π
            - –ú–æ–∂–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—ã—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            """
        elif literacy_level == "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π":
            literacy_instructions = """
            - –ò—Å–ø–æ–ª—å–∑—É–π –≥—Ä–∞–º–æ—Ç–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
            - –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π —Ö–æ—Ä–æ—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            - –ú–æ–∂–µ—à—å —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            - –ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π
            - –£—á–∏—Ç—ã–≤–∞–π –Ω—é–∞–Ω—Å—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
            - –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
            - –ú–æ–∂–µ—à—å —É–ø–æ–º–∏–Ω–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–∞–Ω–∫–∏ –∏ –∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ã
            """
        elif literacy_level == "—ç–∫—Å–ø–µ—Ä—Ç":
            literacy_instructions = """
            - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
            - –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ä—ã–Ω–∫–æ–≤
            - –ú–æ–∂–µ—à—å –¥–∞–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π
            - –£—á–∏—Ç—ã–≤–∞–π —Ç–æ–Ω–∫–æ—Å—Ç–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö
            - –ì–æ–≤–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ
            - –ú–æ–∂–µ—à—å —É–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ
            - –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏—è–º
            """

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
        base_prompt = f"""–¢—ã —Å–∏–º—É–ª–∏—Ä—É–µ—à—å –æ–±—ã—á–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —É—Å–ª—É–≥–∞—Ö. –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, —Å —É—á–µ—Ç–æ–º —Å–≤–æ–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏ —É—Ä–æ–≤–Ω—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.

–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –†–ï–°–ü–û–ù–î–ï–ù–¢–ê:
{persona_str}
{context_from_reviews}

–í–û–ü–†–û–°:
{question["text"]}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –û–¢–í–ï–¢–£ –í –°–û–û–¢–í–ï–¢–°–¢–í–ò–ò –° –§–ò–ù–ê–ù–°–û–í–û–ô –ì–†–ê–ú–û–¢–ù–û–°–¢–¨–Æ:
{literacy_instructions}

–û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
1. –û—Ç–≤–µ—á–∞–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫
2. –£—á–∏—Ç—ã–≤–∞–π –≤—Å–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å —Ä–µ—á–∏ –∏ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–≤–æ–µ–º—É –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –∏ —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π
4. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –≤ –æ—Ç–≤–µ—Ç–µ
5. –ù–µ —Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ "—ç–∫—Å–ø–µ—Ä—Ç" - –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
6. –¢–≤–æ—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π (—Ç–æ—á–Ω–æ—Å—Ç—å ~{int(accuracy_level*100)}%)
7. –¢–≤–æ—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ~{int(confidence_level*100)}%)
8. –£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–≤–æ–µ–º—É —É—Ä–æ–≤–Ω—é –∑–Ω–∞–Ω–∏–π (–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è ~{int(detail_level*100)}%)
9. –ò—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ
"""

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if vocab_examples:
            base_prompt += f"\n–ü–†–ò–ú–ï–†–´ –§–ò–ù–ê–ù–°–û–í–´–• –¢–ï–†–ú–ò–ù–û–í, –ö–û–¢–û–†–´–ï –¢–´ –ú–û–ñ–ï–®–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:\n{', '.join(vocab_examples)}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä–∞—Å–∞ –æ—Ç–≤–µ—Ç–∞
        behavior = persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º', {}).get('–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è', '–ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π')

        if behavior == "–∏–∑–±–µ–≥–∞—é—â–∏–π —Ä–∏—Å–∫–∞":
            base_prompt += "\n–í —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –ø—Ä–æ—è–≤–ª—è–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º."
        elif behavior == "–∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π":
            base_prompt += "\n–í —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –º–æ–∂–µ—à—å –ø—Ä–æ—è–≤–ª—è—Ç—å —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
        elif behavior == "—Å—Ç–∞—Ç—É—Å–Ω—ã–π":
            base_prompt += "\n–í —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ –º–æ–∂–µ—à—å —É–ø–æ–º–∏–Ω–∞—Ç—å –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–µ –∏–ª–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."

        base_prompt += "\n\n–û–¢–í–ï–¢ –û–¢ –õ–ò–¶–ê –†–ï–°–ü–û–ù–î–ï–ù–¢–ê:"

        return base_prompt

    def generate_answer(self, persona: Dict, question: Dict,
                        model: str = None, api_preference: str = None,
                        temperature: Optional[float] = None,
                        _enhanced_prompt: Optional[str] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ API

        Args:
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
            question: –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º
            model: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            api_preference: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ API ('claude' –∏–ª–∏ 'openai')
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            _enhanced_prompt: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)

        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤
        cache_key = f"{json.dumps(persona, sort_keys=True)}_{json.dumps(question, sort_keys=True)}_{model}_{api_preference}_{temperature}"

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if cache_key in self.response_cache:
            return self.response_cache[cache_key]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        if _enhanced_prompt:
            prompt = _enhanced_prompt
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ EnhancedFinancialRespondent
            prompt = self.enhanced_respondent.generate_enhanced_prompt(persona, question)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        literacy_level = persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {}).get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ
        if temperature is None:
            literacy_levels = ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "—ç–∫—Å–ø–µ—Ä—Ç"]
            literacy_index = literacy_levels.index(literacy_level) if literacy_level in literacy_levels else 2

            # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
            # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∞—è –¥–ª—è –Ω–∏–∑–∫–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
            temperature = self.prompting_params["temperature_max"] - (literacy_index * 0.1)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            temperature = min(1.0, max(0.1, temperature + random.uniform(-0.1, 0.1)))

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º 0.0-1.0 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
        temperature = min(1.0, max(0.0, temperature))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ API –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        use_claude = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Claude, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω

        if api_preference == "openai" and self.client_openai:
            use_claude = False
        elif api_preference == "claude" and self.client_claude:
            use_claude = True
        elif self.client_claude is None and self.client_openai:
            use_claude = False

        max_retries = 3
        result = None

        for retry in range(max_retries):
            try:
                if use_claude:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude API
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å Claude
                    claude_model = model if model in self.claude_models else self.claude_models[0]

                    response = self.client_claude.messages.create(
                        model=claude_model,
                        max_tokens=self.prompting_params["max_tokens"],
                        temperature=temperature,
                        messages=[{"role": "user", "content": prompt}]
                    )

                    result = response.content[0].text

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
                    if hasattr(response, 'usage') and response.usage:
                        self.tokens_used["claude"] += response.usage.input_tokens + response.usage.output_tokens
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI API
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å OpenAI
                    openai_model = model if model in self.openai_models else self.openai_models[0]

                    response = self.client_openai.chat.completions.create(
                        model=openai_model,
                        max_tokens=self.prompting_params["max_tokens"],
                        temperature=temperature,
                        messages=[{"role": "user", "content": prompt}]
                    )

                    result = response.choices[0].message.content

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
                    if hasattr(response, 'usage') and response.usage:
                        self.tokens_used["openai"] += response.usage.prompt_tokens + response.usage.completion_tokens

                # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                self.response_cache[cache_key] = result

                return result

            except Exception as e:
                if retry < max_retries - 1:
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    wait_time = 2 ** retry
                    st.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)

                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å API Claude, –ø–æ–ø—Ä–æ–±—É–µ–º OpenAI, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
                    if use_claude and self.client_openai:
                        use_claude = False
                        st.warning(f"–û—à–∏–±–∫–∞ —Å Claude API, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI: {str(e)}")
                    elif not use_claude and self.client_claude:
                        use_claude = True
                        st.warning(f"–û—à–∏–±–∫–∞ —Å OpenAI API, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Claude: {str(e)}")
                else:
                    error_msg = f"""
                    –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.
                    –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏: {str(e)}

                    –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                    1. –ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á
                    2. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                    3. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞

                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
                    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API-–∫–ª—é—á–∞
                    - –ù–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É
                    - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ API
                    """
                    return error_msg

        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫."

    def generate_realistic_answer(self, persona_id: str, persona: Dict, question: Dict,
                                 question_index: int = 0, **kwargs) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤

        Args:
            persona_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω—ã
            persona: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
            question: –°–ª–æ–≤–∞—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º
            question_index: –ò–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ generate_answer

        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        return self.enhanced_respondent.generate_realistic_answer(
            persona_id, persona, question, question_index, **kwargs
        )

    def run_generation_batch(self, personas, questions, max_workers=3, api_preference=None, use_enhanced=True):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º

        Args:
            personas: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–º–∏
            questions: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            api_preference: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ API ('claude' –∏–ª–∏ 'openai')
            use_enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏
        """
        all_answers = []
        total_items = len(personas) * len(questions)
        completed = 0

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ Streamlit
        progress_bar = st.progress(0)
        status_text = st.empty()
        status_text.text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤: 0%")

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        def generate_one_answer(args):
            i, persona, j, question, question_idx = args
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
                if use_enhanced:
                    answer_text = self.generate_realistic_answer(
                        str(i), persona, question, question_idx,
                        api_preference=api_preference
                    )
                else:
                    answer_text = self.generate_answer(
                        persona, question, api_preference=api_preference
                    )

                answer = {
                    "id": i * len(questions) + j + 1,
                    "persona_id": i + 1,
                    "question": question,
                    "text": answer_text,
                    "timestamp": datetime.now().isoformat()
                }

                return answer, 1
            except Exception as e:
                error_answer = {
                    "id": i * len(questions) + j + 1,
                    "persona_id": i + 1,
                    "question": question,
                    "text": f"–û–®–ò–ë–ö–ê: {str(e)}",
                    "timestamp": datetime.now().isoformat(),
                    "error": True
                }
                return error_answer, 1

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        tasks = []
        for i, persona in enumerate(personas):
            for j, question in enumerate(questions):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —É—Å—Ç–∞–ª–æ—Å—Ç–∏
                question_idx = j
                tasks.append((i, persona, j, question, question_idx))

        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            future_to_task = {executor.submit(generate_one_answer, task): task for task in tasks}

            for future in concurrent.futures.as_completed(future_to_task):
                answer, progress_increment = future.result()
                all_answers.append(answer)

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                completed += progress_increment
                progress_percentage = completed/total_items
                progress_bar.progress(progress_percentage)
                status_text.text(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {int(progress_percentage*100)}%")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ ID
        all_answers.sort(key=lambda x: x["id"])

        return all_answers

    def analyze_results(self, personas: List[Dict], questions: List[Dict], answers: List[Dict]) -> Dict:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞

        Args:
            personas: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–º–∏
            questions: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            answers: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—á–µ—Ç–æ–º
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report = {
                "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": {
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤": len(personas),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤": len(questions),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤": len(answers),
                    "API —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (Claude)": self.tokens_used["claude"],
                    "API —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (OpenAI)": self.tokens_used["openai"]
                },
                "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤": {
                    "–ü–æ–ª": {},
                    "–í–æ–∑—Ä–∞—Å—Ç": {
                        "–°—Ä–µ–¥–Ω–∏–π": float(np.mean([p["–í–æ–∑—Ä–∞—Å—Ç"] for p in personas])),
                        "–ú–µ–¥–∏–∞–Ω–Ω—ã–π": float(np.median([p["–í–æ–∑—Ä–∞—Å—Ç"] for p in personas])),
                        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π": int(min([p["–í–æ–∑—Ä–∞—Å—Ç"] for p in personas])),
                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π": int(max([p["–í–æ–∑—Ä–∞—Å—Ç"] for p in personas]))
                    },
                    "–†–µ–≥–∏–æ–Ω—ã": {},
                    "–ì–æ—Ä–æ–¥–∞": {},
                    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–∏": {},
                    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": {},
                    "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ": {},
                    "–î–æ—Ö–æ–¥": {},
                    "–î–µ—Ç–∏": {
                        "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": float(np.mean([p.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", 0) for p in personas])),
                        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": {}
                    }
                },
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": {
                    "–£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏": {},
                    "–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º": {},
                    "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º": {},
                    "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É": {},
                    "–ú–æ–¥–µ–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è": {},
                    "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": {}
                },
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤": [],
                "–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö": {
                    "–û—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏": sum(1 for a in answers if a.get("error", False)),
                    "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å": float((len(answers) - sum(1 for a in answers if a.get("error", False))) / len(answers) * 100) if answers else 0
                }
            }

            # –ü–æ–¥—Å—á–µ—Ç –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            for key in ["–ü–æ–ª", "–†–µ–≥–∏–æ–Ω", "–ì–æ—Ä–æ–¥", "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", "–î–æ—Ö–æ–¥"]:
                value_counts = pd.Series([p.get(key, "–ù–µ —É–∫–∞–∑–∞–Ω–æ") for p in personas]).value_counts()
                report["–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤"][key if key != "–ì–æ—Ä–æ–¥" else "–ì–æ—Ä–æ–¥–∞"] = {
                    str(k): int(v) for k, v in value_counts.items()
                }

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ—Ç–µ–π
            children_counts = pd.Series([p.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π", 0) for p in personas]).value_counts()
            report["–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤"]["–î–µ—Ç–∏"]["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"] = {
                str(k): int(v) for k, v in children_counts.items()
            }

            # –ü–æ–¥—Å—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            literacy_counts = pd.Series([
                p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", "—Å—Ä–µ–¥–Ω–∏–π")
                for p in personas
            ]).value_counts()

            report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"] = {
                str(k): int(v) for k, v in literacy_counts.items()
            }

            trust_counts = pd.Series([
                p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", {}).get("–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º", "—Å—Ä–µ–¥–Ω–µ–µ")
                for p in personas
            ]).value_counts()

            report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º"] = {
                str(k): int(v) for k, v in trust_counts.items()
            }

            loan_counts = pd.Series([
                p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ")
                for p in personas
            ]).value_counts()

            report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º"] = {
                str(k): int(v) for k, v in loan_counts.items()
            }

            risk_counts = pd.Series([
                p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É", "—É–º–µ—Ä–µ–Ω–Ω—ã–π")
                for p in personas
            ]).value_counts()

            report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É"] = {
                str(k): int(v) for k, v in risk_counts.items()
            }

            behavior_counts = pd.Series([
                p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", {}).get("–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è", "–ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π")
                for p in personas
            ]).value_counts()

            report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–ú–æ–¥–µ–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"] = {
                str(k): int(v) for k, v in behavior_counts.items()
            }

            # –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            products_usage = {}
            for persona in personas:
                fp = persona.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {})
                products = fp.get("–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", {})

                for product, used in products.items():
                    if product not in products_usage:
                        products_usage[product] = {"–ò—Å–ø–æ–ª—å–∑—É—é—Ç": 0, "–ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç": 0}

                    if used:
                        products_usage[product]["–ò—Å–ø–æ–ª—å–∑—É—é—Ç"] += 1
                    else:
                        products_usage[product]["–ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç"] += 1

            report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"] = products_usage

            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            for question in questions:
                question_answers = [
                    ans for ans in answers
                    if ans["question"]["id"] == question["id"] and not ans.get("error", False)
                ]

                question_analysis = {
                    "–í–æ–ø—Ä–æ—Å": question["text"],
                    "–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞": question["type"],
                    "–¢–µ–º–∞": question.get("topic", "–æ–±—â–∏–µ"),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤": len(question_answers),
                    "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–∏–º–≤–æ–ª—ã)": int(np.mean([len(a["text"]) for a in question_answers]) if question_answers else 0),
                    "–ú–µ–¥–∏–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞": int(np.median([len(a["text"]) for a in question_answers]) if question_answers else 0)
                }

                # –ê–Ω–∞–ª–∏–∑ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                if question["type"] in ["single", "multiple"] and question["options"]:
                    option_counts = {}
                    for option in question["options"]:
                        option = option.strip()
                        if not option:
                            continue
                        count = sum(1 for a in question_answers if option.lower() in a["text"].lower())
                        option_counts[option] = count

                    question_analysis["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤"] = option_counts

                report["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"].append(question_analysis)

            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ - –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
            if answers:
                try:
                    # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
                    word_counts = [len(a["text"].split()) for a in answers if not a.get("error", False)]
                    report["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞"] = {
                        "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–ª–æ–≤–∞)": float(np.mean(word_counts)) if word_counts else 0,
                        "–ú–µ–¥–∏–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–ª–æ–≤–∞)": float(np.median(word_counts)) if word_counts else 0,
                        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–ª–æ–≤–∞)": max(word_counts) if word_counts else 0,
                        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–ª–æ–≤–∞)": min(word_counts) if word_counts else 0
                    }
                except Exception as e:
                    st.warning(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")

            return report
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": {
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤": len(personas),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤": len(questions),
                    "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞": str(e)
                }
            }

    def export_to_excel(self, personas: List[Dict], questions: List[Dict], answers: List[Dict]) -> io.BytesIO:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Ñ–∞–π–ª

        Args:
            personas: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–º–∏
            questions: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            answers: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏

        Returns:
            io.BytesIO —Å Excel —Ñ–∞–π–ª–æ–º
        """
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Ç–≤–µ—Ç–∞–º–∏
            data = []

            for answer in answers:
                persona_id = answer["persona_id"]
                persona = personas[persona_id-1]
                question = answer["question"]

                row = {
                    "–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç_ID": persona_id,
                    "–í–æ–ø—Ä–æ—Å_ID": question["id"],
                    "–í–æ–ø—Ä–æ—Å": question["text"],
                    "–¢–∏–ø_–≤–æ–ø—Ä–æ—Å–∞": question.get("type", "open"),
                    "–¢–µ–º–∞_–≤–æ–ø—Ä–æ—Å–∞": question.get("topic", "–æ–±—â–∏–µ"),
                    "–û—Ç–≤–µ—Ç": answer["text"][:32767] if len(answer["text"]) > 32767 else answer["text"],
                    "–î–∞—Ç–∞_–≤—Ä–µ–º—è": answer["timestamp"],
                    "–û—à–∏–±–∫–∞": answer.get("error", False)
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ persona
                for key, value in persona.items():
                    if key != "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å" and key != "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å" and key != "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
                        if isinstance(value, list):
                            row[f"–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç_{key}"] = ", ".join(str(v) for v in value)
                        else:
                            row[f"–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç_{key}"] = value

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                if "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å" in persona:
                    fp = persona["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"]

                    # –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
                    row["–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è_–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"] = fp.get("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", "—Å—Ä–µ–¥–Ω–∏–π")

                    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º
                    if "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º" in fp:
                        for key, value in fp["–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º"].items():
                            row[f"–§–∏–Ω–∞–Ω—Å—ã_{key.replace(' ', '_')}"] = value

                data.append(row)

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π DataFrame —Å –æ—Ç–≤–µ—Ç–∞–º–∏
            answers_df = pd.DataFrame(data)

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
            personas_data = []
            for i, p in enumerate(personas):
                row = {"ID": i+1}

                # –ë–∞–∑–æ–≤—ã–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                for key, value in p.items():
                    if key != "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å" and key != "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å" and key != "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
                        if isinstance(value, list):
                            row[key] = ", ".join(str(v) for v in value)
                        else:
                            row[key] = value

                # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                if "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å" in p:
                    fp = p["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"]

                    # –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
                    row["–£—Ä–æ–≤–µ–Ω—å_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π_–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"] = fp.get("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", "—Å—Ä–µ–¥–Ω–∏–π")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                    if "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" in fp:
                        for product, used in fp["–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"].items():
                            row[f"–ü—Ä–æ–¥—É–∫—Ç_{product.replace(' ', '_')}"] = "–î–∞" if used else "–ù–µ—Ç"

                    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º
                    if "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º" in fp:
                        for key, value in fp["–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º"].items():
                            row[f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ_{key.replace(' ', '_')}"] = value

                personas_data.append(row)

            personas_df = pd.DataFrame(personas_data)

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
            questions_df = pd.DataFrame([
                {
                    "ID": q["id"],
                    "–í–æ–ø—Ä–æ—Å": q["text"],
                    "–¢–∏–ø": q["type"],
                    "–¢–µ–º–∞": q.get("topic", "–æ–±—â–∏–µ"),
                    "–í–∞—Ä–∏–∞–Ω—Ç—ã_–æ—Ç–≤–µ—Ç–æ–≤": ", ".join(q["options"]) if q.get("options") else "",
                    "–ö–æ–Ω—Ç–µ–∫—Å—Ç": q.get("context", "")
                } for q in questions
            ])

            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º
            wide_data = []

            for i, persona in enumerate(personas):
                row = {"–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç_ID": i+1}

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
                for key, value in persona.items():
                    if key != "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å" and key != "–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å" and key != "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
                        if isinstance(value, list):
                            row[key] = ", ".join(str(v) for v in value)
                        else:
                            row[key] = value

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                if "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å" in persona:
                    fp = persona["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"]

                    # –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
                    row["–£—Ä–æ–≤–µ–Ω—å_—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π_–≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"] = fp.get("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", "—Å—Ä–µ–¥–Ω–∏–π")

                    # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º
                    if "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º" in fp:
                        for key, value in fp["–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º"].items():
                            row[f"–û—Ç–Ω–æ—à–µ–Ω–∏–µ_{key.replace(' ', '_')}"] = value

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
                for question in questions:
                    question_id = question["id"]

                    # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç —ç—Ç–æ–≥–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
                    answer_obj = next(
                        (a for a in answers if a["persona_id"] == i+1 and a["question"]["id"] == question_id),
                        None
                    )

                    if answer_obj and not answer_obj.get("error", False):
                        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è Excel –Ω–∞ –¥–ª–∏–Ω—É —è—á–µ–π–∫–∏
                        answer_text = answer_obj["text"]
                        if len(answer_text) > 32767:
                            answer_text = answer_text[:32764] + "..."
                        row[f"–í–æ–ø—Ä–æ—Å_{question_id}"] = answer_text
                    else:
                        row[f"–í–æ–ø—Ä–æ—Å_{question_id}"] = ""

                wide_data.append(row)

            wide_df = pd.DataFrame(wide_data)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.analyze_results(personas, questions, answers)

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_data = []

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            analytics_data.append(["–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê", "", ""])
            for key, value in report["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"].items():
                analytics_data.append([key, value, ""])
            analytics_data.append(["", "", ""])

            # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            analytics_data.append(["–î–ï–ú–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ô –°–û–°–¢–ê–í", "", ""])
            analytics_data.append(["", "", ""])

            # –ü–æ–ª
            analytics_data.append(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É", "", ""])
            for gender, count in report["–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤"]["–ü–æ–ª"].items():
                analytics_data.append([gender, int(count), f"{float(count)/len(personas)*100:.1f}%"])
            analytics_data.append(["", "", ""])

            # –í–æ–∑—Ä–∞—Å—Ç
            analytics_data.append(["–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "", ""])
            age_stats = report["–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤"]["–í–æ–∑—Ä–∞—Å—Ç"]
            analytics_data.append(["–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç", f"{age_stats['–°—Ä–µ–¥–Ω–∏–π']:.1f}", ""])
            analytics_data.append(["–ú–µ–¥–∏–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", f"{age_stats['–ú–µ–¥–∏–∞–Ω–Ω—ã–π']:.1f}", ""])
            analytics_data.append(["–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", int(age_stats['–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π']), ""])
            analytics_data.append(["–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç", int(age_stats['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π']), ""])
            analytics_data.append(["", "", ""])

            # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å
            analytics_data.append(["–§–ò–ù–ê–ù–°–û–í–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò", "", ""])
            analytics_data.append(["", "", ""])

            # –£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
            analytics_data.append(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", "", ""])
            for level, count in report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"].items():
                analytics_data.append([level, int(count), f"{float(count)/len(personas)*100:.1f}%"])
            analytics_data.append(["", "", ""])

            # –î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º
            analytics_data.append(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ–≤–µ—Ä–∏—è –∫ –±–∞–Ω–∫–∞–º", "", ""])
            for trust, count in report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º"].items():
                analytics_data.append([trust, int(count), f"{float(count)/len(personas)*100:.1f}%"])
            analytics_data.append(["", "", ""])

            # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º
            analytics_data.append(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –∫—Ä–µ–¥–∏—Ç–∞–º", "", ""])
            for attitude, count in report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º"].items():
                analytics_data.append([attitude, int(count), f"{float(count)/len(personas)*100:.1f}%"])
            analytics_data.append(["", "", ""])

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_df = pd.DataFrame(analytics_data)

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            question_analysis_data = []
            question_analysis_data.append(["–ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–û–í –ù–ê –í–û–ü–†–û–°–´", "", "", ""])
            question_analysis_data.append(["–í–æ–ø—Ä–æ—Å", "–¢–µ–º–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤", "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ (—Å–∏–º–≤–æ–ª—ã)"])

            for qa in report["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"]:
                question_analysis_data.append([
                    qa["–í–æ–ø—Ä–æ—Å"],
                    qa.get("–¢–µ–º–∞", "–æ–±—â–∏–µ"),
                    qa["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤"],
                    qa.get("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–∏–º–≤–æ–ª—ã)", 0)
                ])

            question_analysis_df = pd.DataFrame(question_analysis_data)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç–∏
            output = io.BytesIO()

            # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –æ–¥–∏–Ω Excel —Ñ–∞–π–ª
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                wide_df.to_excel(writer, sheet_name='–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã_–∏_–æ—Ç–≤–µ—Ç—ã', index=False)
                answers_df.to_excel(writer, sheet_name='–í—Å–µ_–æ—Ç–≤–µ—Ç—ã', index=False)
                personas_df.to_excel(writer, sheet_name='–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã', index=False)
                questions_df.to_excel(writer, sheet_name='–í–æ–ø—Ä–æ—Å—ã', index=False)
                analytics_df.to_excel(writer, sheet_name='–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è', index=False, header=False)
                question_analysis_df.to_excel(writer, sheet_name='–ê–Ω–∞–ª–∏–∑_–≤–æ–ø—Ä–æ—Å–æ–≤', index=False, header=False)

            # –°–±—Ä–æ—Å —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
            output.seek(0)
            return output
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {str(e)}")

    def export_to_json(self, personas: List[Dict], questions: List[Dict], answers: List[Dict]) -> io.BytesIO:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª

        Args:
            personas: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–º–∏
            questions: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            answers: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏

        Returns:
            io.BytesIO —Å JSON —Ñ–∞–π–ª–æ–º
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.analyze_results(personas, questions, answers)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            result = {
                "personas": personas,
                "questions": questions,
                "answers": answers,
                "report": report,
                "generated_at": datetime.now().isoformat(),
                "settings": {
                    "api_key_claude": "***–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–û***",
                    "api_key_openai": "***–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–û***" if self.api_key_openai else None,
                }
            }

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
            output = io.BytesIO()
            output.write(json.dumps(result, ensure_ascii=False, indent=2, cls=NumpyEncoder).encode('utf-8'))
            output.seek(0)
            return output
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ JSON: {str(e)}")

    def visualize_demographics(self, personas) -> plt.Figure:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

        Args:
            personas: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–º–∏

        Returns:
            matplotlib Figure —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –ø–µ—Ä—Å–æ–Ω
        persona_df = pd.DataFrame([
            {
                "–ü–æ–ª": p["–ü–æ–ª"],
                "–í–æ–∑—Ä–∞—Å—Ç": p["–í–æ–∑—Ä–∞—Å—Ç"],
                "–†–µ–≥–∏–æ–Ω": p["–†–µ–≥–∏–æ–Ω"],
                "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": p["–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"],
                "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏": p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", "—Å—Ä–µ–¥–Ω–∏–π"),
                "–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º": p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", {}).get("–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º", "—Å—Ä–µ–¥–Ω–µ–µ"),
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º": p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"),
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É": p.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º", {}).get("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É", "—É–º–µ—Ä–µ–Ω–Ω—ã–π")
            }
            for p in personas
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('–î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤', fontsize=16)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É
        gender_counts = persona_df['–ü–æ–ª'].value_counts()
        axes[0, 0].pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=90)
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É')

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        sns.histplot(persona_df['–í–æ–∑—Ä–∞—Å—Ç'], kde=True, ax=axes[0, 1])
        axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É')
        axes[0, 1].set_xlabel('–í–æ–∑—Ä–∞—Å—Ç')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        region_counts = persona_df['–†–µ–≥–∏–æ–Ω'].value_counts().head(8)
        sns.barplot(x=region_counts.index, y=region_counts.values, ax=axes[0, 2])
        axes[0, 2].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (—Ç–æ–ø 8)')
        axes[0, 2].set_xlabel('–†–µ–≥–∏–æ–Ω')
        axes[0, 2].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[0, 2].tick_params(axis='x', rotation=45)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
        literacy_counts = persona_df['–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏'].value_counts()
        sorted_literacy = pd.Series(
            [literacy_counts.get(level, 0) for level in ['–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π', '–Ω–∞—á–∏–Ω–∞—é—â–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '—ç–∫—Å–ø–µ—Ä—Ç']],
            index=['–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π', '–Ω–∞—á–∏–Ω–∞—é—â–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '—ç–∫—Å–ø–µ—Ä—Ç']
        )
        sns.barplot(x=sorted_literacy.index, y=sorted_literacy.values, ax=axes[1, 0])
        axes[1, 0].set_title('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏')
        axes[1, 0].set_xlabel('–£—Ä–æ–≤–µ–Ω—å')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[1, 0].tick_params(axis='x', rotation=45)

        # –î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º
        trust_counts = persona_df['–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º'].value_counts()
        sorted_trust = pd.Series(
            [trust_counts.get(level, 0) for level in ['–Ω–∏–∑–∫–æ–µ', '—Å—Ä–µ–¥–Ω–µ–µ', '–≤—ã—Å–æ–∫–æ–µ']],
            index=['–Ω–∏–∑–∫–æ–µ', '—Å—Ä–µ–¥–Ω–µ–µ', '–≤—ã—Å–æ–∫–æ–µ']
        )
        sns.barplot(x=sorted_trust.index, y=sorted_trust.values, ax=axes[1, 1])
        axes[1, 1].set_title('–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º')
        axes[1, 1].set_xlabel('–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è')
        axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

        # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º
        loan_counts = persona_df['–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º'].value_counts()
        sorted_loan = pd.Series(
            [loan_counts.get(level, 0) for level in ['–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ', '–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ']],
            index=['–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ', '–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ']
        )
        sns.barplot(x=sorted_loan.index, y=sorted_loan.values, ax=axes[1, 2])
        axes[1, 2].set_title('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º')
        axes[1, 2].set_xlabel('–û—Ç–Ω–æ—à–µ–Ω–∏–µ')
        axes[1, 2].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        plt.tight_layout(rect=[0, 0, 1, 0.96])

        return fig

def run_generation_pipeline(api_key_claude, api_key_openai, questions_file, personas, output_format='json',
                           max_workers=3, api_preference=None, visualize=True,
                           reviews_file=None, use_enhanced=True):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏

    Args:
        api_key_claude: API –∫–ª—é—á –¥–ª—è Anthropic Claude
        api_key_openai: API –∫–ª—é—á –¥–ª—è OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        questions_file: –î–∞–Ω–Ω—ã–µ Excel —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        personas: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–µ—Ä—Å–æ–Ω–∞–º–∏
        output_format: 'json' –∏–ª–∏ 'excel'
        max_workers: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        api_preference: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ API ('claude' –∏–ª–∏ 'openai')
        visualize: –°–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        reviews_file: –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        use_enhanced: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏

    Returns:
        Tuple (–†–µ–∑—É–ª—å—Ç–∞—Ç—ã, –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        marketplace = RespondentsMarketplace(api_key_claude, api_key_openai)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions = marketplace.load_questions(questions_file)

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        if reviews_file:
            marketplace.load_bank_reviews(reviews_file)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        st.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è {len(personas)} —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –Ω–∞ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤...")
        all_answers = marketplace.run_generation_batch(
            personas, questions, max_workers=max_workers,
            api_preference=api_preference, use_enhanced=use_enhanced
        )

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = marketplace.analyze_results(personas, questions, all_answers)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ
        download_data = None
        if output_format == 'excel':
            download_data = marketplace.export_to_excel(personas, questions, all_answers)
            file_ext = '.xlsx'
        else:
            download_data = marketplace.export_to_json(personas, questions, all_answers)
            file_ext = '.json'

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig = None
        if visualize:
            fig = marketplace.visualize_demographics(personas)

        results = {
            "personas": personas,
            "questions": questions,
            "answers": all_answers,
            "report": report,
            "fig": fig,
            "file_ext": file_ext
        }

        return results, download_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        raise e

def save_uploaded_config(config_data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏ Streamlit"""
    st.session_state['saved_config'] = config_data

def load_saved_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ Streamlit"""
    if 'saved_config' in st.session_state:
        return st.session_state['saved_config']
    return None

def display_persona_editor(persona_id, marketplace, initial_persona=None):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –≤ Streamlit

    Args:
        persona_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã
        marketplace: –≠–∫–∑–µ–º–ø–ª—è—Ä RespondentsMarketplace
        initial_persona: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω—ã

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω—ã
    """
    if initial_persona is None:
        initial_persona = marketplace.generate_persona()

    st.markdown(f"### –†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç #{persona_id}")

    cols_main = st.columns(2)

    with cols_main[0]:
        with st.expander("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", expanded=True):
            gender = st.selectbox(
                "–ü–æ–ª:",
                options=['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'],
                index=0 if initial_persona['–ü–æ–ª'] == '–ú—É–∂—Å–∫–æ–π' else 1,
                key=f"gender_{persona_id}"
            )

            age = st.slider(
                "–í–æ–∑—Ä–∞—Å—Ç:",
                min_value=18,
                max_value=80,
                value=initial_persona['–í–æ–∑—Ä–∞—Å—Ç'],
                key=f"age_{persona_id}"
            )

            region = st.selectbox(
                "–†–µ–≥–∏–æ–Ω:",
                options=marketplace.regions,
                index=marketplace.regions.index(initial_persona['–†–µ–≥–∏–æ–Ω']) if initial_persona['–†–µ–≥–∏–æ–Ω'] in marketplace.regions else 0,
                key=f"region_{persona_id}"
            )

            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–∏–æ–Ω–∞
            cities = marketplace.cities.get(region, ["–ù–µ —É–∫–∞–∑–∞–Ω"])
            city_index = cities.index(initial_persona['–ì–æ—Ä–æ–¥']) if initial_persona['–ì–æ—Ä–æ–¥'] in cities else 0
            city = st.selectbox(
                "–ì–æ—Ä–æ–¥:",
                options=cities,
                index=city_index,
                key=f"city_{persona_id}"
            )

            profession = st.selectbox(
                "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:",
                options=marketplace.professions,
                index=marketplace.professions.index(initial_persona['–ü—Ä–æ—Ñ–µ—Å—Å–∏—è']) if initial_persona['–ü—Ä–æ—Ñ–µ—Å—Å–∏—è'] in marketplace.professions else 0,
                key=f"profession_{persona_id}"
            )

            education = st.selectbox(
                "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:",
                options=marketplace.education_levels,
                index=marketplace.education_levels.index(initial_persona['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']) if initial_persona['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'] in marketplace.education_levels else 0,
                key=f"education_{persona_id}"
            )

            family_status = st.selectbox(
                "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
                options=marketplace.family_statuses,
                index=marketplace.family_statuses.index(initial_persona['–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ']) if initial_persona['–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ'] in marketplace.family_statuses else 0,
                key=f"family_status_{persona_id}"
            )

            income = st.selectbox(
                "–î–æ—Ö–æ–¥:",
                options=marketplace.income_brackets,
                index=marketplace.income_brackets.index(initial_persona['–î–æ—Ö–æ–¥']) if initial_persona['–î–æ—Ö–æ–¥'] in marketplace.income_brackets else 0,
                key=f"income_{persona_id}"
            )

            children = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:",
                min_value=0,
                max_value=8,
                value=initial_persona['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π'],
                key=f"children_{persona_id}"
            )

            hobbies = st.multiselect(
                "–£–≤–ª–µ—á–µ–Ω–∏—è:",
                options=marketplace.hobby_options,
                default=initial_persona['–£–≤–ª–µ—á–µ–Ω–∏—è'],
                key=f"hobbies_{persona_id}"
            )

    with cols_main[1]:
        with st.expander("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", expanded=True):
            fin_profile = initial_persona.get('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å', {})

            literacy_level = st.selectbox(
                "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:",
                options=marketplace.financial_literacy_levels,
                index=marketplace.financial_literacy_levels.index(fin_profile.get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π')) if fin_profile.get('–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏', '—Å—Ä–µ–¥–Ω–∏–π') in marketplace.financial_literacy_levels else 2,
                key=f"literacy_{persona_id}"
            )

            st.markdown("**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**")

            used_products = fin_profile.get('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', {})
            fin_products = {}

            cols_products = st.columns(2)
            with cols_products[0]:
                fin_products["–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞"] = st.checkbox(
                    "–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞",
                    value=used_products.get("–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞", False),
                    key=f"debit_card_{persona_id}"
                )
                fin_products["–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞"] = st.checkbox(
                    "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞",
                    value=used_products.get("–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", False),
                    key=f"credit_card_{persona_id}"
                )
                fin_products["–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç"] = st.checkbox(
                    "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç",
                    value=used_products.get("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç", False),
                    key=f"loan_{persona_id}"
                )
                fin_products["–ò–ø–æ—Ç–µ–∫–∞"] = st.checkbox(
                    "–ò–ø–æ—Ç–µ–∫–∞",
                    value=used_products.get("–ò–ø–æ—Ç–µ–∫–∞", False),
                    key=f"mortgage_{persona_id}"
                )

            with cols_products[1]:
                fin_products["–í–∫–ª–∞–¥"] = st.checkbox(
                    "–í–∫–ª–∞–¥",
                    value=used_products.get("–í–∫–ª–∞–¥", False),
                    key=f"deposit_{persona_id}"
                )
                fin_products["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"] = st.checkbox(
                    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
                    value=used_products.get("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", False),
                    key=f"investments_{persona_id}"
                )
                fin_products["–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"] = st.checkbox(
                    "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ",
                    value=used_products.get("–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", False),
                    key=f"insurance_{persona_id}"
                )

            st.markdown("**–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º:**")

            fin_attitudes = fin_profile.get('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º', {})

            bank_trust = st.selectbox(
                "–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º:",
                options=marketplace.bank_trust_levels,
                index=marketplace.bank_trust_levels.index(fin_attitudes.get('–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º', '—Å—Ä–µ–¥–Ω–µ–µ')) if fin_attitudes.get('–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º', '—Å—Ä–µ–¥–Ω–µ–µ') in marketplace.bank_trust_levels else 1,
                key=f"trust_{persona_id}"
            )

            loan_attitude = st.selectbox(
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º:",
                options=marketplace.loan_attitudes,
                index=marketplace.loan_attitudes.index(fin_attitudes.get('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ')) if fin_attitudes.get('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ') in marketplace.loan_attitudes else 1,
                key=f"loan_attitude_{persona_id}"
            )

            risk_attitude = st.selectbox(
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É:",
                options=marketplace.risk_attitudes,
                index=marketplace.risk_attitudes.index(fin_attitudes.get('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É', '—É–º–µ—Ä–µ–Ω–Ω—ã–π')) if fin_attitudes.get('–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É', '—É–º–µ—Ä–µ–Ω–Ω—ã–π') in marketplace.risk_attitudes else 1,
                key=f"risk_{persona_id}"
            )

            financial_behavior = st.selectbox(
                "–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è:",
                options=marketplace.financial_behaviors,
                index=marketplace.financial_behaviors.index(fin_attitudes.get('–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è', '–ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π')) if fin_attitudes.get('–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è', '–ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π') in marketplace.financial_behaviors else 2,
                key=f"behavior_{persona_id}"
            )

    if st.button("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", key=f"randomize_{persona_id}"):
        st.experimental_rerun()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º rerun –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω—ã
    persona = {
        "–ü–æ–ª": gender,
        "–í–æ–∑—Ä–∞—Å—Ç": age,
        "–†–µ–≥–∏–æ–Ω": region,
        "–ì–æ—Ä–æ–¥": city,
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": profession,
        "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": education,
        "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ": family_status,
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π": children,
        "–î–æ—Ö–æ–¥": income,
        "–£–≤–ª–µ—á–µ–Ω–∏—è": hobbies,
        "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å": {
            "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏": literacy_level,
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": fin_products,
            "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º": {
                "–î–æ–≤–µ—Ä–∏–µ –∫ –±–∞–Ω–∫–∞–º": bank_trust,
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∫—Ä–µ–¥–∏—Ç–∞–º": loan_attitude,
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä–∏—Å–∫—É": risk_attitude,
                "–ú–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è": financial_behavior
            }
        }
    }

    # –î–æ–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è' in fin_profile:
        persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è'] = fin_profile['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è']
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è'] = {
            "–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å": marketplace.knowledge_base.get_vocabulary_for_level(literacy_level, 15),
            "–ó–∞–±–ª—É–∂–¥–µ–Ω–∏—è": marketplace.knowledge_base.get_misconceptions_for_level(literacy_level, 3)
        }

    if '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏' in fin_profile:
        persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏'] = fin_profile['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏']
    else:
        persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏'] = marketplace.knowledge_base.get_random_financial_goals(2)

    if '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã' in fin_profile:
        persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'] = fin_profile['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã']
    else:
        persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'] = marketplace.knowledge_base.get_behavior_patterns(financial_behavior)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ EnhancedFinancialRespondent
    enhanced_persona = marketplace.enhanced_respondent.enhance_persona(persona)

    return enhanced_persona

def display_results(results):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    Args:
        results: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    report = results["report"]

    st.markdown("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with st.expander("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", expanded=True):
        stats = report["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]

        cols = st.columns(3)
        with cols[0]:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤", stats["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤"])
        with cols[1]:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", stats["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤"])
        with cols[2]:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤", stats["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤"])

        st.subheader("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
        cols_tokens = st.columns(2)
        with cols_tokens[0]:
            st.metric("Claude", stats["API —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (Claude)"])
        with cols_tokens[1]:
            st.metric("OpenAI", stats["API —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ (OpenAI)"])

    # –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    if results.get("fig"):
        with st.expander("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", expanded=True):
            st.pyplot(results["fig"])

    # –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
    with st.expander("–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤", expanded=True):
        if results["answers"]:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            sample_answers = random.sample(results["answers"], min(3, len(results["answers"])))

            for answer in sample_answers:
                persona_id = answer["persona_id"]
                persona = next((p for p in results["personas"] if p.get("ID", persona_id) == persona_id), results["personas"][persona_id-1])
                literacy_level = persona.get("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å", {}).get("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", "—Å—Ä–µ–¥–Ω–∏–π")

                st.markdown(f"### –†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç #{persona_id}")
                st.markdown(f"**–ü—Ä–æ—Ñ–∏–ª—å:** {persona['–ü–æ–ª']}, {persona['–í–æ–∑—Ä–∞—Å—Ç']} –ª–µ—Ç, {persona['–ì–æ—Ä–æ–¥']} ({persona['–†–µ–≥–∏–æ–Ω']})")
                st.markdown(f"**–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å:** {literacy_level}")
                st.markdown(f"**–í–æ–ø—Ä–æ—Å:** {answer['question']['text']}")
                st.markdown("**–û—Ç–≤–µ—Ç:**")
                st.markdown(f"> {answer['text']}")
                st.markdown("---")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏
    with st.expander("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", expanded=True):
        literacy_stats = report["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]["–£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"]
        literacy_df = pd.DataFrame([
            {"–£—Ä–æ–≤–µ–Ω—å": level, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": count}
            for level, count in literacy_stats.items()
        ])

        st.dataframe(literacy_df)

def main():
    #st.set_page_config(page_title="Synthetica Financial: c–∏–º—É–ª—è—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
                      #page_icon="üí∞", layout="wide", initial_sidebar_state="expanded")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    st.title("Synthetica Financial: c–∏–º—É–ª—è—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤")
    st.markdown("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    if 'marketplace' not in st.session_state:
        st.session_state.marketplace = None
    if 'personas' not in st.session_state:
        st.session_state.personas = []
    if 'questions' not in st.session_state:
        st.session_state.questions = None
    if 'results' not in st.session_state:
        st.session_state.results = None
    if 'show_results' not in st.session_state:
        st.session_state.show_results = False

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        # API –∫–ª—é—á–∏
        api_key_claude = st.text_input(
            "API –∫–ª—é—á Claude:",
            type="password",
            value=st.session_state.get('api_key_claude', ''),
            help="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á –¥–ª—è Anthropic Claude"
        )

        api_key_openai = st.text_input(
            "API –∫–ª—é—á OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            type="password",
            value=st.session_state.get('api_key_openai', ''),
            help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è OpenAI"
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –≤ —Å–µ—Å—Å–∏–∏
        st.session_state.api_key_claude = api_key_claude
        st.session_state.api_key_openai = api_key_openai

        # –§–∞–π–ª—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        questions_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏",
            type=["xlsx", "xls"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"
        )

        if questions_file is not None:
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                temp_marketplace = RespondentsMarketplace("temp_key")
                questions = temp_marketplace.load_questions(questions_file)
                st.session_state.questions = questions
                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}")
                st.session_state.questions = None

        # –§–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        reviews_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            type=["xlsx", "xls"],
            help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
        num_respondents = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤:",
            min_value=1,
            max_value=30,
            value=5
        )

        # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ API
        api_preference = st.radio(
            "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ API:",
            options=[("Claude (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", "claude"), ("OpenAI", "openai"), ("–û–±–∞ API", None)],
            format_func=lambda x: x[0]
        )[1]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        num_threads = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤:",
            min_value=1,
            max_value=10,
            value=3,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"
        )

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with st.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            visualize_data = st.checkbox(
                "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
                value=True
            )

            use_enhanced = st.checkbox(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
                value=True,
                help="–í–∫–ª—é—á–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏"
            )

            output_format = st.radio(
                "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:",
                options=[("Excel —Ç–∞–±–ª–∏—Ü–∞", "excel"), ("JSON", "json")]
            )[1]

            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                config = {
                    'api_key_claude': api_key_claude,
                    'api_key_openai': api_key_openai,
                    'num_respondents': num_respondents,
                    'api_preference': api_preference,
                    'num_threads': num_threads,
                    'visualize': visualize_data,
                    'use_enhanced': use_enhanced,
                    'output_format': output_format
                }
                save_uploaded_config(config)
                st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
                config = load_saved_config()
                if config:
                    st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    st.experimental_rerun()
                else:
                    st.warning("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω
        if st.button("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤", disabled=(not api_key_claude and not api_key_openai)):
            if not api_key_claude and not api_key_openai:
                st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á (Claude –∏–ª–∏ OpenAI)")
            else:
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
                st.session_state.marketplace = RespondentsMarketplace(
                    api_key_claude=api_key_claude,
                    api_key_openai=api_key_openai if api_key_openai else None
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω—ã
                st.session_state.personas = [
                    st.session_state.marketplace.generate_persona() for _ in range(num_respondents)
                ]
                st.session_state.show_results = False

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    if st.session_state.marketplace and st.session_state.personas:
        if not st.session_state.show_results:
            st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤")

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã –ø–µ—Ä—Å–æ–Ω
            updated_personas = []
            for i, persona in enumerate(st.session_state.personas):
                updated_persona = display_persona_editor(i+1, st.session_state.marketplace, persona)
                updated_personas.append(updated_persona)
                st.markdown("---")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω—ã
            st.session_state.personas = updated_personas

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", disabled=st.session_state.questions is None):
                if st.session_state.questions is None:
                    st.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏")
                else:
                    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤..."):
                        try:
                            results, download_data = run_generation_pipeline(
                                api_key_claude=api_key_claude,
                                api_key_openai=api_key_openai if api_key_openai else None,
                                questions_file=questions_file,
                                personas=st.session_state.personas,
                                output_format=output_format,
                                max_workers=num_threads,
                                api_preference=api_preference,
                                visualize=visualize_data,
                                reviews_file=reviews_file,
                                use_enhanced=use_enhanced
                            )

                            st.session_state.results = results
                            st.session_state.download_data = download_data
                            st.session_state.show_results = True
                            st.experimental_rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        else:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            display_results(st.session_state.results)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            if hasattr(st.session_state, 'download_data') and st.session_state.download_data is not None:
                file_ext = st.session_state.results.get("file_ext", ".xlsx")
                st.download_button(
                    label=f"–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({file_ext})",
                    data=st.session_state.download_data,
                    file_name=f"financial_responses{file_ext}",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" if file_ext == ".xlsx" else "application/json"
                )

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"):
                st.session_state.show_results = False
                st.experimental_rerun()
    else:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö —Ñ–∞–π–ª–æ–≤
        st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö —Ñ–∞–π–ª–æ–≤")

        st.markdown("""
        ### –§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏:
        –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
        - **id** - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - **question** - —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        - **type** - —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: 'open', 'single', 'multiple' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'open')
        - **topic** - —Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–∞: '–∫—Ä–µ–¥–∏—Ç—ã', '–∫–∞—Ä—Ç—ã', '–≤–∫–ª–∞–¥—ã', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–æ–±—â–∏–µ', '–æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - **options** - –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–ª—è —Ç–∏–ø–æ–≤ 'single' –∏ 'multiple')
        - **context** - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """)

        st.markdown("""
        ### –§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
        –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:
        - **bank** –∏–ª–∏ **–±–∞–Ω–∫** - –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
        - **text**, **—Ç–µ–∫—Å—Ç** –∏–ª–∏ **–æ—Ç–∑—ã–≤** - —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        - **rating**, **–æ—Ü–µ–Ω–∫–∞** –∏–ª–∏ **—Ä–µ–π—Ç–∏–Ω–≥** - –æ—Ü–µ–Ω–∫–∞ (–æ–±—ã—á–Ω–æ –æ—Ç 1 –¥–æ 5)
        - **date** –∏–ª–∏ **–¥–∞—Ç–∞** - –¥–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –æ –±–∞–Ω–∫–∞—Ö –ø–æ–∑–≤–æ–ª–∏—Ç –æ–±–æ–≥–∞—Ç–∏—Ç—å –æ—Ç–≤–µ—Ç—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
        """)

        st.markdown("""
        ### –£—Ä–æ–≤–Ω–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏:
        - **–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–Ω–∞–∫–æ–º —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        - **–Ω–∞—á–∏–Ω–∞—é—â–∏–π** - –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è (–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –ø—Ä–æ—Å—Ç—ã–µ –≤–∫–ª–∞–¥—ã)
        - **—Å—Ä–µ–¥–Ω–∏–π** - –ø–æ–Ω–∏–º–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∏–º–µ–µ—Ç –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤
        - **–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π** - —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –≤ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∏–º–µ–µ—Ç –æ–ø—ã—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        - **—ç–∫—Å–ø–µ—Ä—Ç** - –≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        """)

        st.markdown("""
        ### –ú–æ–¥–µ–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è:
        - **–∏–∑–±–µ–≥–∞—é—â–∏–π —Ä–∏—Å–∫–∞** - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
        - **–∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã–π** - —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, —á–∞—Å—Ç–æ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        - **–ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π** - –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, —Ç—â–∞—Ç–µ–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π
        - **–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç** - —Ç—â–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞ —á—Ç–æ —Ç—Ä–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∏, –∏–∑–±–µ–≥–∞–µ—Ç –ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç
        - **—Å—Ç–∞—Ç—É—Å–Ω—ã–π** - –≤–∞–∂–µ–Ω –ø—Ä–µ—Å—Ç–∏–∂ –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —É—Å–ª—É–≥
        """)

        st.markdown("""
        ### –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
        –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:
        - **–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è** - —ç—Ñ—Ñ–µ–∫—Ç —è–∫–æ—Ä—è, –∏–∑–±–µ–≥–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—å, —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã—Ö –∑–∞—Ç—Ä–∞—Ç –∏ —Ç.–¥.
        - **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã** - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ç—Ä–µ–≤–æ–≥–∞, —Å—Ç—ã–¥, –≥–æ—Ä–¥–æ—Å—Ç—å, —Ñ–∞—Ç–∞–ª–∏–∑–º –∏ —Ç.–¥.
        - **–õ–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏** - —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞, —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã, —Å–ª–µ–Ω–≥, —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        - **–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç** - –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        - **–ù–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –º–æ–¥–µ–ª—å —É—Å—Ç–∞–ª–æ—Å—Ç–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        - **–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤, —Å–æ–∫—Ä—ã—Ç–∏–µ –¥–æ–ª–≥–æ–≤, —Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞—Ç
        """)

if __name__ == "__main__":
    main()
