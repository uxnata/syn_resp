# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oDKXwhFHCE3Y0gEvoRCMfg3uVkBmuzQX
"""

#!pip install ipywidgets pandas numpy matplotlib seaborn anthropic openai nltk scikit-learn spacy

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
import os
import tempfile
import time
from io import BytesIO
import base64

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
from synthetic_resps_improved import (
    RespondentsMarketplace, BankReviewsAnalyzer, FinancialKnowledgeBase,
    CognitiveBiases, EmotionalFactors, LinguisticVariation,
    LifeContextFactors, Inconsistency, EnhancedFinancialRespondent,
    NumpyEncoder
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏–º—É–ª—è—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    st.markdown("""
    <style>
        .main-header {
            font-size: 2.5rem;
            color: #1E88E5;
            text-align: center;
            margin-bottom: 1rem;
        }
        .sub-header {
            font-size: 1.5rem;
            color: #424242;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }
        .card {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 1rem;
            border-left: 5px solid #1E88E5;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .respondent-card {
            background-color: white;
            border-radius: 8px;
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .success-message {
            padding: 10px;
            background-color: #d4edda;
            color: #155724;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        .error-message {
            padding: 10px;
            background-color: #f8d7da;
            color: #721c24;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        .info-box {
            background-color: #e3f2fd;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
        }
        .stTabs [data-baseweb="tab-list"] {
            gap: 2px;
        }
        .stTabs [data-baseweb="tab"] {
            background-color: #f0f2f6;
            border-radius: 4px 4px 0 0;
            padding: 10px 16px;
            margin-right: 2px;
        }
        .stTabs [aria-selected="true"] {
            background-color: #4285F4 !important;
            color: white !important;
        }
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("<h1 class='main-header'>–°–∏–º—É–ª—è—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤</h1>", unsafe_allow_html=True)
    st.markdown("<p style='text-align:center'>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏</p>", unsafe_allow_html=True)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ—Å—Å–∏–∏
    if 'api_keys_set' not in st.session_state:
        st.session_state.api_keys_set = False
    if 'questions_uploaded' not in st.session_state:
        st.session_state.questions_uploaded = False
    if 'reviews_uploaded' not in st.session_state:
        st.session_state.reviews_uploaded = False
    if 'marketplace' not in st.session_state:
        st.session_state.marketplace = None
    if 'respondents' not in st.session_state:
        st.session_state.respondents = []
    if 'questions' not in st.session_state:
        st.session_state.questions = []
    if 'results' not in st.session_state:
        st.session_state.results = None
    if 'generation_complete' not in st.session_state:
        st.session_state.generation_complete = False

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    tab1, tab2, tab3, tab4 = st.tabs(["üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞", "üë• –†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã", "üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

    # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with tab1:
        setup_tab()

    # –í–∫–ª–∞–¥–∫–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
    with tab2:
        respondents_tab()

    # –í–∫–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    with tab3:
        generation_tab()

    # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with tab4:
        results_tab()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
def setup_tab():
    st.markdown("<h2 class='sub-header'>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h2>", unsafe_allow_html=True)

    with st.expander("API –∫–ª—é—á–∏", expanded=not st.session_state.api_keys_set):
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        col1, col2 = st.columns(2)

        with col1:
            claude_api = st.text_input(
                "API –∫–ª—é—á Claude (Anthropic)",
                type="password",
                help="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ Anthropic Claude"
            )

        with col2:
            openai_api = st.text_input(
                "API –∫–ª—é—á OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                type="password",
                help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ OpenAI"
            )

        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á–∏"):
            if claude_api or openai_api:
                st.session_state.api_keys_set = True
                st.session_state.claude_api = claude_api
                st.session_state.openai_api = openai_api
                st.markdown("<div class='success-message'>API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</div>", unsafe_allow_html=True)
            else:
                st.markdown("<div class='error-message'>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)

    with st.expander("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", expanded=not st.session_state.questions_uploaded):
        st.markdown("<div class='card'>", unsafe_allow_html=True)

        st.markdown("### –§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        questions_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏",
            type=["xlsx", "xls"],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: question, type, topic, options (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )

        if questions_file is not None:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
                tmp.write(questions_file.getvalue())
                tmp_questions_path = tmp.name

            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
                temp_marketplace = RespondentsMarketplace("temp_key")
                questions = temp_marketplace.load_questions(tmp_questions_path)
                st.session_state.questions = questions
                st.session_state.questions_uploaded = True
                st.session_state.questions_path = tmp_questions_path

                st.markdown(f"<div class='success-message'>–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤</div>", unsafe_allow_html=True)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"):
                    sample_questions = questions[:5] if len(questions) > 5 else questions
                    for q in sample_questions:
                        st.markdown(f"**–í–æ–ø—Ä–æ—Å {q['id']}**: {q['text']}")
                        st.markdown(f"–¢–∏–ø: {q['type']}, –¢–µ–º–∞: {q['topic']}")
                        if q['options']:
                            st.markdown(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {', '.join(q['options'])}")
                        st.markdown("---")

            except Exception as e:
                st.markdown(f"<div class='error-message'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}</div>", unsafe_allow_html=True)
                os.unlink(tmp_questions_path)

        st.markdown("### –§–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        reviews_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö",
            type=["xlsx", "xls"],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –æ –±–∞–Ω–∫–∞—Ö"
        )

        if reviews_file is not None:
            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
                tmp.write(reviews_file.getvalue())
                tmp_reviews_path = tmp.name

            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤
                reviews_analyzer = BankReviewsAnalyzer()
                reviews_analyzer.load_reviews(tmp_reviews_path)

                st.session_state.reviews_uploaded = True
                st.session_state.reviews_path = tmp_reviews_path

                st.markdown(f"<div class='success-message'>–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews_analyzer.reviews_data)}</div>", unsafe_allow_html=True)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–∑—ã–≤–∞–º
                with st.expander("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º"):
                    bank_info = reviews_analyzer.get_bank_info()
                    st.markdown(f"**–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤**: {bank_info['total_reviews']}")

                    st.markdown("**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–∞–Ω–∫–∏**:")
                    for bank, data in list(bank_info['top_banks'].items())[:5]:
                        st.markdown(f"- {bank}: {data['count']} –æ—Ç–∑—ã–≤–æ–≤, —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {data['mean']:.2f}")

                    if 'topics' in bank_info:
                        st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –≤ –æ—Ç–∑—ã–≤–∞—Ö**:")
                        for topic, words in list(bank_info['topics'].items())[:3]:
                            st.markdown(f"- {topic}: {', '.join(words[:5])}")

            except Exception as e:
                st.markdown(f"<div class='error-message'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}</div>", unsafe_allow_html=True)
                if os.path.exists(tmp_reviews_path):
                    os.unlink(tmp_reviews_path)

        st.markdown("</div>", unsafe_allow_html=True)

    with st.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.markdown("<div class='card'>", unsafe_allow_html=True)

        col1, col2 = st.columns(2)

        with col1:
            api_preference = st.radio(
                "–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ API",
                options=["claude", "openai", "–æ–±–∞"],
                format_func=lambda x: {"claude": "Claude (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", "openai": "OpenAI", "–æ–±–∞": "–û–±–∞ API"}[x],
                index=0
            )

            max_workers = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤",
                min_value=1,
                max_value=10,
                value=3,
                help="–ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ —É—Å–∫–æ—Ä—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ API"
            )

        with col2:
            use_enhanced = st.checkbox(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
                value=True,
                help="–í–∫–ª—é—á–∞–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –¥—Ä. –¥–ª—è –±–æ–ª—å—à–µ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏"
            )

            visualize = st.checkbox(
                "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏",
                value=True,
                help="–°–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
            )

            output_format = st.radio(
                "–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
                options=["excel", "json"],
                format_func=lambda x: {"excel": "Excel (.xlsx)", "json": "JSON (.json)"}[x],
                index=0
            )

        st.text_input(
            "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
            value="financial_responses.xlsx" if output_format == "excel" else "financial_responses.json",
            key="output_filename"
        )

        st.markdown("</div>", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
def respondents_tab():
    st.markdown("<h2 class='sub-header'>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤</h2>", unsafe_allow_html=True)

    num_respondents = st.number_input(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤",
        min_value=1,
        max_value=50,
        value=5,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"
    )

    col1, col2 = st.columns([3, 1])

    with col1:
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤", disabled=not st.session_state.api_keys_set):
            if not st.session_state.api_keys_set:
                st.markdown("<div class='error-message'>–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏</div>", unsafe_allow_html=True)
            else:
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤..."):
                    try:
                        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
                        marketplace = RespondentsMarketplace(
                            api_key_claude=st.session_state.claude_api,
                            api_key_openai=st.session_state.openai_api if hasattr(st.session_state, 'openai_api') else None
                        )

                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
                        respondents = []
                        for i in range(num_respondents):
                            respondent = marketplace.generate_persona()
                            respondent["ID"] = i+1
                            respondents.append(respondent)

                        st.session_state.respondents = respondents
                        st.session_state.marketplace = marketplace

                        st.markdown(f"<div class='success-message'>–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(respondents)} —à–∞–±–ª–æ–Ω–æ–≤ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤</div>", unsafe_allow_html=True)

                    except Exception as e:
                        st.markdown(f"<div class='error-message'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}</div>", unsafe_allow_html=True)

    with col2:
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", disabled=False):
            st.info("–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if hasattr(st.session_state, 'respondents') and st.session_state.respondents:
        st.markdown("<h3>–ü—Ä–æ—Ñ–∏–ª–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤</h3>", unsafe_allow_html=True)

        for i, respondent in enumerate(st.session_state.respondents):
            with st.expander(f"–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç #{i+1}: {respondent['–ü–æ–ª']}, {respondent['–í–æ–∑—Ä–∞—Å—Ç']} –ª–µ—Ç, {respondent['–ì–æ—Ä–æ–¥']} ({respondent['–†–µ–≥–∏–æ–Ω']})"):
                col1, col2 = st.columns(2)

                with col1:
                    st.markdown("### –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                    st.markdown(f"**–ü–æ–ª**: {respondent['–ü–æ–ª']}")
                    st.markdown(f"**–í–æ–∑—Ä–∞—Å—Ç**: {respondent['–í–æ–∑—Ä–∞—Å—Ç']}")
                    st.markdown(f"**–†–µ–≥–∏–æ–Ω**: {respondent['–†–µ–≥–∏–æ–Ω']}")
                    st.markdown(f"**–ì–æ—Ä–æ–¥**: {respondent['–ì–æ—Ä–æ–¥']}")
                    st.markdown(f"**–ü—Ä–æ—Ñ–µ—Å—Å–∏—è**: {respondent['–ü—Ä–æ—Ñ–µ—Å—Å–∏—è']}")
                    st.markdown(f"**–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ**: {respondent['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']}")
                    st.markdown(f"**–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ**: {respondent['–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ']}")
                    st.markdown(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π**: {respondent['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π']}")
                    st.markdown(f"**–î–æ—Ö–æ–¥**: {respondent['–î–æ—Ö–æ–¥']}")
                    st.markdown(f"**–£–≤–ª–µ—á–µ–Ω–∏—è**: {', '.join(respondent['–£–≤–ª–µ—á–µ–Ω–∏—è'])}")

                with col2:
                    st.markdown("### –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
                    fin_profile = respondent['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']

                    st.markdown(f"**–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏**: {fin_profile['–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏']}")

                    st.markdown("**–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã**:")
                    for product, used in fin_profile['–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'].items():
                        if used:
                            st.markdown(f"- {product}")

                    st.markdown("**–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º**:")
                    for key, value in fin_profile['–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º'].items():
                        st.markdown(f"- {key}: {value}")

                    if '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏' in fin_profile:
                        st.markdown(f"**–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏**: {', '.join(fin_profile['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏'])}")

                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                if st.button(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å #{i+1}", key=f"edit_respondent_{i}"):
                    st.info("–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    else:
        st.markdown("<div class='info-box'>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —à–∞–±–ª–æ–Ω—ã —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤</div>", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
def generation_tab():
    st.markdown("<h2 class='sub-header'>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤</h2>", unsafe_allow_html=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    all_set = st.session_state.api_keys_set and st.session_state.questions_uploaded
    respondents_set = hasattr(st.session_state, 'respondents') and len(st.session_state.respondents) > 0

    if not all_set or not respondents_set:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown("### –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É")

        checklist_items = [
            ("‚úÖ" if st.session_state.api_keys_set else "‚ùå") + " –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏",
            ("‚úÖ" if st.session_state.questions_uploaded else "‚ùå") + " –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏",
            ("‚úÖ" if respondents_set else "‚ùå") + " –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤"
        ]

        for item in checklist_items:
            st.markdown(f"- {item}")

        st.markdown("</div>", unsafe_allow_html=True)
        return

    # –ï—Å–ª–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    st.markdown("<div class='card'>", unsafe_allow_html=True)

    col1, col2 = st.columns([3, 1])

    with col1:
        start_button = st.button(
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤",
            disabled=st.session_state.generation_complete,
            use_container_width=True
        )

    with col2:
        if st.session_state.generation_complete:
            reset_button = st.button(
                "–°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                use_container_width=True
            )
            if reset_button:
                st.session_state.generation_complete = False
                st.session_state.results = None
                st.experimental_rerun()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if start_button:
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤..."):
            try:
                progress_bar = st.progress(0)
                status_text = st.empty()

                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
                # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —è –¥–æ–±–∞–≤–ª—é –∏–º–∏—Ç–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                total_items = len(st.session_state.respondents) * len(st.session_state.questions)

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                api_preference = st.session_state.get('api_preference', 'claude')
                max_workers = st.session_state.get('max_workers', 3)
                use_enhanced = st.session_state.get('use_enhanced', True)

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                marketplace = st.session_state.marketplace
                personas = st.session_state.respondents
                questions = st.session_state.questions
                output_format = st.session_state.get('output_format', 'excel')
                output_filename = st.session_state.get('output_filename', 'financial_responses.xlsx')

                # –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                for i in range(100):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = min(i/99, 1.0)
                    progress_bar.progress(progress)

                    # –≠–º—É–ª—è—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    current_item = int(progress * total_items)
                    status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current_item}/{total_items} –æ—Ç–≤–µ—Ç–æ–≤...")

                    time.sleep(0.05)

                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                st.session_state.generation_complete = True

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
                st.session_state.results = {
                    "personas": personas,
                    "questions": questions,
                    "answers": [{"id": i, "persona_id": p["ID"],
                                "question": q,
                                "text": f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ #{p['ID']} –Ω–∞ –≤–æ–ø—Ä–æ—Å {q['id']}"}
                                for i, (p, q) in enumerate([(p, q) for p in personas for q in questions])],
                    "report": {
                        "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": {
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤": len(personas),
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤": len(questions),
                            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤": total_items
                        }
                    }
                }

                st.markdown("<div class='success-message'>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.</div>", unsafe_allow_html=True)

            except Exception as e:
                st.markdown(f"<div class='error-message'>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {str(e)}</div>", unsafe_allow_html=True)

    st.markdown("</div>", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def results_tab():
    st.markdown("<h2 class='sub-header'>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑</h2>", unsafe_allow_html=True)

    if not hasattr(st.session_state, 'results') or not st.session_state.results:
        st.markdown("<div class='info-box'>–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è</div>", unsafe_allow_html=True)
        return

    results = st.session_state.results

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("### –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤", results["report"]["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤"])
    with col2:
        st.metric("–í–æ–ø—Ä–æ—Å–æ–≤", results["report"]["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤"])
    with col3:
        st.metric("–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤", results["report"]["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤"])

    st.markdown("</div>", unsafe_allow_html=True)

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_tabs = st.tabs(["–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤", "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", "–ê–Ω–∞–ª–∏–∑", "–≠–∫—Å–ø–æ—Ä—Ç"])

    # –í–∫–ª–∞–¥–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    with result_tabs[0]:
        st.markdown("### –ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")

        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        col1, col2 = st.columns(2)
        with col1:
            selected_respondent = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—É",
                options=["–í—Å–µ"] + [f"#{p['ID']}: {p['–ü–æ–ª']}, {p['–í–æ–∑—Ä–∞—Å—Ç']} –ª–µ—Ç" for p in results["personas"]]
            )

        with col2:
            selected_question = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ø—Ä–æ—Å—É",
                options=["–í—Å–µ"] + [f"#{q['id']}: {q['text'][:50]}..." for q in results["questions"]]
            )

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
        answers_to_show = results["answers"]

        if selected_respondent != "–í—Å–µ":
            respondent_id = int(selected_respondent.split(":")[0].replace("#", ""))
            answers_to_show = [a for a in answers_to_show if a["persona_id"] == respondent_id]

        if selected_question != "–í—Å–µ":
            question_id = int(selected_question.split(":")[0].replace("#", ""))
            answers_to_show = [a for a in answers_to_show if a["question"]["id"] == question_id]

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        answers_to_show = answers_to_show[:10] if len(answers_to_show) > 10 else answers_to_show

        for answer in answers_to_show:
            persona = next((p for p in results["personas"] if p["ID"] == answer["persona_id"]), None)
            if not persona:
                continue

            with st.expander(f"–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç #{persona['ID']}: {persona['–ü–æ–ª']}, {persona['–í–æ–∑—Ä–∞—Å—Ç']} –ª–µ—Ç - –í–æ–ø—Ä–æ—Å #{answer['question']['id']}"):
                st.markdown(f"**–í–æ–ø—Ä–æ—Å**: {answer['question']['text']}")
                st.markdown(f"**–û—Ç–≤–µ—Ç**:")
                st.markdown(f"<div class='respondent-card'>{answer['text']}</div>", unsafe_allow_html=True)

                literacy_level = persona['–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å']['–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏']
                st.markdown(f"*–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞: {literacy_level}*")

    # –í–∫–ª–∞–¥–∫–∞ —Å –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–µ–π
    with result_tabs[1]:
        st.markdown("### –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤")

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        demo_data = []
        for p in results["personas"]:
            row = {
                "ID": p["ID"],
                "–ü–æ–ª": p["–ü–æ–ª"],
                "–í–æ–∑—Ä–∞—Å—Ç": p["–í–æ–∑—Ä–∞—Å—Ç"],
                "–†–µ–≥–∏–æ–Ω": p["–†–µ–≥–∏–æ–Ω"],
                "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": p["–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"],
                "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å": p["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"]["–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"]
            }
            demo_data.append(row)

        df = pd.DataFrame(demo_data)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏–∏
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É")
            gender_counts = df["–ü–æ–ª"].value_counts()
            fig1, ax1 = plt.subplots()
            ax1.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=90)
            ax1.axis('equal')
            st.pyplot(fig1)

        with col2:
            st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É")
            fig2, ax2 = plt.subplots()
            ax2.hist(df["–í–æ–∑—Ä–∞—Å—Ç"], bins=10, edgecolor='black')
            ax2.set_xlabel("–í–æ–∑—Ä–∞—Å—Ç")
            ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            st.pyplot(fig2)

        col3, col4 = st.columns(2)

        with col3:
            st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏")
            fig3, ax3 = plt.subplots()
            literacy_order = ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞–Ω–∏–π", "–Ω–∞—á–∏–Ω–∞—é—â–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "—ç–∫—Å–ø–µ—Ä—Ç"]
            literacy_counts = df["–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å"].value_counts().reindex(literacy_order).fillna(0)
            ax3.bar(literacy_counts.index, literacy_counts.values)
            ax3.set_xticklabels(literacy_counts.index, rotation=45, ha="right")
            st.pyplot(fig3)

        with col4:
            st.markdown("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            fig4, ax4 = plt.subplots()
            region_counts = df["–†–µ–≥–∏–æ–Ω"].value_counts().head(5)
            ax4.bar(region_counts.index, region_counts.values)
            ax4.set_xticklabels(region_counts.index, rotation=45, ha="right")
            st.pyplot(fig4)

    # –í–∫–ª–∞–¥–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º
    with result_tabs[2]:
        st.markdown("### –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤")
        st.info("–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    # –í–∫–ª–∞–¥–∫–∞ —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º
    with result_tabs[3]:
        st.markdown("### –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        col1, col2 = st.columns(2)

        with col1:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
                # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ Excel —Ñ–∞–π–ª–∞
                output = BytesIO()

                # –°–æ–∑–¥–∞–µ–º Excel-writer
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ª–∏—Å—Ç—ã

                    # –õ–∏—Å—Ç —Å —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞–º–∏
                    persona_rows = []
                    for p in results["personas"]:
                        row = {
                            "ID": p["ID"],
                            "–ü–æ–ª": p["–ü–æ–ª"],
                            "–í–æ–∑—Ä–∞—Å—Ç": p["–í–æ–∑—Ä–∞—Å—Ç"],
                            "–†–µ–≥–∏–æ–Ω": p["–†–µ–≥–∏–æ–Ω"],
                            "–ì–æ—Ä–æ–¥": p["–ì–æ—Ä–æ–¥"],
                            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": p["–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"],
                            "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å": p["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"]["–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏"]
                        }
                        persona_rows.append(row)

                    pd.DataFrame(persona_rows).to_excel(writer, sheet_name='–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—ã', index=False)

                    # –õ–∏—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
                    question_rows = []
                    for q in results["questions"]:
                        row = {
                            "ID": q["id"],
                            "–í–æ–ø—Ä–æ—Å": q["text"],
                            "–¢–∏–ø": q["type"],
                            "–¢–µ–º–∞": q["topic"]
                        }
                        question_rows.append(row)

                    pd.DataFrame(question_rows).to_excel(writer, sheet_name='–í–æ–ø—Ä–æ—Å—ã', index=False)

                    # –õ–∏—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏
                    answer_rows = []
                    for a in results["answers"]:
                        row = {
                            "ID –æ—Ç–≤–µ—Ç–∞": a["id"],
                            "ID —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞": a["persona_id"],
                            "ID –≤–æ–ø—Ä–æ—Å–∞": a["question"]["id"],
                            "–í–æ–ø—Ä–æ—Å": a["question"]["text"],
                            "–û—Ç–≤–µ—Ç": a["text"]
                        }
                        answer_rows.append(row)

                    pd.DataFrame(answer_rows).to_excel(writer, sheet_name='–û—Ç–≤–µ—Ç—ã', index=False)

                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                b64 = base64.b64encode(output.getvalue()).decode()
                href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="financial_responses.xlsx">–°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª</a>'
                st.markdown(href, unsafe_allow_html=True)

        with col2:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"):
                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON
                json_str = json.dumps(results, ensure_ascii=False, indent=2, cls=NumpyEncoder)

                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                b64 = base64.b64encode(json_str.encode()).decode()
                href = f'<a href="data:application/json;base64,{b64}" download="financial_responses.json">–°–∫–∞—á–∞—Ç—å JSON —Ñ–∞–π–ª</a>'
                st.markdown(href, unsafe_allow_html=True)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()
